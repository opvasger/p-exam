#line 1 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"




























































#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"












#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"

































































#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"






#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"









#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"













#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"















#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"













#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"







#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"



#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"

#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"














#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"





#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"





#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"






#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"







#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"





#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"





#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"





#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"








#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"





















    
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






    
    

#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
        
            
        

#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    #line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"













#pragma once







































































































































#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
































#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"

#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"





#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"











#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"








#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros



























































































































































































































































































































































































































































































































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1555 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






























#line 1586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
























#line 1611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"












#line 1624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






































#line 1663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"















































































































#line 1775 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






































































































#line 1878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"








































































































































































#line 2047 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"





































































































#line 2149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



















































































































































































































#line 2361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
extern "C" {




#line 2367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



































































































































































































































#line 2595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    

#line 2634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"









































































































































































































































#line 2868 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"









#line 2878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"


    
    
#line 2883 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






#line 2890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#line 2891 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






#line 2898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#line 2899 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"











#line 2911 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"

































#line 2945 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






















}
#line 2969 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"


















#pragma once


extern "C" {
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
















































































































































































































































#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"



#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"


















































































#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"


}
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"

#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
#line 2971 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"


#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"










#pragma once



#pragma pack(push, 8)


extern "C" {
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"



#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    
    


        typedef unsigned int uintptr_t;
    #line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    
    


        typedef char* va_list;
    #line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    


#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"





#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"



#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
    
    
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"











#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"

    

    
    
    




































#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


} 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        void __vcrt_va_start_verify_argument_type() throw()
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
        }
    } 

    





#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"

#pragma pack(pop)
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






    



    





















#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

__pragma(pack(push, 8)) extern "C" {




    
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


















    

#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
        
    

#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    





#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
        
    #line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"







#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"





#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    
    
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"




    
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"








    


#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"



#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"




    
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
        
        
    

#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"










    typedef unsigned int     size_t;
    typedef int              ptrdiff_t;
    typedef int              intptr_t;
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    typedef bool  __vcrt_bool;






#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"



    
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"








    
        
    

#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"



#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

        
    }


#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
        
    





#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"



#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
        
    


#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"









    void __cdecl __security_init_cookie(void);

    
        void __fastcall __security_check_cookie(  uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(void);
    


#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

extern uintptr_t __security_cookie;


    
    
    
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

} __pragma(pack(pop))

#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

__pragma(pack(push, 8)) extern "C" {









    

#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
        
    

#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"




    
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    

#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
        
    

#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"





#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"





    
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"













    


        
    #line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"









extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    typedef bool  __crt_bool;


#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"










    
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"











#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"









    











        
    #line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
        
    

#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
















    __declspec(dllimport) void __cdecl _invalid_parameter(
          wchar_t const*,
          wchar_t const*,
          wchar_t const*,
                unsigned int,
                uintptr_t
        );
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(void);
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
__declspec(dllimport) void __cdecl _invoke_watson(
      wchar_t const*,
      wchar_t const*,
      wchar_t const*,
            unsigned int,
            uintptr_t);


    
        

    













#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"










#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
        
    



#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"









    






        
    #line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


        
    #line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"













#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"




















    
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    

#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


        


            
        #line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    #line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"





#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


        



    #line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
        
    



#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

    
        
        
        
    



#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

    
        
              
        

#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
    



#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

    
        
    



#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

    
        
    



#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"








typedef int                           errno_t;
typedef unsigned short                wint_t;
typedef unsigned short                wctype_t;
typedef long                          __time32_t;
typedef __int64                       __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
      int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data*    locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t; 

typedef struct _Mbstatet
{ 
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;



#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    


        typedef __time64_t time_t;
    #line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



    
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"


    typedef size_t rsize_t;
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"










    

        










        










        










        










        










        










        










        










        










        















        















        
















    














#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"












































































    





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"

        
        
        
        

        


        


        


        


        


        


        


        


        



        



        


        


        


        


        


        


        


        


        


        


        



        



        



        


        



        




        

        




        

        




        

        




        

        




        

        




        

        




        

        




        

    #line 1897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
#line 1898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"



} __pragma(pack(pop))

#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"









    

#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"

#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        
    #line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"


    

#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        
            
        

#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
    #line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"


    

#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        
            
        

#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
    #line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"


    

#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"

#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        
            
        

#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
    #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"


#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"



#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"

#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"






#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"

#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

#pragma once






 
















































































#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

  


















































































#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"
 #line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"








#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
























































#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#pragma pack(push,8)





 
  


   
  #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  
  
 


#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"














 
  
   

#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
    
   #line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
  





#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 




























#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		

	







		
		
			
		

#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		




 
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"










































	
	






		
			
		

#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
	




		
			
		

#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
	
		
	



#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





	
		#pragma detect_mismatch("_MSC_VER", "1900")
	#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
		#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "2")
	#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
		

#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
			#pragma detect_mismatch("RuntimeLibrary", "MDd_DynamicDebug")
		#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"








	

#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
		
	#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"




#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"




#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"













#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
 

 









 









 









 

 









 









 




 





 













#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"











#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"













#pragma once








#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"











    
    



#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"


    






#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"



    
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"

#pragma comment(lib, "msvcprt" "d" "")






#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"

#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"

#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"



#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"



#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 















 
  

#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  

#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  

#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  





#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

   


#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
    
   #line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

  #line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  
 #line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  

#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   


     
   #line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
  #line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 


























  
   
  #line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		

 
  
  
  




  
  
  

  







   
   
   
  #line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

  
  
  
  

 












#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		





		







typedef long long _Longlong;
typedef unsigned long long _ULonglong;

		






		
		






 
namespace std {
enum _Uninitialized
	{	
	_Noinit
	};

		

#pragma warning(push)
#pragma warning(disable:4412)
class __declspec(dllimport) _Lockit
	{	
public:
 

  
















#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	__thiscall _Lockit();	
	explicit __thiscall _Lockit(int);	
	__thiscall ~_Lockit() noexcept;	
  #line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	static  void __cdecl _Lockit_ctor(int);
	static  void __cdecl _Lockit_dtor(int);

private:
	static  void __cdecl _Lockit_ctor(_Lockit *);
	static  void __cdecl _Lockit_ctor(_Lockit *, int);
	static  void __cdecl _Lockit_dtor(_Lockit *);

public:
	 _Lockit(const _Lockit&) = delete;
	_Lockit&  operator=(const _Lockit&) = delete;

private:
	int _Locktype;

  











#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	};

 



































































  



  


  



  


  
 #line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

class __declspec(dllimport) _Init_locks
	{	
public:
 
  










#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	__thiscall _Init_locks();
	__thiscall ~_Init_locks() noexcept;
  #line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

private:
	static  void __cdecl _Init_locks_ctor(_Init_locks *);
	static  void __cdecl _Init_locks_dtor(_Init_locks *);

 







#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	};

#pragma warning(pop)
}
 #line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





		

__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void));

typedef unsigned long _Uint32t;




 
 #pragma pack(pop)
#line 819 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





#line 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdarg.h"

__pragma(pack(push, 8)) extern "C" {










} __pragma(pack(pop))
#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"

 
namespace std {
using ::va_list;
}
 #line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdarg"





#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"





























#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"
#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"

#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"



#line 259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"

#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"
#line 79 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"


























































































#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"










#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








































#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"



#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"




#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"










#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"













        





#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
























#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"


#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"







enum __declspec(__device_builtin__) cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};

#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"

__pragma(pack(push, 8)) extern "C" {









    
    



#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"









































#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"


    


        
    #line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"


    
        
    #line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"



} __pragma(pack(pop))
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"




__declspec(dllimport) int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);



    
        
    

#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"


#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"

__declspec(dllimport) extern unsigned long  __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);



} __pragma(pack(pop))
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
















 






















































#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"










enum __declspec(__device_builtin__) cudaError
{
    




    cudaSuccess                           =      0,
  
    



    cudaErrorMissingConfiguration         =      1,
  
    



    cudaErrorMemoryAllocation             =      2,
  
    



    cudaErrorInitializationError          =      3,
  
    







    cudaErrorLaunchFailure                =      4,
  
    






    cudaErrorPriorLaunchFailure           =      5,
  
    







    cudaErrorLaunchTimeout                =      6,
  
    






    cudaErrorLaunchOutOfResources         =      7,
  
    



    cudaErrorInvalidDeviceFunction        =      8,
  
    






    cudaErrorInvalidConfiguration         =      9,
  
    



    cudaErrorInvalidDevice                =     10,
  
    



    cudaErrorInvalidValue                 =     11,
  
    



    cudaErrorInvalidPitchValue            =     12,
  
    



    cudaErrorInvalidSymbol                =     13,
  
    


    cudaErrorMapBufferObjectFailed        =     14,
  
    


    cudaErrorUnmapBufferObjectFailed      =     15,
  
    



    cudaErrorInvalidHostPointer           =     16,
  
    



    cudaErrorInvalidDevicePointer         =     17,
  
    



    cudaErrorInvalidTexture               =     18,
  
    



    cudaErrorInvalidTextureBinding        =     19,
  
    




    cudaErrorInvalidChannelDescriptor     =     20,
  
    



    cudaErrorInvalidMemcpyDirection       =     21,
  
    







    cudaErrorAddressOfConstant            =     22,
  
    






    cudaErrorTextureFetchFailed           =     23,
  
    






    cudaErrorTextureNotBound              =     24,
  
    






    cudaErrorSynchronizationError         =     25,
  
    



    cudaErrorInvalidFilterSetting         =     26,
  
    



    cudaErrorInvalidNormSetting           =     27,
  
    





    cudaErrorMixedDeviceExecution         =     28,
  
    




    cudaErrorCudartUnloading              =     29,
  
    


    cudaErrorUnknown                      =     30,

    





    cudaErrorNotYetImplemented            =     31,
  
    






    cudaErrorMemoryValueTooLarge          =     32,
  
    




    cudaErrorInvalidResourceHandle        =     33,
  
    





    cudaErrorNotReady                     =     34,
  
    




    cudaErrorInsufficientDriver           =     35,
  
    










    cudaErrorSetOnActiveProcess           =     36,
  
    



    cudaErrorInvalidSurface               =     37,
  
    



    cudaErrorNoDevice                     =     38,
  
    



    cudaErrorECCUncorrectable             =     39,
  
    


    cudaErrorSharedObjectSymbolNotFound   =     40,
  
    


    cudaErrorSharedObjectInitFailed       =     41,
  
    



    cudaErrorUnsupportedLimit             =     42,
  
    



    cudaErrorDuplicateVariableName        =     43,
  
    



    cudaErrorDuplicateTextureName         =     44,
  
    



    cudaErrorDuplicateSurfaceName         =     45,
  
    







    cudaErrorDevicesUnavailable           =     46,
  
    


    cudaErrorInvalidKernelImage           =     47,
  
    





    cudaErrorNoKernelImageForDevice       =     48,
  
    










    cudaErrorIncompatibleDriverContext    =     49,
      
    




    cudaErrorPeerAccessAlreadyEnabled     =     50,
    
    




    cudaErrorPeerAccessNotEnabled         =     51,
    
    



    cudaErrorDeviceAlreadyInUse           =     54,

    




    cudaErrorProfilerDisabled             =     55,

    





    cudaErrorProfilerNotInitialized       =     56,

    




    cudaErrorProfilerAlreadyStarted       =     57,

    




     cudaErrorProfilerAlreadyStopped       =    58,

    





    cudaErrorAssert                        =    59,
  
    




    cudaErrorTooManyPeers                 =     60,
  
    



    cudaErrorHostMemoryAlreadyRegistered  =     61,
        
    



    cudaErrorHostMemoryNotRegistered      =     62,

    


    cudaErrorOperatingSystem              =     63,

    



    cudaErrorPeerAccessUnsupported        =     64,

    




    cudaErrorLaunchMaxDepthExceeded       =     65,

    





    cudaErrorLaunchFileScopedTex          =     66,

    





    cudaErrorLaunchFileScopedSurf         =     67,

    












    cudaErrorSyncDepthExceeded            =     68,

    









    cudaErrorLaunchPendingCountExceeded   =     69,
    
    


    cudaErrorNotPermitted                 =     70,

    



    cudaErrorNotSupported                 =     71,

    






    cudaErrorHardwareStackError           =     72,

    





    cudaErrorIllegalInstruction           =     73,

    






    cudaErrorMisalignedAddress            =     74,

    








    cudaErrorInvalidAddressSpace          =     75,

    





    cudaErrorInvalidPc                    =     76,

    





    cudaErrorIllegalAddress               =     77,

    



    cudaErrorInvalidPtx                   =     78,

    


    cudaErrorInvalidGraphicsContext       =     79,

    



    cudaErrorNvlinkUncorrectable          =     80,

    


    cudaErrorStartupFailure               =   0x7f,

    





    cudaErrorApiFailureBase               =  10000
};




enum __declspec(__device_builtin__) cudaChannelFormatKind
{
    cudaChannelFormatKindSigned           =   0,      
    cudaChannelFormatKindUnsigned         =   1,      
    cudaChannelFormatKindFloat            =   2,      
    cudaChannelFormatKindNone             =   3       
};




struct __declspec(__device_builtin__) cudaChannelFormatDesc
{
    int                        x; 
    int                        y; 
    int                        z; 
    int                        w; 
    enum cudaChannelFormatKind f; 
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum __declspec(__device_builtin__) cudaMemoryType
{
    cudaMemoryTypeHost   = 1, 
    cudaMemoryTypeDevice = 2  
};




enum __declspec(__device_builtin__) cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,      
    cudaMemcpyHostToDevice        =   1,      
    cudaMemcpyDeviceToHost        =   2,      
    cudaMemcpyDeviceToDevice      =   3,      
    cudaMemcpyDefault             =   4       
};






struct __declspec(__device_builtin__) cudaPitchedPtr
{
    void   *ptr;      
    size_t  pitch;    
    size_t  xsize;    
    size_t  ysize;    
};






struct __declspec(__device_builtin__) cudaExtent
{
    size_t width;     
    size_t height;    
    size_t depth;     
};






struct __declspec(__device_builtin__) cudaPos
{
    size_t x;     
    size_t y;     
    size_t z;     
};




struct __declspec(__device_builtin__) cudaMemcpy3DParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
  
    struct cudaExtent      extent;    
    enum cudaMemcpyKind    kind;      
};




struct __declspec(__device_builtin__) cudaMemcpy3DPeerParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
    int                    srcDevice; 
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
    int                    dstDevice; 
  
    struct cudaExtent      extent;    
};




struct cudaGraphicsResource;




enum __declspec(__device_builtin__) cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,  
    cudaGraphicsRegisterFlagsReadOnly         = 1,   
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  
    cudaGraphicsRegisterFlagsTextureGather    = 8   
};




enum __declspec(__device_builtin__) cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,  
    cudaGraphicsMapFlagsReadOnly     = 1,  
    cudaGraphicsMapFlagsWriteDiscard = 2   
};




enum __declspec(__device_builtin__) cudaGraphicsCubeFace 
{
    cudaGraphicsCubeFacePositiveX = 0x00, 
    cudaGraphicsCubeFaceNegativeX = 0x01, 
    cudaGraphicsCubeFacePositiveY = 0x02, 
    cudaGraphicsCubeFaceNegativeY = 0x03, 
    cudaGraphicsCubeFacePositiveZ = 0x04, 
    cudaGraphicsCubeFaceNegativeZ = 0x05  
};




enum __declspec(__device_builtin__) cudaResourceType
{
    cudaResourceTypeArray          = 0x00, 
    cudaResourceTypeMipmappedArray = 0x01, 
    cudaResourceTypeLinear         = 0x02, 
    cudaResourceTypePitch2D        = 0x03  
};




enum __declspec(__device_builtin__) cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
};




struct __declspec(__device_builtin__) cudaResourceDesc {
	enum cudaResourceType resType;             
	
	union {
		struct {
			cudaArray_t array;                 
		} array;
        struct {
            cudaMipmappedArray_t mipmap;       
        } mipmap;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t sizeInBytes;                
		} linear;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t width;                      
			size_t height;                     
			size_t pitchInBytes;               
		} pitch2D;
	} res;
};




struct __declspec(__device_builtin__) cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;           
    size_t                      width;            
    size_t                      height;           
    size_t                      depth;            
    unsigned int                firstMipmapLevel; 
    unsigned int                lastMipmapLevel;  
    unsigned int                firstLayer;       
    unsigned int                lastLayer;        
};




struct __declspec(__device_builtin__) cudaPointerAttributes
{
    



    enum cudaMemoryType memoryType;

    








    int device;

    



    void *devicePointer;

    



    void *hostPointer;

    


    int isManaged;
};




struct __declspec(__device_builtin__) cudaFuncAttributes
{
   




   size_t sharedSizeBytes;

   



   size_t constSizeBytes;

   


   size_t localSizeBytes;

   




   int maxThreadsPerBlock;

   


   int numRegs;

   




   int ptxVersion;

   




   int binaryVersion;

   



   int cacheModeCA;
};




enum __declspec(__device_builtin__) cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,    
    cudaFuncCachePreferShared = 1,    
    cudaFuncCachePreferL1     = 2,    
    cudaFuncCachePreferEqual  = 3     
};





enum __declspec(__device_builtin__) cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum __declspec(__device_builtin__) cudaComputeMode
{
    cudaComputeModeDefault          = 0,  
    cudaComputeModeExclusive        = 1,  
    cudaComputeModeProhibited       = 2,  
    cudaComputeModeExclusiveProcess = 3   
};




enum __declspec(__device_builtin__) cudaLimit
{
    cudaLimitStackSize                    = 0x00, 
    cudaLimitPrintfFifoSize               = 0x01, 
    cudaLimitMallocHeapSize               = 0x02, 
    cudaLimitDevRuntimeSyncDepth          = 0x03, 
    cudaLimitDevRuntimePendingLaunchCount = 0x04  
};




enum __declspec(__device_builtin__) cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly          = 1, 
    cudaMemAdviseUnsetReadMostly        = 2, 
    cudaMemAdviseSetPreferredLocation   = 3, 
    cudaMemAdviseUnsetPreferredLocation = 4, 
    cudaMemAdviseSetAccessedBy          = 5, 
    cudaMemAdviseUnsetAccessedBy        = 6  
};




enum __declspec(__device_builtin__) cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly           = 1, 
    cudaMemRangeAttributePreferredLocation    = 2, 
    cudaMemRangeAttributeAccessedBy           = 3, 
    cudaMemRangeAttributeLastPrefetchLocation = 4  
};




enum __declspec(__device_builtin__) cudaOutputMode
{
    cudaKeyValuePair    = 0x00, 
    cudaCSV             = 0x01  
};




enum __declspec(__device_builtin__) cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41,     
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75,  
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78, 
    cudaDevAttrGlobalL1CacheSupported         = 79, 
    cudaDevAttrLocalL1CacheSupported          = 80, 
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81, 
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, 
    cudaDevAttrManagedMemory                  = 83, 
    cudaDevAttrIsMultiGpuBoard                = 84, 
    cudaDevAttrMultiGpuBoardGroupID           = 85, 
    cudaDevAttrHostNativeAtomicSupported      = 86, 
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87, 
    cudaDevAttrPageableMemoryAccess           = 88, 
    cudaDevAttrConcurrentManagedAccess        = 89, 
    cudaDevAttrComputePreemptionSupported     = 90, 
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91 
};





enum __declspec(__device_builtin__) cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank              = 1, 
    cudaDevP2PAttrAccessSupported              = 2, 
    cudaDevP2PAttrNativeAtomicSupported        = 3  
};



struct __declspec(__device_builtin__) cudaDeviceProp
{
    char   name[256];                  
    size_t totalGlobalMem;             
    size_t sharedMemPerBlock;          
    int    regsPerBlock;               
    int    warpSize;                   
    size_t memPitch;                   
    int    maxThreadsPerBlock;         
    int    maxThreadsDim[3];           
    int    maxGridSize[3];             
    int    clockRate;                  
    size_t totalConstMem;              
    int    major;                      
    int    minor;                      
    size_t textureAlignment;           
    size_t texturePitchAlignment;      
    int    deviceOverlap;              
    int    multiProcessorCount;        
    int    kernelExecTimeoutEnabled;   
    int    integrated;                 
    int    canMapHostMemory;           
    int    computeMode;                
    int    maxTexture1D;               
    int    maxTexture1DMipmap;         
    int    maxTexture1DLinear;         
    int    maxTexture2D[2];            
    int    maxTexture2DMipmap[2];      
    int    maxTexture2DLinear[3];      
    int    maxTexture2DGather[2];      
    int    maxTexture3D[3];            
    int    maxTexture3DAlt[3];         
    int    maxTextureCubemap;          
    int    maxTexture1DLayered[2];     
    int    maxTexture2DLayered[3];     
    int    maxTextureCubemapLayered[2];
    int    maxSurface1D;               
    int    maxSurface2D[2];            
    int    maxSurface3D[3];            
    int    maxSurface1DLayered[2];     
    int    maxSurface2DLayered[3];     
    int    maxSurfaceCubemap;          
    int    maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;           
    int    concurrentKernels;          
    int    ECCEnabled;                 
    int    pciBusID;                   
    int    pciDeviceID;                
    int    pciDomainID;                
    int    tccDriver;                  
    int    asyncEngineCount;           
    int    unifiedAddressing;          
    int    memoryClockRate;            
    int    memoryBusWidth;             
    int    l2CacheSize;                
    int    maxThreadsPerMultiProcessor;
    int    streamPrioritiesSupported;  
    int    globalL1CacheSupported;     
    int    localL1CacheSupported;      
    size_t sharedMemPerMultiprocessor; 
    int    regsPerMultiprocessor;      
    int    managedMemory;              
    int    isMultiGpuBoard;            
    int    multiGpuBoardGroupID;       
    int    hostNativeAtomicSupported;  
    int    singleToDoublePrecisionPerfRatio; 
    int    pageableMemoryAccess;       
    int    concurrentManagedAccess;    
};















































































typedef __declspec(__device_builtin__) struct __declspec(__device_builtin__) cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef __declspec(__device_builtin__) struct __declspec(__device_builtin__) cudaIpcMemHandle_st 
{
    char reserved[64];
}cudaIpcMemHandle_t;










typedef __declspec(__device_builtin__) enum cudaError cudaError_t;




typedef __declspec(__device_builtin__) struct CUstream_st *cudaStream_t;




typedef __declspec(__device_builtin__) struct CUevent_st *cudaEvent_t;




typedef __declspec(__device_builtin__) struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef __declspec(__device_builtin__) struct CUuuid_st cudaUUID_t;




typedef __declspec(__device_builtin__) enum cudaOutputMode cudaOutputMode_t;


 

#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
























enum __declspec(__device_builtin__) cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,    
    cudaBoundaryModeClamp = 1,    
    cudaBoundaryModeTrap  = 2     
};




enum __declspec(__device_builtin__)  cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,     
    cudaFormatModeAuto = 1        
};




struct __declspec(__device_builtin__) surfaceReference
{
    


    struct cudaChannelFormatDesc channelDesc;
};




typedef __declspec(__device_builtin__) unsigned long long cudaSurfaceObject_t;


 

#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























enum __declspec(__device_builtin__) cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,    
    cudaAddressModeClamp  = 1,    
    cudaAddressModeMirror = 2,    
    cudaAddressModeBorder = 3     
};




enum __declspec(__device_builtin__) cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,     
    cudaFilterModeLinear = 1      
};




enum __declspec(__device_builtin__) cudaTextureReadMode
{
    cudaReadModeElementType     = 0,  
    cudaReadModeNormalizedFloat = 1   
};




struct __declspec(__device_builtin__) textureReference
{
    


    int                          normalized;
    


    enum cudaTextureFilterMode   filterMode;
    


    enum cudaTextureAddressMode  addressMode[3];
    


    struct cudaChannelFormatDesc channelDesc;
    


    int                          sRGB;
    


    unsigned int                 maxAnisotropy;
    


    enum cudaTextureFilterMode   mipmapFilterMode;
    


    float                        mipmapLevelBias;
    


    float                        minMipmapLevelClamp;
    


    float                        maxMipmapLevelClamp;
    int                          __cudaReserved[15];
};




struct __declspec(__device_builtin__) cudaTextureDesc
{
    


    enum cudaTextureAddressMode addressMode[3];
    


    enum cudaTextureFilterMode  filterMode;
    


    enum cudaTextureReadMode    readMode;
    


    int                         sRGB;
    


    float                       borderColor[4];
    


    int                         normalizedCoords;
    


    unsigned int                maxAnisotropy;
    


    enum cudaTextureFilterMode  mipmapFilterMode;
    


    float                       mipmapLevelBias;
    


    float                       minMipmapLevelClamp;
    


    float                       maxMipmapLevelClamp;
};




typedef __declspec(__device_builtin__) unsigned long long cudaTextureObject_t;


 

#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"






















#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct __declspec(__device_builtin__) char1
{
    signed char x;
};

struct __declspec(__device_builtin__) uchar1
{
    unsigned char x;
};


struct __declspec(__device_builtin__) __declspec(align(2)) char2
{
    signed char x, y;
};

struct __declspec(__device_builtin__) __declspec(align(2)) uchar2
{
    unsigned char x, y;
};

struct __declspec(__device_builtin__) char3
{
    signed char x, y, z;
};

struct __declspec(__device_builtin__) uchar3
{
    unsigned char x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(4)) char4
{
    signed char x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(4)) uchar4
{
    unsigned char x, y, z, w;
};

struct __declspec(__device_builtin__) short1
{
    short x;
};

struct __declspec(__device_builtin__) ushort1
{
    unsigned short x;
};

struct __declspec(__device_builtin__) __declspec(align(4)) short2
{
    short x, y;
};

struct __declspec(__device_builtin__) __declspec(align(4)) ushort2
{
    unsigned short x, y;
};

struct __declspec(__device_builtin__) short3
{
    short x, y, z;
};

struct __declspec(__device_builtin__) ushort3
{
    unsigned short x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(8)) short4 { short x; short y; short z; short w; };
struct __declspec(__device_builtin__) __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct __declspec(__device_builtin__) int1
{
    int x;
};

struct __declspec(__device_builtin__) uint1
{
    unsigned int x;
};

struct __declspec(__device_builtin__) __declspec(align(8)) int2 { int x; int y; };
struct __declspec(__device_builtin__) __declspec(align(8)) uint2 { unsigned int x; unsigned int y; };

struct __declspec(__device_builtin__) int3
{
    int x, y, z;
};

struct __declspec(__device_builtin__) uint3
{
    unsigned int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) int4
{
    int x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) uint4
{
    unsigned int x, y, z, w;
};

struct __declspec(__device_builtin__) long1
{
    long int x;
};

struct __declspec(__device_builtin__) ulong1
{
    unsigned long x;
};


struct __declspec(__device_builtin__) __declspec(align(8)) long2 { long int x; long int y; };
struct __declspec(__device_builtin__) __declspec(align(8)) ulong2 { unsigned long int x; unsigned long int y; };












#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct __declspec(__device_builtin__) long3
{
    long int x, y, z;
};

struct __declspec(__device_builtin__) ulong3
{
    unsigned long int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) long4
{
    long int x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulong4
{
    unsigned long int x, y, z, w;
};

struct __declspec(__device_builtin__) float1
{
    float x;
};















#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct __declspec(__device_builtin__) __declspec(align(8)) float2 { float x; float y; };

#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"


struct __declspec(__device_builtin__) float3
{
    float x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) float4
{
    float x, y, z, w;
};

struct __declspec(__device_builtin__) longlong1
{
    long long int x;
};

struct __declspec(__device_builtin__) ulonglong1
{
    unsigned long long int x;
};

struct __declspec(__device_builtin__) __declspec(align(16)) longlong2
{
    long long int x, y;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulonglong2
{
    unsigned long long int x, y;
};

struct __declspec(__device_builtin__) longlong3
{
    long long int x, y, z;
};

struct __declspec(__device_builtin__) ulonglong3
{
    unsigned long long int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) longlong4
{
    long long int x, y, z ,w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct __declspec(__device_builtin__) double1
{
    double x;
};

struct __declspec(__device_builtin__) __declspec(align(16)) double2
{
    double x, y;
};

struct __declspec(__device_builtin__) double3
{
    double x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) double4
{
    double x, y, z, w;
};





#line 355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







typedef __declspec(__device_builtin__) struct char1 char1;
typedef __declspec(__device_builtin__) struct uchar1 uchar1;
typedef __declspec(__device_builtin__) struct char2 char2;
typedef __declspec(__device_builtin__) struct uchar2 uchar2;
typedef __declspec(__device_builtin__) struct char3 char3;
typedef __declspec(__device_builtin__) struct uchar3 uchar3;
typedef __declspec(__device_builtin__) struct char4 char4;
typedef __declspec(__device_builtin__) struct uchar4 uchar4;
typedef __declspec(__device_builtin__) struct short1 short1;
typedef __declspec(__device_builtin__) struct ushort1 ushort1;
typedef __declspec(__device_builtin__) struct short2 short2;
typedef __declspec(__device_builtin__) struct ushort2 ushort2;
typedef __declspec(__device_builtin__) struct short3 short3;
typedef __declspec(__device_builtin__) struct ushort3 ushort3;
typedef __declspec(__device_builtin__) struct short4 short4;
typedef __declspec(__device_builtin__) struct ushort4 ushort4;
typedef __declspec(__device_builtin__) struct int1 int1;
typedef __declspec(__device_builtin__) struct uint1 uint1;
typedef __declspec(__device_builtin__) struct int2 int2;
typedef __declspec(__device_builtin__) struct uint2 uint2;
typedef __declspec(__device_builtin__) struct int3 int3;
typedef __declspec(__device_builtin__) struct uint3 uint3;
typedef __declspec(__device_builtin__) struct int4 int4;
typedef __declspec(__device_builtin__) struct uint4 uint4;
typedef __declspec(__device_builtin__) struct long1 long1;
typedef __declspec(__device_builtin__) struct ulong1 ulong1;
typedef __declspec(__device_builtin__) struct long2 long2;
typedef __declspec(__device_builtin__) struct ulong2 ulong2;
typedef __declspec(__device_builtin__) struct long3 long3;
typedef __declspec(__device_builtin__) struct ulong3 ulong3;
typedef __declspec(__device_builtin__) struct long4 long4;
typedef __declspec(__device_builtin__) struct ulong4 ulong4;
typedef __declspec(__device_builtin__) struct float1 float1;
typedef __declspec(__device_builtin__) struct float2 float2;
typedef __declspec(__device_builtin__) struct float3 float3;
typedef __declspec(__device_builtin__) struct float4 float4;
typedef __declspec(__device_builtin__) struct longlong1 longlong1;
typedef __declspec(__device_builtin__) struct ulonglong1 ulonglong1;
typedef __declspec(__device_builtin__) struct longlong2 longlong2;
typedef __declspec(__device_builtin__) struct ulonglong2 ulonglong2;
typedef __declspec(__device_builtin__) struct longlong3 longlong3;
typedef __declspec(__device_builtin__) struct ulonglong3 ulonglong3;
typedef __declspec(__device_builtin__) struct longlong4 longlong4;
typedef __declspec(__device_builtin__) struct ulonglong4 ulonglong4;
typedef __declspec(__device_builtin__) struct double1 double1;
typedef __declspec(__device_builtin__) struct double2 double2;
typedef __declspec(__device_builtin__) struct double3 double3;
typedef __declspec(__device_builtin__) struct double4 double4;







struct __declspec(__device_builtin__) dim3
{
    unsigned int x, y, z;

    __declspec(__host__) __declspec(__device__) dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    __declspec(__host__) __declspec(__device__) dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    __declspec(__host__) __declspec(__device__) operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
};

typedef __declspec(__device_builtin__) struct dim3 dim3;



#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 87 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"





















































typedef enum cudaDataType_t
{
	CUDA_R_16F= 2, 
	CUDA_C_16F= 6, 
	CUDA_R_32F= 0, 
	CUDA_C_32F= 4, 
	CUDA_R_64F= 1, 
	CUDA_C_64F= 5, 
	CUDA_R_8I= 3,  
	CUDA_C_8I= 7,   
	CUDA_R_8U= 8,  
	CUDA_C_8U= 9,  
	CUDA_R_32I= 10,  
	CUDA_C_32I= 11,  
	CUDA_R_32U= 12,  
	CUDA_C_32U= 13   
} cudaDataType; 


typedef enum libraryPropertyType_t
{
	MAJOR_VERSION,
	MINOR_VERSION,
	PATCH_LEVEL
} libraryPropertyType;

#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
#line 88 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"




































































































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"































































































#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"






























































































































#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"

#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"

#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"





#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
    
    
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"









































#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"













#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"

#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"






#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"



#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"


extern "C" {
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceReset(void);
















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceSynchronize(void);










































































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetLimit(enum cudaLimit limit, size_t value);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);






























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);


































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority);









































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);









































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config);






















extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetByPCIBusId(int *device, const char *pciBusId);


























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);









































extern __declspec(__host__) cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);


































extern __declspec(__host__) cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);





































extern __declspec(__host__) cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);

















































extern __declspec(__host__) cudaError_t __stdcall cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);





























extern __declspec(__host__) cudaError_t __stdcall cudaIpcCloseMemHandle(void *devPtr);

 





































extern __declspec(__host__) cudaError_t __stdcall cudaThreadExit(void);























extern __declspec(__host__) cudaError_t __stdcall cudaThreadSynchronize(void);














































extern __declspec(__host__) cudaError_t __stdcall cudaThreadSetLimit(enum cudaLimit limit, size_t value);






























extern __declspec(__host__) cudaError_t __stdcall cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);


































extern __declspec(__host__) cudaError_t __stdcall cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);













































extern __declspec(__host__) cudaError_t __stdcall cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);

 



















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetLastError(void);








































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaPeekAtLastError(void);














extern __declspec(__host__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorName(cudaError_t error);














extern __declspec(__host__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorString(cudaError_t error);
 




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceCount(int *count);





















































































































































































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);











































































































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);


































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice);


















extern __declspec(__host__) cudaError_t __stdcall cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);

































extern __declspec(__host__) cudaError_t __stdcall cudaSetDevice(int device);
















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDevice(int *device);




























extern __declspec(__host__) cudaError_t __stdcall cudaSetValidDevices(int *device_arr, int len);





























































extern __declspec(__host__) cudaError_t __stdcall cudaSetDeviceFlags( unsigned int flags );








































extern __declspec(__host__) cudaError_t __stdcall cudaGetDeviceFlags( unsigned int *flags );
 



































extern __declspec(__host__) cudaError_t __stdcall cudaStreamCreate(cudaStream_t *pStream);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);










































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority);























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int *priority);




















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags);




















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream);































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);





#line 2044 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"







typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);
























































extern __declspec(__host__) cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream,
        cudaStreamCallback_t callback, void *userData, unsigned int flags);


















extern __declspec(__host__) cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream);




















extern __declspec(__host__) cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream);






































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length = 0, unsigned int flags = 0x04);

 

































extern __declspec(__host__) cudaError_t __stdcall cudaEventCreate(cudaEvent_t *event);

































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);






























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);































extern __declspec(__host__) cudaError_t __stdcall cudaEventQuery(cudaEvent_t event);































extern __declspec(__host__) cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event);
























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event);








































extern __declspec(__host__) cudaError_t __stdcall cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);

 
























































extern __declspec(__host__) cudaError_t __stdcall cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);

#line 2513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"















































extern __declspec(__host__) cudaError_t __stdcall cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig);





















































extern __declspec(__host__) cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config);

































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);






















extern __declspec(__host__) cudaError_t __stdcall cudaSetDoubleForDevice(double *d);






















extern __declspec(__host__) cudaError_t __stdcall cudaSetDoubleForHost(double *d);

 





















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize);











































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags);

 
#line 2798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
#line 2799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"














































extern __declspec(__host__) cudaError_t __stdcall cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0);




























extern __declspec(__host__) cudaError_t __stdcall cudaSetupArgument(const void *arg, size_t size, size_t offset);





































extern __declspec(__host__) cudaError_t __stdcall cudaLaunch(const void *func);


 


















































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMallocManaged(void **devPtr, size_t size, unsigned int flags = 0x01);

























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMalloc(void **devPtr, size_t size);




























extern __declspec(__host__) cudaError_t __stdcall cudaMallocHost(void **ptr, size_t size);






































extern __declspec(__host__) cudaError_t __stdcall cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);









































extern __declspec(__host__) cudaError_t __stdcall cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);


























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFree(void *devPtr);



















extern __declspec(__host__) cudaError_t __stdcall cudaFreeHost(void *ptr);





















extern __declspec(__host__) cudaError_t __stdcall cudaFreeArray(cudaArray_t array);





















extern __declspec(__host__) cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);


























































extern __declspec(__host__) cudaError_t __stdcall cudaHostAlloc(void **pHost, size_t size, unsigned int flags);












































































extern __declspec(__host__) cudaError_t __stdcall cudaHostRegister(void *ptr, size_t size, unsigned int flags);


















extern __declspec(__host__) cudaError_t __stdcall cudaHostUnregister(void *ptr);









































extern __declspec(__host__) cudaError_t __stdcall cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);


















extern __declspec(__host__) cudaError_t __stdcall cudaHostGetFlags(unsigned int *pFlags, void *pHost);


































extern __declspec(__host__) cudaError_t __stdcall cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);






































































































































extern __declspec(__host__) cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);
























































































































extern __declspec(__host__) cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags = 0);

























extern __declspec(__host__) cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level);



































































































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3D(const struct cudaMemcpy3DParms *p);



























extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);














































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);






















extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);


















extern __declspec(__host__) cudaError_t __stdcall cudaMemGetInfo(size_t *free, size_t *total);




















extern __declspec(__host__) cudaError_t __stdcall cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array);





































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);





































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);




































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);





































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);












































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);













































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);













































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);










































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);





































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);





































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);


















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);













































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);












































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);



























































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);






















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);





















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);













































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);













































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);

























extern __declspec(__host__) cudaError_t __stdcall cudaMemset(void *devPtr, int value, size_t count);





























extern __declspec(__host__) cudaError_t __stdcall cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);










































extern __declspec(__host__) cudaError_t __stdcall cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);




































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);

















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);






















extern __declspec(__host__) cudaError_t __stdcall cudaGetSymbolAddress(void **devPtr, const void *symbol);





















extern __declspec(__host__) cudaError_t __stdcall cudaGetSymbolSize(size_t *size, const void *symbol);


































































extern __declspec(__host__) cudaError_t __stdcall cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream = 0);





















































































extern __declspec(__host__) cudaError_t __stdcall cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device);























































extern __declspec(__host__) cudaError_t __stdcall cudaMemRangeGetAttribute(void *data, size_t dataSize, enum cudaMemRangeAttribute attribute, const void *devPtr, size_t count);



































extern __declspec(__host__) cudaError_t __stdcall cudaMemRangeGetAttributes(void **data, size_t *dataSizes, enum cudaMemRangeAttribute *attributes, size_t numAttributes, const void *devPtr, size_t count);

 






















































































































































extern __declspec(__host__) cudaError_t __stdcall cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);

 



































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);






































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);


















extern __declspec(__host__) cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice);

 

























































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);



































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);




























extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);

































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);
























extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);

 





































extern __declspec(__host__) cudaError_t __stdcall cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array);


































extern __declspec(__host__) struct cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);














































extern __declspec(__host__) cudaError_t __stdcall cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size = 0xffffffff);


















































extern __declspec(__host__) cudaError_t __stdcall cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);



























extern __declspec(__host__) cudaError_t __stdcall cudaBindTextureToArray(const struct textureReference *texref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);



























extern __declspec(__host__) cudaError_t __stdcall cudaBindTextureToMipmappedArray(const struct textureReference *texref, cudaMipmappedArray_const_t mipmappedArray, const struct cudaChannelFormatDesc *desc);




















extern __declspec(__host__) cudaError_t __stdcall cudaUnbindTexture(const struct textureReference *texref);
























extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);
























extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureReference(const struct textureReference **texref, const void *symbol);

 





































extern __declspec(__host__) cudaError_t __stdcall cudaBindSurfaceToArray(const struct surfaceReference *surfref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);


















extern __declspec(__host__) cudaError_t __stdcall cudaGetSurfaceReference(const struct surfaceReference **surfref, const void *symbol);

 































































































































































































































extern __declspec(__host__) cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc);














extern __declspec(__host__) cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject);















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);
















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);

 




































extern __declspec(__host__) cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc);














extern __declspec(__host__) cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);














extern __declspec(__host__) cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);

 
























extern __declspec(__host__) cudaError_t __stdcall cudaDriverGetVersion(int *driverVersion);
















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaRuntimeGetVersion(int *runtimeVersion);

 


extern __declspec(__host__) cudaError_t __stdcall cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);





















































































































































































































#line 6953 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"








#line 6962 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"


}

#line 6967 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"



#line 6971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"

#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"










































template<class T> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}



template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned long>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long1>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong1>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long2>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong2>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long4>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong4>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"


 

#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"

























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 6971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"

#line 92 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 55 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"























static __inline __declspec(__host__) struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
{
  struct cudaPitchedPtr s;

  s.ptr   = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
















static __inline __declspec(__host__) struct cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
















static __inline __declspec(__host__) struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
{
  struct cudaExtent e;

  e.width  = w;
  e.height = h;
  e.depth  = d;

  return e;
}

 

#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"



#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"

#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"







































































































#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"



#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"

#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"







static __inline __declspec(__host__) __declspec(__device__) char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short3 make_short3(short x,short y, short z)
{ 
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}



#line 318 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"

#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"

#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

















#line 115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"










#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {



__declspec(dllimport) extern int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);



__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


__declspec(dllimport) errno_t __cdecl _set_doserrno(  unsigned long _Value);
__declspec(dllimport) errno_t __cdecl _get_doserrno(  unsigned long * _Value);










































    
    
    
    
    
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"






    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"



} __pragma(pack(pop))
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"



__pragma(pack(push, 8)) extern "C" {



 
__declspec(dllimport) void const* __cdecl memchr(
      void const* _Buf,
                                 int         _Val,
                                 size_t      _MaxCount
    );

 
int __cdecl memcmp(
      void const* _Buf1,
      void const* _Buf2,
                         size_t      _Size
    );


 

#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void* __cdecl memcpy(
      void* _Dst,
            void const* _Src,
                               size_t      _Size
    );


__declspec(dllimport) void* __cdecl memmove(
      void*       _Dst,
            void const* _Src,
                                   size_t      _Size
    );

 

#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void* __cdecl memset(
      void*  _Dst,
                               int    _Val,
                               size_t _Size
    );

 
__declspec(dllimport) char const* __cdecl strchr(
      char const* _Str,
        int         _Val
    );

 
__declspec(dllimport) char const* __cdecl strrchr(
      char const* _Str,
        int         _Ch
    );

   
__declspec(dllimport) char const* __cdecl strstr(
      char const* _Str,
      char const* _SubStr
    );

 

__declspec(dllimport) wchar_t const* __cdecl wcschr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

 
__declspec(dllimport) wchar_t const* __cdecl wcsrchr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

   

__declspec(dllimport) wchar_t const* __cdecl wcsstr(
      wchar_t const* _Str,
      wchar_t const* _SubStr
    );



} __pragma(pack(pop))

#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"

__pragma(pack(push, 8)) extern "C" {


    
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"














     
    
    static __inline errno_t __cdecl memcpy_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

            
            return 22;
        }

        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }

    
    static __inline errno_t __cdecl memmove_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }

#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"



} __pragma(pack(pop))
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"




__pragma(pack(push, 8)) extern "C" {



 
__declspec(dllimport) int __cdecl _memicmp(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size
    );

 
__declspec(dllimport) int __cdecl _memicmp_l(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size,
                         _locale_t   _Locale
    );





    












#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"

    












#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"

#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"




    
    __declspec(dllimport) void* __cdecl memccpy(
          void*       _Dst,
            void const* _Src,
                                   int         _Val,
                                   size_t      _Size
        );

      
    __declspec(dllimport) int __cdecl memicmp(
          void const* _Buf1,
          void const* _Buf2,
                                 size_t      _Size
        );
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"




    extern "C++"  
    inline void* __cdecl memchr(
          void*  _Pv,
                              int    _C,
                              size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"



} __pragma(pack(pop))

#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"








#pragma once






__pragma(pack(push, 8)) extern "C" {










    
    __declspec(dllimport) errno_t __cdecl wcscat_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl wcscpy_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );
    
    
    __declspec(dllimport) errno_t __cdecl wcsncat_s(
          wchar_t*       _Destination,
                                     rsize_t        _SizeInWords,
               wchar_t const* _Source,
                                     rsize_t        _MaxCount
        );
    
    
    __declspec(dllimport) errno_t __cdecl wcsncpy_s(
          wchar_t*       _Destination,
                                  rsize_t        _SizeInWords,
            wchar_t const* _Source,
                                  rsize_t        _MaxCount
        );
    
     
    __declspec(dllimport) wchar_t* __cdecl wcstok_s(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
            wchar_t**      _Context
        );

#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"











#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wcsdup(
      wchar_t const* _String
    );



#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"



     __declspec(dllimport) wchar_t* __cdecl wcscat( wchar_t *_Destination,  wchar_t const* _Source);
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) int __cdecl wcscmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl wcscpy( wchar_t *_Destination,  wchar_t const* _Source);
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) size_t __cdecl wcscspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
__declspec(dllimport) size_t __cdecl wcslen(
      wchar_t const* _String
    );

 

#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsnlen(
      wchar_t const* _Source,
                            size_t         _MaxCount
    );



     
    
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
    
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
    static __inline size_t __cdecl wcsnlen_s(
          wchar_t const* _Source,
                                size_t         _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }

#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(  wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl wcsncat(  wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) int __cdecl wcsncmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl wcsncpy(    wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) wchar_t const* __cdecl wcspbrk(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
__declspec(dllimport) size_t __cdecl wcsspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

  
__declspec(dllimport) wchar_t* __cdecl wcstok(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
        wchar_t**      _Context
    );



    

#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
        



    #line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

    #pragma warning(push)
    #pragma warning(disable: 4141 4996) 

      
    static __inline wchar_t* __cdecl _wcstok(
          wchar_t*       const _String,
                 wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }

    

#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

    
        extern "C++"   __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK.")) 
        inline wchar_t* __cdecl wcstok(
              wchar_t*       _String,
                     wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }
    #line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

    #pragma warning(pop)

#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"



 
  
__declspec(dllimport) wchar_t* __cdecl _wcserror(
      int _ErrorNumber
    );


__declspec(dllimport) errno_t __cdecl _wcserror_s(
      wchar_t* _Buffer,
                                  size_t   _SizeInWords,
                                  int      _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
#line 287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 
 
  
__declspec(dllimport) wchar_t* __cdecl __wcserror(
      wchar_t const* _String
    );

 __declspec(dllimport) errno_t __cdecl __wcserror_s(
      wchar_t*       _Buffer,
                                  size_t         _SizeInWords,
                                wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

  __declspec(dllimport) int __cdecl _wcsicmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

  __declspec(dllimport) int __cdecl _wcsicmp_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

  __declspec(dllimport) int __cdecl _wcsnicmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

  __declspec(dllimport) int __cdecl _wcsnicmp_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 __declspec(dllimport) errno_t __cdecl _wcsnset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value,
                                 size_t   _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(  wchar_t (&_Destination)[_Size],   wchar_t _Value,   size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl _wcsnset(  wchar_t *_String,   wchar_t _Value,   size_t _MaxCount);
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

__declspec(dllimport) wchar_t* __cdecl _wcsrev(
      wchar_t* _String
    );

 __declspec(dllimport) errno_t __cdecl _wcsset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(  wchar_t (&_String)[_Size],   wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl _wcsset(  wchar_t *_String,   wchar_t _Value);
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) errno_t __cdecl _wcslwr_s(
      wchar_t* _String,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(  wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl _wcslwr( wchar_t *_String);
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(
      wchar_t*  _String,
                                 size_t    _SizeInWords,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl _wcslwr_l(  wchar_t *_String,   _locale_t _Locale);
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcsupr_s(
      wchar_t* _String,
                          size_t   _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(  wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl _wcsupr( wchar_t *_String);
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(
      wchar_t*  _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) wchar_t* __cdecl _wcsupr_l(  wchar_t *_String,   _locale_t _Locale);
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

 

__declspec(dllimport) size_t __cdecl wcsxfrm(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount
    );

 

__declspec(dllimport) size_t __cdecl _wcsxfrm_l(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount,
                                       _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl wcscoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
__declspec(dllimport) int __cdecl _wcscoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsicoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
__declspec(dllimport) int __cdecl _wcsicoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsncoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
__declspec(dllimport) int __cdecl _wcsncoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsnicoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
__declspec(dllimport) int __cdecl _wcsnicoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );









extern "C++" {

     
    
    inline wchar_t* __cdecl wcschr(  wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }

     
    inline wchar_t* __cdecl wcspbrk(  wchar_t* _String,   wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }

     
    inline wchar_t* __cdecl wcsrchr(  wchar_t* _String,   wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }

       
    
    inline wchar_t* __cdecl wcsstr(  wchar_t* _String,   wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"









    


#line 571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

      
    __declspec(dllimport) wchar_t* __cdecl wcsdup(
          wchar_t const* _String
        );

    

#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"

    
    

      
    __declspec(dllimport) int __cdecl wcsicmp(
          wchar_t const* _String1,
          wchar_t const* _String2
        );
    
      
    __declspec(dllimport) int __cdecl wcsnicmp(
          wchar_t const* _String1,
          wchar_t const* _String2,
                                size_t         _MaxCount
        );
    
    
     
    __declspec(dllimport) wchar_t* __cdecl wcsnset(
          wchar_t* _String,
                                  wchar_t  _Value,
                                  size_t   _MaxCount
        );
    
    
     
    __declspec(dllimport) wchar_t* __cdecl wcsrev(
          wchar_t* _String
        );
    
    
     
    __declspec(dllimport) wchar_t* __cdecl wcsset(
          wchar_t* _String,
               wchar_t  _Value
        );
    
    
     
    __declspec(dllimport) wchar_t* __cdecl wcslwr(
          wchar_t* _String
        );
    
    
     
    __declspec(dllimport) wchar_t* __cdecl wcsupr(
          wchar_t* _String
        );
    
      
    __declspec(dllimport) int __cdecl wcsicoll(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

#line 637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"



} __pragma(pack(pop))

#line 643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"




__pragma(pack(push, 8)) extern "C" {







     
    __declspec(dllimport) errno_t __cdecl strcpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
                                char const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl strcat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
                                   char const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl strerror_s(
          char*  _Buffer,
                                  size_t _SizeInBytes,
                                  int    _ErrorNumber);

    
    __declspec(dllimport) errno_t __cdecl strncat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
               char const* _Source,
                                     rsize_t     _MaxCount
        );

    
    __declspec(dllimport) errno_t __cdecl strncpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
            char const* _Source,
                                  rsize_t     _MaxCount
        );

     
    __declspec(dllimport) char*  __cdecl strtok_s(
                          char*       _String,
                                 char const* _Delimiter,
            char**      _Context
        );

#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

__declspec(dllimport) void* __cdecl _memccpy(
      void*       _Dst,
                                   void const* _Src,
                                   int         _Val,
                                   size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size],   char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"



      char* __cdecl strcat( char *_Destination,  char const* _Source);
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
int __cdecl strcmp(
      char const* _Str1,
      char const* _Str2
    );

 
__declspec(dllimport) int __cdecl _strcmpi(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl strcoll(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _strcoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

char* __cdecl strcpy(
      char*       _Dest,
                                            char const* _Source
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Destination)[_Size],   char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

  char* __cdecl strcpy( char *_Destination,  char const* _Source);
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
__declspec(dllimport) size_t __cdecl strcspn(
      char const* _Str,
      char const* _Control
    );




#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
__declspec(dllimport) __declspec(allocator) char* __cdecl _strdup(
      char const* _Source
    );



#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
 
  
__declspec(dllimport) char*  __cdecl _strerror(
      char const* _ErrorMessage
    );


__declspec(dllimport) errno_t __cdecl _strerror_s(
      char*       _Buffer,
                              size_t      _SizeInBytes,
                        char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],   char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
  
__declspec(dllimport) char* __cdecl strerror(
      int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
__declspec(dllimport) int __cdecl _stricmp(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _stricoll(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _stricoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _stricmp_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
size_t __cdecl strlen(
      char const* _Str
    );


__declspec(dllimport) errno_t __cdecl _strlwr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(  char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 __declspec(dllimport) char* __cdecl _strlwr( char *_String);
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"


__declspec(dllimport) errno_t __cdecl _strlwr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 __declspec(dllimport) char* __cdecl _strlwr_l(  char *_String,   _locale_t _Locale);
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

__declspec(dllimport) char* __cdecl strncat(
      char*       _Dest,
        char const* _Source,
                           size_t      _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(  char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }
#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 __declspec(dllimport) char* __cdecl strncat(  char *_Destination,   char const* _Source,   size_t _Count);
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
__declspec(dllimport) int __cdecl strncmp(
      char const* _Str1,
      char const* _Str2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicmp(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicmp_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _strnicoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _strncoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strncoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

__declspec(dllimport) size_t __cdecl __strncnt(
      char const* _String,
                         size_t      _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 __declspec(dllimport) char* __cdecl strncpy(    char *_Destination,   char const* _Source,   size_t _Count);
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 

#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strnlen(
      char const* _String,
                            size_t      _MaxCount
    );



     
    
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
    
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
    static __inline size_t __cdecl strnlen_s(
          char const* _String,
                                size_t      _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }

#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

__declspec(dllimport) char* __cdecl _strnset(
      char*  _Dest,
                           int    _Val,
                           size_t _Count
    );


__declspec(dllimport) errno_t __cdecl _strnset_s(
      char*  _String,
                                 size_t _SizeInBytes,
                                 int    _Value,
                                 size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(  char (&_Destination)[_Size],   int _Value,   size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 __declspec(dllimport) char* __cdecl _strnset(  char *_Destination,   int _Value,   size_t _Count);
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 
__declspec(dllimport) char const* __cdecl strpbrk(
      char const* _Str,
      char const* _Control
    );

__declspec(dllimport) char* __cdecl _strrev(
      char* _Str
    );


__declspec(dllimport) errno_t __cdecl _strset_s(
      char*  _Destination,
                                     size_t _DestinationSize,
                                     int    _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(  char (&_Destination)[_Size],   int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }
#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

  char* __cdecl _strset( char *_Destination,  int _Value);
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

char* __cdecl _strset(
      char* _Dest,
           int   _Value
    );

 
__declspec(dllimport) size_t __cdecl strspn(
      char const* _Str,
      char const* _Control
    );

  
__declspec(dllimport) char* __cdecl strtok(
      char*       _String,
             char const* _Delimiter
    );


__declspec(dllimport) errno_t __cdecl _strupr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(  char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 __declspec(dllimport) char* __cdecl _strupr( char *_String);
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"


__declspec(dllimport) errno_t __cdecl _strupr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 __declspec(dllimport) char* __cdecl _strupr_l(  char *_String,   _locale_t _Locale);
#line 493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

 

__declspec(dllimport) size_t __cdecl strxfrm(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount
    );

 

__declspec(dllimport) size_t __cdecl _strxfrm_l(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount,
                                       _locale_t   _Locale
    );




extern "C++"
{
     
    inline char* __cdecl strchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }

     
    inline char* __cdecl strpbrk(  char* const _String,   char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }

     
    inline char* __cdecl strrchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }

       
    inline char* __cdecl strstr(  char* const _String,   char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"





    


#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

      
    __declspec(dllimport) char* __cdecl strdup(
          char const* _String
        );

    

#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"

    
      
    __declspec(dllimport) int __cdecl strcmpi(
          char const* _String1,
          char const* _String2
        );

      
    __declspec(dllimport) int __cdecl stricmp(
          char const* _String1,
          char const* _String2
        );

    
    __declspec(dllimport) char* __cdecl strlwr(
          char* _String
        );

      
    __declspec(dllimport) int __cdecl strnicmp(
          char const* _String1,
          char const* _String2,
                                size_t      _MaxCount
        );

    
    __declspec(dllimport) char* __cdecl strnset(
          char*  _String,
                                  int    _Value,
                                  size_t _MaxCount
        );

    
    __declspec(dllimport) char* __cdecl strrev(
          char* _String
        );

    
    char* __cdecl strset(
          char* _String,
               int   _Value);

    
    __declspec(dllimport) char* __cdecl strupr(
          char* _String
        );

#line 608 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"



} __pragma(pack(pop))

#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {








struct tm
{
    int tm_sec;   
    int tm_min;   
    int tm_hour;  
    int tm_mday;  
    int tm_mon;   
    int tm_year;  
    int tm_wday;  
    int tm_yday;  
    int tm_isdst; 
};







  
 
 
__declspec(dllimport) wchar_t* __cdecl _wasctime(
      struct tm const* _Tm
    );

 

__declspec(dllimport) errno_t __cdecl _wasctime_s(
        wchar_t*         _Buffer,
                                          size_t           _SizeInWords,
                                                       struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],   struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

 

__declspec(dllimport) size_t __cdecl wcsftime(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm
    );

 

__declspec(dllimport) size_t __cdecl _wcsftime_l(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );

 
  
__declspec(dllimport) wchar_t* __cdecl _wctime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime32_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

 
 
  
__declspec(dllimport) wchar_t* __cdecl _wctime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime64_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"


__declspec(dllimport) errno_t __cdecl _wstrdate_s(
        wchar_t* _Buffer,
                                      size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

 __declspec(dllimport)  wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"


__declspec(dllimport) errno_t __cdecl _wstrtime_s(
        wchar_t* _Buffer,
                                      size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

 __declspec(dllimport)  wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"









    #pragma warning(push)
    #pragma warning(disable: 4996)

    




















         
        static __inline wchar_t * __cdecl _wctime(
              time_t const* const _Time)
        {
            return _wctime64(_Time);
        }

        
        static __inline errno_t __cdecl _wctime_s(
                  wchar_t*      const _Buffer,
                                                             size_t        const _SizeInWords,
                                                             time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }

    #line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"

    #pragma warning(pop)
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"



} __pragma(pack(pop))
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

__pragma(pack(push, 8)) extern "C" {








typedef long clock_t;

struct _timespec32
{
    __time32_t tv_sec;
    long       tv_nsec;
};

struct _timespec64
{
    __time64_t tv_sec;
    long       tv_nsec;
};


    struct timespec
    {
        time_t tv_sec;  
        long   tv_nsec; 
    };
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
















  
__declspec(dllimport) int* __cdecl __daylight(void);




  
__declspec(dllimport) long* __cdecl __dstbias(void);




  
__declspec(dllimport) long* __cdecl __timezone(void);




    
__declspec(dllimport) char** __cdecl __tzname(void);



  
__declspec(dllimport) errno_t __cdecl _get_daylight(
      int* _Daylight
    );

 
__declspec(dllimport) errno_t __cdecl _get_dstbias(
      long* _DaylightSavingsBias
    );

  
__declspec(dllimport) errno_t __cdecl _get_timezone(
      long* _TimeZone
    );

 
__declspec(dllimport) errno_t __cdecl _get_tzname(
                             size_t* _ReturnValue,
      char*   _Buffer,
                              size_t  _SizeInBytes,
                              int     _Index
    );








 
 
  
__declspec(dllimport) char* __cdecl asctime(
      struct tm const* _Tm
    );


     
    
    __declspec(dllimport) errno_t __cdecl asctime_s(
            char*            _Buffer,
                                            size_t           _SizeInBytes,
                                                         struct tm const* _Tm
        );
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(  char (&_Buffer)[_Size],   struct tm const* _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

 
__declspec(dllimport) clock_t __cdecl clock(void);

 
 
  
__declspec(dllimport) char* __cdecl _ctime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime32_s(
        char*             _Buffer,
                                        size_t            _SizeInBytes,
                                                     __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(  char (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

 
 
  
__declspec(dllimport) char* __cdecl _ctime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _ctime64_s(
        char*             _Buffer,
                                          size_t            _SizeInBytes,
                                                       __time64_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(  char (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

 
__declspec(dllimport) double __cdecl _difftime32(
      __time32_t _Time1,
      __time32_t _Time2
    );

 
__declspec(dllimport) double __cdecl _difftime64(
      __time64_t _Time1,
      __time64_t _Time2
    );

 
  
__declspec(dllimport) struct tm* __cdecl _gmtime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  
__declspec(dllimport) struct tm* __cdecl _gmtime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _gmtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
  
__declspec(dllimport) struct tm* __cdecl _localtime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime32_s(
      struct tm*        _Tm,
       __time32_t const* _Time
    );

 
  
__declspec(dllimport) struct tm* __cdecl _localtime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _localtime64_s(
      struct tm*        _Tm,
       __time64_t const* _Time
    );

 
__declspec(dllimport) __time32_t __cdecl _mkgmtime32(
      struct tm* _Tm
    );

 
__declspec(dllimport) __time64_t __cdecl _mkgmtime64(
      struct tm* _Tm
    );


__declspec(dllimport) __time32_t __cdecl _mktime32(
      struct tm* _Tm
    );


__declspec(dllimport) __time64_t __cdecl _mktime64(
      struct tm* _Tm
    );

 

__declspec(dllimport) size_t __cdecl strftime(
       char*            _Buffer,
                               size_t           _SizeInBytes,
        char const*      _Format,
                               struct tm const* _Tm
    );

 

__declspec(dllimport) size_t __cdecl _strftime_l(
           char*            _Buffer,
                               size_t           _MaxSize,
        char const*      _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );


__declspec(dllimport) errno_t __cdecl _strdate_s(
        char*  _Buffer,
                                    size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(  char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

 __declspec(dllimport)  char* __cdecl _strdate( char *_Buffer);
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"


__declspec(dllimport) errno_t __cdecl _strtime_s(
        char*  _Buffer,
                                    size_t _SizeInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(  char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

 __declspec(dllimport) char* __cdecl _strtime( char *_Buffer);
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

__declspec(dllimport) __time32_t __cdecl _time32(
      __time32_t* _Time
    );

__declspec(dllimport) __time64_t __cdecl _time64(
      __time64_t* _Time
    );

 
 
__declspec(dllimport) int __cdecl _timespec32_get(
      struct _timespec32* _Ts,
       int                 _Base
    );

 
 
__declspec(dllimport) int __cdecl _timespec64_get(
      struct _timespec64* _Ts,
       int                 _Base
    );










    __declspec(dllimport) void __cdecl _tzset(void);

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "GetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _getsystime(
          struct tm* _Tm
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetLocalTime" " " "instead. See online help for details."))
    __declspec(dllimport) unsigned __cdecl _setsystime(
          struct tm* _Tm,
          unsigned   _Milliseconds
        );

#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"










    











































































































          
        static __inline char* __cdecl ctime(
              time_t const* const _Time
            )
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _ctime64(_Time);
            #pragma warning(pop)
        }

         
        static __inline double __cdecl difftime(
              time_t const _Time1,
              time_t const _Time2
            )
        {
            return _difftime64(_Time1, _Time2);
        }

          
        static __inline struct tm* __cdecl gmtime(
              time_t const* const _Time)
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _gmtime64(_Time);
            #pragma warning(pop)
        }

        
        static __inline struct tm* __cdecl localtime(
              time_t const* const _Time
            )
        {
            #pragma warning(push)
            #pragma warning(disable: 4996)
            return _localtime64(_Time);
            #pragma warning(pop)
        }

         
        static __inline time_t __cdecl _mkgmtime(
              struct tm* const _Tm
            )
        {
            return _mkgmtime64(_Tm);
        }

        
        static __inline time_t __cdecl mktime(
              struct tm* const _Tm
            )
        {
            return _mktime64(_Tm);
        }

        static __inline time_t __cdecl time(
              time_t* const _Time
            )
        {
            return _time64(_Time);
        }

         
        static __inline int __cdecl timespec_get(
              struct timespec* const _Ts,
               int              const _Base
            )
        {
            return _timespec64_get((struct _timespec64*)_Ts, _Base); 
        }

        
            
            static __inline errno_t __cdecl ctime_s(
                    char*         const _Buffer,
                                                    size_t        const _SizeInBytes,
                                                                 time_t const* const _Time
                )
            {
                return _ctime64_s(_Buffer, _SizeInBytes, _Time);
            }

            
            static __inline errno_t __cdecl gmtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _gmtime64_s(_Tm, _Time);
            }

            
            static __inline errno_t __cdecl localtime_s(
                  struct tm*    const _Tm,
                   time_t const* const _Time
                )
            {
                return _localtime64_s(_Tm, _Time);
            }
        #line 576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

    #line 578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"










    

    
         __declspec(dllimport) void __cdecl tzset(void);
    #line 595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"

#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"



} __pragma(pack(pop))
#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

extern "C"
{
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) clock_t __cdecl clock(void) ;
extern         __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void*   __cdecl memset(void*, int, size_t) ;
extern         __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void*   __cdecl memcpy(void*, const void*, size_t) ;

}
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"












#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"

#pragma once










 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"

 
namespace std {
using :: ptrdiff_t; using :: size_t;
}
 #line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"

 
namespace std {
typedef double max_align_t;	
}

using ::std:: max_align_t;	
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

#pragma once










 #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {





































#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _calloc_base(
      size_t _Count,
      size_t _Size
    );

     
__declspec(dllimport)  __declspec(allocator) __declspec(restrict)
void* __cdecl calloc(
       size_t _Count,
       size_t _Size
    );

 
__declspec(dllimport) int __cdecl _callnewh(
      size_t _Size
    );

     
__declspec(dllimport) __declspec(allocator)
void* __cdecl _expand(
                void*  _Block,
       size_t _Size
    );

__declspec(dllimport)
void __cdecl _free_base(
        void* _Block
    );

__declspec(dllimport)
void __cdecl free(
        void* _Block
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _malloc_base(
      size_t _Size
    );

     
__declspec(dllimport) __declspec(allocator)  __declspec(restrict)
void* __cdecl malloc(
       size_t _Size
    );

 
__declspec(dllimport)
size_t __cdecl _msize(
      void* _Block
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _realloc_base(
         void*  _Block,
                                 size_t _Size
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl realloc(
        void*  _Block,
              size_t _Size
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size
    );

__declspec(dllimport)
void __cdecl _aligned_free(
        void* _Block
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_malloc(
       size_t _Size,
                         size_t _Alignment
    );

     
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
       size_t _Size,
                         size_t _Alignment,
                         size_t _Offset
    );

 
__declspec(dllimport)
size_t __cdecl _aligned_msize(
      void*  _Block,
               size_t _Alignment,
               size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment
    );

       
__declspec(dllimport) __declspec(allocator) __declspec(restrict)
void* __cdecl _aligned_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment
    );


















#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"



} __pragma(pack(pop))
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"










#pragma once




__pragma(pack(push, 8)) extern "C" {





     
    __declspec(dllimport) void* __cdecl bsearch_s(
                                                        void const* _Key,
          void const* _Base,
                                                        rsize_t     _NumOfElements,
                                                        rsize_t     _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                        void*       _Context
        );

    __declspec(dllimport) void __cdecl qsort_s(
          void*   _Base,
                                                             rsize_t _NumOfElements,
                                                             rsize_t _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                             void*   _Context
        );

#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"



 
__declspec(dllimport) void* __cdecl bsearch(
                                                    void const* _Key,
      void const* _Base,
                                                    size_t      _NumOfElements,
                                                    size_t      _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

__declspec(dllimport) void __cdecl qsort(
      void*  _Base,
                                                         size_t _NumOfElements,
                                                         size_t _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

 
__declspec(dllimport) void* __cdecl _lfind_s(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       size_t        _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void*, void const*, void const*), 
                                                       void*         _Context
    );

 
__declspec(dllimport) void* __cdecl _lfind(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       unsigned int  _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

 
__declspec(dllimport) void* __cdecl _lsearch_s(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             size_t        _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                             void*         _Context
    );

 
__declspec(dllimport) void* __cdecl _lsearch(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             unsigned int  _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

















































































#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"





      
    __declspec(dllimport) void* __cdecl lfind(
                                                           void const*   _Key,
          void const*   _Base,
                                                        unsigned int* _NumOfElements,
                                                           unsigned int  _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );

      
    __declspec(dllimport) void* __cdecl lsearch(
                                                                void const*   _Key,
          void*         _Base,
                                                             unsigned int* _NumOfElements,
                                                                unsigned int  _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );

#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"



} __pragma(pack(pop))
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {
































 

__declspec(dllimport) errno_t __cdecl _itow_s(
                              int      _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 __declspec(dllimport) wchar_t* __cdecl _itow( int _Value,   wchar_t *_Buffer,  int _Radix);
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 

__declspec(dllimport) errno_t __cdecl _ltow_s(
                              long     _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 __declspec(dllimport) wchar_t* __cdecl _ltow( long _Value,   wchar_t *_Buffer,  int _Radix);
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"


__declspec(dllimport) errno_t __cdecl _ultow_s(
                              unsigned long _Value,
      wchar_t*      _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 __declspec(dllimport) wchar_t* __cdecl _ultow( unsigned long _Value,   wchar_t *_Buffer,  int _Radix);
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 
__declspec(dllimport) double __cdecl wcstod(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
__declspec(dllimport) double __cdecl _wcstod_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) long __cdecl wcstol(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) long __cdecl _wcstol_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) long long __cdecl wcstoll(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) long long __cdecl _wcstoll_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) unsigned long __cdecl wcstoul(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) unsigned long __cdecl _wcstoul_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) unsigned long long __cdecl wcstoull(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) unsigned long long __cdecl _wcstoull_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) long double __cdecl wcstold(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
__declspec(dllimport) long double __cdecl _wcstold_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) float __cdecl wcstof(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
__declspec(dllimport) float __cdecl _wcstof_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) double __cdecl _wtof(
      wchar_t const* _String
    );

 
__declspec(dllimport) double __cdecl _wtof_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wtoi(
      wchar_t const* _String
    );

 
__declspec(dllimport) int __cdecl _wtoi_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) long __cdecl _wtol(
      wchar_t const* _String
    );

 
__declspec(dllimport) long __cdecl _wtol_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) long long __cdecl _wtoll(
      wchar_t const* _String
    );

 
__declspec(dllimport) long long __cdecl _wtoll_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );


__declspec(dllimport) errno_t __cdecl _i64tow_s(
                              __int64  _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );


__declspec(dllimport) wchar_t* __cdecl _i64tow(
                        __int64  _Value,
        wchar_t* _Buffer,
                        int      _Radix
    );


__declspec(dllimport) errno_t __cdecl _ui64tow_s(
                              unsigned __int64 _Value,
      wchar_t*         _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );


__declspec(dllimport) wchar_t* __cdecl _ui64tow(
                        unsigned __int64 _Value,
        wchar_t*         _Buffer,
                        int              _Radix
    );

 
__declspec(dllimport) __int64 __cdecl _wtoi64(
      wchar_t const* _String
    );

 
__declspec(dllimport) __int64 __cdecl _wtoi64_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) __int64 __cdecl _wcstoi64(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) __int64 __cdecl _wcstoi64_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );




 
 
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wfullpath(
      wchar_t*       _Buffer,
                                wchar_t const* _Path,
                                  size_t         _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _wmakepath_s(
      wchar_t*       _Buffer,
                              size_t         _BufferCount,
                        wchar_t const* _Drive,
                        wchar_t const* _Dir,
                        wchar_t const* _Filename,
                        wchar_t const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _Drive,   wchar_t const* _Dir,   wchar_t const* _Filename,   wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

 __declspec(dllimport) void __cdecl _wmakepath(  wchar_t *_Buffer,  wchar_t const* _Drive,  wchar_t const* _Dir,  wchar_t const* _Filename,  wchar_t const* _Ext);
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

__declspec(dllimport) void __cdecl _wperror(
      wchar_t const* _ErrMsg
    );


__declspec(dllimport) void __cdecl _wsplitpath(
                        wchar_t const* _FullPath,
        wchar_t*       _Drive,
        wchar_t*       _Dir,
        wchar_t*       _Filename,
        wchar_t*       _Ext
    );

__declspec(dllimport) errno_t __cdecl _wsplitpath_s(
                                  wchar_t const* _FullPath,
         wchar_t*       _Drive,
                                    size_t         _DriveCount,
           wchar_t*       _Dir,
                                    size_t         _DirCount,
      wchar_t*       _Filename,
                                    size_t         _FilenameCount,
           wchar_t*       _Ext,
                                    size_t         _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(   wchar_t const* _Path,   wchar_t (&_Drive)[_DriveSize],   wchar_t (&_Dir)[_DirSize],   wchar_t (&_Name)[_NameSize],   wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"





    
    

    
    __declspec(dllimport) errno_t __cdecl _wdupenv_s(
            wchar_t**      _Buffer,
                                                                            size_t*        _BufferCount,
                                                                               wchar_t const* _VarName
        );

    

      
    __declspec(dllimport) wchar_t* __cdecl _wgetenv(
          wchar_t const* _VarName
        );

     
    
    __declspec(dllimport) errno_t __cdecl _wgetenv_s(
                                     size_t*        _RequiredCount,
          wchar_t*       _Buffer,
                                      size_t         _BufferCount,
                                    wchar_t const* _VarName
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wgetenv_s(  size_t* _RequiredCount, wchar_t (&_Buffer)[_Size],   wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

     
    __declspec(dllimport) int __cdecl _wputenv(
          wchar_t const* _EnvString
        );

    
    __declspec(dllimport) errno_t __cdecl _wputenv_s(
          wchar_t const* _Name,
          wchar_t const* _Value
        );
    
    __declspec(dllimport) errno_t __cdecl _wsearchenv_s(
                                wchar_t const* _Filename,
                                wchar_t const* _VarName,
          wchar_t*       _Buffer,
                                  size_t         _BufferCount
        );
    
    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(  wchar_t const* _Filename,   wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
    
     __declspec(dllimport) void __cdecl _wsearchenv( wchar_t const* _Filename,  wchar_t const* _VarName,   wchar_t *_ResultPath);
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"

    __declspec(dllimport) int __cdecl _wsystem(
          wchar_t const* _Command
        );

#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"



} __pragma(pack(pop))
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


__pragma(pack(push, 8)) extern "C" {




    
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"









__declspec(dllimport) void __cdecl _swab(
        char* _Buf1,
        char* _Buf2,
                                                                  int   _SizeInBytes
    );












__declspec(dllimport) __declspec(noreturn) void __cdecl exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(void);





__declspec(dllimport) unsigned int __cdecl _set_abort_behavior(
      unsigned int _Flags,
      unsigned int _Mask
    );




    typedef int (__cdecl* _onexit_t)(void);



#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"






    
    
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

























































    int       __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit(  _onexit_t _Func);
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

int __cdecl at_quick_exit(void (__cdecl*)(void));









    
    typedef void (__cdecl* _purecall_handler)(void);

    
    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*, 
        unsigned int,
        uintptr_t
        );

    
    __declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(
          _purecall_handler _Handler
        );

    __declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(void);

    
    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"












#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"









 __declspec(dllimport) int __cdecl _set_error_mode(  int _Mode);



__declspec(dllimport) int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);

__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


__declspec(dllimport) errno_t __cdecl _set_doserrno(  unsigned long _Value);
__declspec(dllimport) errno_t __cdecl _get_doserrno(  unsigned long * _Value);


__declspec(dllimport)  char** __cdecl __sys_errlist(void);


__declspec(dllimport)  int * __cdecl __sys_nerr(void);


__declspec(dllimport) void __cdecl perror(  char const* _ErrMsg);




 __declspec(dllimport) char**    __cdecl __p__pgmptr (void);
 __declspec(dllimport) wchar_t** __cdecl __p__wpgmptr(void);
 __declspec(dllimport) int*      __cdecl __p__fmode  (void);






    
    
    
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 
__declspec(dllimport) errno_t __cdecl _get_pgmptr (  char**    _Value);

 
__declspec(dllimport) errno_t __cdecl _get_wpgmptr(  wchar_t** _Value);

__declspec(dllimport) errno_t __cdecl _set_fmode  (               int       _Mode );

__declspec(dllimport) errno_t __cdecl _get_fmode  (              int*      _PMode);








typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

  int       __cdecl abs   (  int       _Number);
  long      __cdecl labs  (  long      _Number);
  long long __cdecl llabs (  long long _Number);
  __int64   __cdecl _abs64(  __int64   _Number);

  unsigned short   __cdecl _byteswap_ushort(  unsigned short   _Number);
  unsigned long    __cdecl _byteswap_ulong (  unsigned long    _Number);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Number);

  __declspec(dllimport) div_t   __cdecl div  (  int       _Numerator,   int       _Denominator);
  __declspec(dllimport) ldiv_t  __cdecl ldiv (  long      _Numerator,   long      _Denominator);
  __declspec(dllimport) lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);



#pragma warning (push)
#pragma warning (disable:6540) 

unsigned int __cdecl _rotl(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotl(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotl64(
      unsigned __int64 _Value,
      int              _Shift
    );

unsigned int __cdecl _rotr(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotr(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotr64(
      unsigned __int64 _Value,
      int              _Shift
    );

#pragma warning (pop)






__declspec(dllimport) void __cdecl srand(  unsigned int _Seed);

  __declspec(dllimport) int __cdecl rand(void);



#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"




extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"










    #pragma pack(push, 4)
    typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
    #pragma pack(pop)

    











#line 405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








                     __declspec(dllimport) double    __cdecl atof   (  char const* _String);
   __declspec(dllimport) int       __cdecl atoi   (  char const* _String);
                     __declspec(dllimport) long      __cdecl atol   (  char const* _String);
                     __declspec(dllimport) long long __cdecl atoll  (  char const* _String);
                     __declspec(dllimport) __int64   __cdecl _atoi64(  char const* _String);

  __declspec(dllimport) double    __cdecl _atof_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) int       __cdecl _atoi_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) long      __cdecl _atol_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) long long __cdecl _atoll_l (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) __int64   __cdecl _atoi64_l(  char const* _String,   _locale_t _Locale);

  __declspec(dllimport) int __cdecl _atoflt (  _CRT_FLOAT*  _Result,   char const* _String);
  __declspec(dllimport) int __cdecl _atodbl (  _CRT_DOUBLE* _Result,   char*       _String);
  __declspec(dllimport) int __cdecl _atoldbl(  _LDOUBLE*    _Result,   char*       _String);

 
__declspec(dllimport) int __cdecl _atoflt_l(
         _CRT_FLOAT* _Result,
        char const* _String,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _atodbl_l(
         _CRT_DOUBLE* _Result,
        char*        _String,
      _locale_t    _Locale
    );


 
__declspec(dllimport) int __cdecl _atoldbl_l(
         _LDOUBLE* _Result,
        char*     _String,
      _locale_t _Locale
    );

 
__declspec(dllimport) float __cdecl strtof(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) float __cdecl _strtof_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) double __cdecl strtod(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) double __cdecl _strtod_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long double __cdecl strtold(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) long double __cdecl _strtold_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long __cdecl strtol(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) long __cdecl _strtol_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long long __cdecl strtoll(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) long long __cdecl _strtoll_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned long __cdecl strtoul(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned long __cdecl _strtoul_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned long long __cdecl strtoull(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned long long __cdecl _strtoull_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) __int64 __cdecl _strtoi64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) __int64 __cdecl _strtoi64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );








 

__declspec(dllimport) errno_t __cdecl _itoa_s(
                              int    _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _itoa_s(  int _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) char* __cdecl _itoa( int _Value,   char *_Buffer,  int _Radix);
#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 

__declspec(dllimport) errno_t __cdecl _ltoa_s(
                              long   _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) char* __cdecl _ltoa( long _Value,   char *_Buffer,  int _Radix);
#line 661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 

__declspec(dllimport) errno_t __cdecl _ultoa_s(
                              unsigned long _Value,
      char*         _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) char* __cdecl _ultoa( unsigned long _Value,   char *_Buffer,  int _Radix);
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 

__declspec(dllimport) errno_t __cdecl _i64toa_s(
                              __int64 _Value,
      char*   _Buffer,
                              size_t  _BufferCount,
                              int     _Radix
    );

 

__declspec(dllimport) char* __cdecl _i64toa(
                        __int64 _Value,
        char*   _Buffer,
                        int     _Radix
    );

 

__declspec(dllimport) errno_t __cdecl _ui64toa_s(
                              unsigned __int64 _Value,
      char*            _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );


__declspec(dllimport) char* __cdecl _ui64toa(
                        unsigned __int64 _Value,
        char*            _Buffer,
                        int              _Radix
    );













 

__declspec(dllimport) errno_t __cdecl _ecvt_s(
      char* _Buffer,
       size_t                       _BufferCount,
       double                       _Value,
       int                          _DigitCount,
      int*                         _PtDec,
      int*                         _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount,   int* _PtDec,   int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

  
__declspec(dllimport) char* __cdecl _ecvt(
       double _Value,
       int    _DigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 

__declspec(dllimport) errno_t __cdecl _fcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _FractionalDigitCount,
                             int*   _PtDec,
                             int*   _PtSign
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size],   double _Value,   int _FractionalDigitCount,   int* _PtDec,   int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 
  
__declspec(dllimport) char* __cdecl _fcvt(
       double _Value,
       int    _FractionalDigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 
__declspec(dllimport) errno_t __cdecl _gcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _DigitCount
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


__declspec(dllimport) char* __cdecl _gcvt(
                        double _Value,
                        int    _DigitCount,
        char*  _Buffer
    );











    

#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
        
    #line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    


        
    #line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

     
    __declspec(dllimport) int __cdecl ___mb_cur_max_func(void);

     
    __declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t);
#line 839 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"



 
__declspec(dllimport) int __cdecl mblen(
        char const* _Ch,
                                             size_t      _MaxCount
    );

  
__declspec(dllimport) int __cdecl _mblen_l(
        char const* _Ch,
                                             size_t      _MaxCount,
                                         _locale_t   _Locale
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrlen(
      char const* _String
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrlen_l(
        char const* _String, 
      _locale_t   _Locale
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrnlen(
      char const* _String,
        size_t      _MaxCount
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrnlen_l(
        char const* _String,
          size_t      _MaxCount,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl mbtowc(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes
    );

 
__declspec(dllimport) int __cdecl _mbtowc_l(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes,
                                  _locale_t   _Locale
    );


__declspec(dllimport) errno_t __cdecl mbstowcs_s(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest,  char const* _Source,  size_t _MaxCount);
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount,
                                                       _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) size_t __cdecl _mbstowcs_l(  wchar_t *_Dest,   char const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 949 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"





__declspec(dllimport) int __cdecl wctomb(
      char*   _MbCh,
                                wchar_t _WCh
    );


__declspec(dllimport) int __cdecl _wctomb_l(
        char*     _MbCh,
                          wchar_t   _WCh,
                      _locale_t _Locale
    );



    
    __declspec(dllimport) errno_t __cdecl wctomb_s(
                                                         int*    _SizeConverted,
          char*   _MbCh,
                                                              rsize_t _SizeInBytes,
                                                              wchar_t _WCh
        );

#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _wctomb_s_l(
                             int*     _SizeConverted,
      char*     _MbCh,
                                  size_t    _SizeInBytes,
                                  wchar_t   _WCh, 
                              _locale_t _Locale);


__declspec(dllimport) errno_t __cdecl wcstombs_s(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 1002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) size_t __cdecl wcstombs( char *_Dest,  wchar_t const* _Source,  size_t _MaxCount);
#line 1009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes,
                                                                _locale_t      _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 1028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) size_t __cdecl _wcstombs_l(  char *_Dest,   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 1037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"




















 
 
__declspec(dllimport) __declspec(allocator) char* __cdecl _fullpath(
      char*       _Buffer,
                                char const* _Path,
                                  size_t      _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _makepath_s(
      char*       _Buffer,
                              size_t      _BufferCount,
                        char const* _Drive,
                        char const* _Dir,
                        char const* _Filename,
                        char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size],   char const* _Drive,   char const* _Dir,   char const* _Filename,   char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 1085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

 __declspec(dllimport) void __cdecl _makepath(  char *_Buffer,  char const* _Drive,  char const* _Dir,  char const* _Filename,  char const* _Ext);
#line 1094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"


__declspec(dllimport) void __cdecl _splitpath(
                        char const* _FullPath,
        char*       _Drive,
        char*       _Dir,
        char*       _Filename,
        char*       _Ext
    );


__declspec(dllimport) errno_t __cdecl _splitpath_s(
                                  char const* _FullPath,
         char*       _Drive,
                                    size_t      _DriveCount,
           char*       _Dir,
                                    size_t      _DirCount,
      char*       _Filename,
                                    size_t      _FilenameCount,
           char*       _Ext,
                                    size_t      _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(   char const* _Dest,   char (&_Drive)[_DriveSize],   char (&_Dir)[_DirSize],   char (&_Name)[_NameSize],   char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }










    

    
     
    __declspec(dllimport) errno_t __cdecl getenv_s(
                                     size_t*     _RequiredCount,
          char*       _Buffer,
                                      rsize_t     _BufferCount,
                                    char const* _VarName
        );
    
    #line 1140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"




    __declspec(dllimport) int*       __cdecl __p___argc (void);
    __declspec(dllimport) char***    __cdecl __p___argv (void);
    __declspec(dllimport) wchar_t*** __cdecl __p___wargv(void);

    




        
        
        
    #line 1157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
    
    __declspec(dllimport) char***    __cdecl __p__environ (void);
    __declspec(dllimport) wchar_t*** __cdecl __p__wenviron(void);

    
        
    #line 1164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
    
    





        
        
    #line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"



    
    



       
    __declspec(dllimport) char* __cdecl getenv(
          char const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t* _RequiredCount, char (&_Buffer)[_Size],   char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 1193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    


#line 1198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    
    __declspec(dllimport) errno_t __cdecl _dupenv_s(
            char**      _Buffer,
                                                                            size_t*     _BufferCount,
                                                                               char const* _VarName
        );

    

#line 1209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    __declspec(dllimport) int __cdecl system(
          char const* _Command
        );

    
    
    #pragma warning (push)
    #pragma warning (disable:6540)

     
    __declspec(dllimport) int __cdecl _putenv(
          char const* _EnvString
        );

    
    __declspec(dllimport) errno_t __cdecl _putenv_s(
          char const* _Name,
          char const* _Value
        );

    #pragma warning (pop)

    __declspec(dllimport) errno_t __cdecl _searchenv_s(
                                char const* _Filename,
                                char const* _VarName,
          char*       _Buffer,
                                  size_t      _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(  char const* _Filename,   char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }
#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

     __declspec(dllimport) void __cdecl _searchenv( char const* _Filename,  char const* _VarName,   char *_Buffer);
#line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _seterrormode(
          int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _beep(
          unsigned _Frequency,
          unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _sleep(
          unsigned long _Duration
        );

#line 1271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"










    




    
    

    #pragma warning(push)
    #pragma warning(disable: 4141) 

       
    __declspec(dllimport) char* __cdecl ecvt(
           double _Value,
           int    _DigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

       
    __declspec(dllimport) char* __cdecl fcvt(
           double _Value,
           int    _FractionalDigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

     
    __declspec(dllimport) char* __cdecl gcvt(
                            double _Value,
                            int    _DigitCount,
            char*  _DstBuf
        );
    
     
    __declspec(dllimport) char* __cdecl itoa(
                            int   _Value,
            char* _Buffer,
                            int   _Radix
        );
    
     
    __declspec(dllimport) char* __cdecl ltoa(
                            long  _Value,
            char* _Buffer,
                            int   _Radix
        );


    
    __declspec(dllimport) void __cdecl swab(
          char* _Buf1,
          char* _Buf2,
                                     int   _SizeInBytes
        );

     
    __declspec(dllimport) char* __cdecl ultoa(
                            unsigned long _Value,
            char*         _Buffer,
                            int           _Radix
        );

    

        

          
        __declspec(dllimport) int __cdecl putenv(
              char const* _EnvString
            );

    #line 1354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"

    #pragma warning(pop)

    _onexit_t __cdecl onexit(  _onexit_t _Func);

#line 1360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"



} __pragma(pack(pop))

#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

 
namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;

 
using :: getenv;
using :: system;
 #line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;

using :: _Exit; using :: at_quick_exit; using :: quick_exit;
}
 #line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		
template<class _Elem>
	class initializer_list
	{	
public:
	typedef _Elem value_type;
	typedef const _Elem& reference;
	typedef const _Elem& const_reference;
	typedef size_t size_type;

	typedef const _Elem* iterator;
	typedef const _Elem* const_iterator;

	constexpr initializer_list() noexcept
		: _First(0), _Last(0)
		{	
		}

	constexpr initializer_list(const _Elem *_First_arg,
		const _Elem *_Last_arg) noexcept
		: _First(_First_arg), _Last(_Last_arg)
		{	
		}

	constexpr const _Elem *begin() const noexcept
		{	
		return (_First);
		}

	constexpr const _Elem *end() const noexcept
		{	
		return (_Last);
		}

	constexpr size_t size() const noexcept
		{	
		return ((size_t)(_Last - _First));
		}

private:
	const _Elem *_First;
	const _Elem *_Last;
	};

		
template<class _Elem> inline
	constexpr const _Elem *begin(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.begin());
	}

		
template<class _Elem> inline
	constexpr const _Elem *end(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.end());
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
	
struct _Nil
	{	
	};

	
template<class _Ty,
	_Ty _Val>
	struct integral_constant
	{	
	static constexpr _Ty value = _Val;

	typedef _Ty value_type;
	typedef integral_constant<_Ty, _Val> type;

	constexpr operator value_type() const noexcept
		{	
		return (value);
		}

	constexpr value_type operator()() const noexcept
		{	
		return (value);
		}
	};

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

	
template<bool _Val>
	using bool_constant = integral_constant<bool, _Val>;

	
template<bool _Val>
	struct _Cat_base
		: integral_constant<bool, _Val>
	{	
	};

	
template<bool _Test,
	class _Ty = void>
	struct enable_if
	{	
	};

template<class _Ty>
	struct enable_if<true, _Ty>
	{	
	typedef _Ty type;
	};

	
template<bool _Test,
	class _Ty1,
	class _Ty2>
	struct conditional
	{	
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct conditional<true, _Ty1, _Ty2>
	{	
	typedef _Ty1 type;
	};

	
template<class _Ty1,
	class _Ty2>
	struct is_same
		: false_type
	{	
	};

template<class _Ty1>
	struct is_same<_Ty1, _Ty1>
		: true_type
	{	
	};

 
template<class _Ty,
	class _Uty>
	constexpr bool is_same_v = is_same<_Ty, _Uty>::value;
 #line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct remove_const
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_const<const _Ty>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_volatile
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_volatile<volatile _Ty>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_cv
	{	
	typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
		type;
	};

	
template<class _Ty>
	struct _Is_integral
		: false_type
	{	
	};

template<>
	struct _Is_integral<bool>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed char>
		: true_type
	{	
	};

 
template<>
	struct _Is_integral<wchar_t>
		: true_type
	{	
	};
 #line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

template<>
	struct _Is_integral<unsigned short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char16_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char32_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<long long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long long>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_integral
		: _Is_integral<typename remove_cv<_Ty>::type>
	{	
	};

 
template<class _Ty>
	constexpr bool is_integral_v = is_integral<_Ty>::value;
 #line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct _Is_floating_point
		: false_type
	{	
	};

template<>
	struct _Is_floating_point<float>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<double>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<long double>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_floating_point
		: _Is_floating_point<typename remove_cv<_Ty>::type>
	{	
	};

 
template<class _Ty>
	constexpr bool is_floating_point_v = is_floating_point<_Ty>::value;
 #line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct is_arithmetic
		: _Cat_base<is_integral<_Ty>::value
			|| is_floating_point<_Ty>::value>
	{	
	};

 
template<class _Ty>
	constexpr bool is_arithmetic_v = is_arithmetic<_Ty>::value;
 #line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct remove_reference
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_reference<_Ty&>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_reference<_Ty&&>
	{	
	typedef _Ty type;
	};

	
struct _Wrap_int
	{	
	_Wrap_int(int)
		{	
		}
	};

template<class _Ty>
	struct _Identity
	{	
	typedef _Ty type;
	};














}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"





#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 
  
  
  
 #line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

namespace std {
		
 
 
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 
 
 
 
 

 
 

  

  











#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
   
   
  #line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 



















#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

		


		
 

 



































 
 

		

template<bool,
	class _Ty1,
	class _Ty2>
	struct _If
	{	
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct _If<true, _Ty1, _Ty2>
	{	
	typedef _Ty1 type;
	};

template<class _Ty>
	struct _Always_false
	{	
	static constexpr bool value = false;
	};

		

 
		
template<class _Arg,
	class _Result>
	struct unary_function
	{	
	typedef _Arg argument_type;
	typedef _Result result_type;
	};

		
template<class _Arg1,
	class _Arg2,
	class _Result>
	struct binary_function
	{	
	typedef _Arg1 first_argument_type;
	typedef _Arg2 second_argument_type;
	typedef _Result result_type;
	};
 #line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

		
template<class _Ty = void>
	struct plus
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left + _Right);
		}
	};

		
template<class _Ty = void>
	struct minus
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left - _Right);
		}
	};

		
template<class _Ty = void>
	struct multiplies
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left * _Right);
		}
	};

		
template<class _Ty = void>
	struct equal_to
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left == _Right);
		}
	};

		
template<class _Ty = void>
	struct less
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left < _Right);
		}
	};

		
template<>
	struct plus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct minus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct multiplies<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct equal_to<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct less<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right));
		}
	};


}



namespace std {
	
inline size_t _Hash_seq(const unsigned char *_First, size_t _Count)
	{	
 




#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
	static_assert(sizeof(size_t) == 4, "This code is for 32-bit size_t.");
	const size_t _FNV_offset_basis = 2166136261U;
	const size_t _FNV_prime = 16777619U;
 #line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

	size_t _Val = _FNV_offset_basis;
	for (size_t _Next = 0; _Next < _Count; ++_Next)
		{	
		_Val ^= (size_t)_First[_Next];
		_Val *= _FNV_prime;
		}
	return (_Val);
	}

	
template<class _Kty>
	struct _Bitwise_hash
	{	
	typedef _Kty argument_type;
	typedef size_t result_type;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Hash_seq((const unsigned char *)&_Keyval, sizeof (_Kty)));
		}
	};

	
template<class _Kty>
	struct hash
		: public _Bitwise_hash<_Kty>
	{	
	static constexpr bool _Value = __is_enum(_Kty);
	static_assert(_Value,
		"The C++ Standard doesn't provide a hash for this type.");
	};
template<>
	struct hash<bool>
		: public _Bitwise_hash<bool>
	{	
	};

template<>
	struct hash<char>
		: public _Bitwise_hash<char>
	{	
	};

template<>
	struct hash<signed char>
		: public _Bitwise_hash<signed char>
	{	
	};

template<>
	struct hash<unsigned char>
		: public _Bitwise_hash<unsigned char>
	{	
	};

template<>
	struct hash<char16_t>
		: public _Bitwise_hash<char16_t>
	{	
	};

template<>
	struct hash<char32_t>
		: public _Bitwise_hash<char32_t>
	{	
	};

 
template<>
	struct hash<wchar_t>
		: public _Bitwise_hash<wchar_t>
	{	
	};
 #line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

template<>
	struct hash<short>
		: public _Bitwise_hash<short>
	{	
	};

template<>
	struct hash<unsigned short>
		: public _Bitwise_hash<unsigned short>
	{	
	};

template<>
	struct hash<int>
		: public _Bitwise_hash<int>
	{	
	};

template<>
	struct hash<unsigned int>
		: public _Bitwise_hash<unsigned int>
	{	
	};

template<>
	struct hash<long>
		: public _Bitwise_hash<long>
	{	
	};

template<>
	struct hash<unsigned long>
		: public _Bitwise_hash<unsigned long>
	{	
	};

template<>
	struct hash<long long>
		: public _Bitwise_hash<long long>
	{	
	};

template<>
	struct hash<unsigned long long>
		: public _Bitwise_hash<unsigned long long>
	{	
	};

template<>
	struct hash<float>
		: public _Bitwise_hash<float>
	{	
	typedef float _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<>
	struct hash<double>
		: public _Bitwise_hash<double>
	{	
	typedef double _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<>
	struct hash<long double>
		: public _Bitwise_hash<long double>
	{	
	typedef long double _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<class _Ty>
	struct hash<_Ty *>
		: public _Bitwise_hash<_Ty *>
	{	
	};
}
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"


namespace std {
namespace tr1 {	
using ::std:: hash;
}	
}
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"




 





 #line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 



 

#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 





 


#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 



 

#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"


































































namespace std {
	
template<class... _Types>
	struct _Arg_types
	{	
	};

template<class _Ty1>
	struct _Arg_types<_Ty1>
	{	
	typedef _Ty1 argument_type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Arg_types<_Ty1, _Ty2>
	{	
	typedef _Ty1 first_argument_type;
	typedef _Ty2 second_argument_type;
	};

	
template<class _Ty>
	struct _Is_function
	{	
	typedef false_type _Bool_type;
	static constexpr bool _Weird = false;
	};












template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };  template<class _Ret, class... _Types> struct _Is_function<_Ret __fastcall (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __stdcall (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };












template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };


template<class _Ty>
	struct is_function
		: _Is_function<_Ty>::_Bool_type
	{	
	};

 
template<class _Ty>
	constexpr bool is_function_v = is_function<_Ty>::value;
 #line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

		





















template<class _Ty> inline
	constexpr _Ty *addressof(_Ty& _Val) noexcept
	{	
	return (__builtin_addressof(_Val));
	}
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"


		
template<class _Ptrty> inline
	auto _Unfancy(_Ptrty _Ptr)
	{	
	return (::std:: addressof(*_Ptr));
	}

template<class _Ty> inline
	_Ty * _Unfancy(_Ty * _Ptr)
	{	
	return (_Ptr);
	}

}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
 #pragma warning(disable: 4180 4296)

namespace std {
template<class _Ty>
	struct _Is_memfunptr
	{	
	typedef false_type _Bool_type;
	};













template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...)  > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...)  > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...)  > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...)  &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...)  &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...)  &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...)  &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...)  &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...)  &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };  template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__fastcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__stdcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__thiscall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };













template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };


	
template<class _Ty>
	struct is_void
		: false_type
	{	
	};








template<> struct is_void< void> : true_type { }; template<> struct is_void<const void> : true_type { }; template<> struct is_void<volatile void> : true_type { }; template<> struct is_void<const volatile void> : true_type { };


	
	
template<class _Ty>
	struct add_const
	{	
	typedef const _Ty type;
	};

	
template<class _Ty>
	struct add_volatile
	{	
	typedef volatile _Ty type;
	};

	
template<class _Ty>
	struct add_cv
	{	
	typedef const volatile _Ty type;
	};

	
template<class _Ty,
	bool = _Is_function<_Ty>::_Weird || is_void<_Ty>::value>
	struct _Add_reference
	{	
	typedef _Ty _Lvalue;
	typedef _Ty _Rvalue;
	};

template<class _Ty>
	struct _Add_reference<_Ty, false>
	{	
	typedef _Ty& _Lvalue;
	typedef _Ty&& _Rvalue;
	};

	
template<class _Ty>
	struct add_lvalue_reference
	{	
	typedef typename _Add_reference<_Ty>::_Lvalue type;
	};

	
template<class _Ty>
	struct add_rvalue_reference
	{	
	typedef typename _Add_reference<_Ty>::_Rvalue type;
	};

	
template<class _Ty>
	typename add_rvalue_reference<_Ty>::type
		declval() noexcept;

	
template<class _Ty>
	struct remove_extent
	{	
	typedef _Ty type;
	};

template<class _Ty, size_t _Ix>
	struct remove_extent<_Ty[_Ix]>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_extent<_Ty[]>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_all_extents
	{	
	typedef _Ty type;
	};

template<class _Ty, size_t _Ix>
	struct remove_all_extents<_Ty[_Ix]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

template<class _Ty>
	struct remove_all_extents<_Ty[]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

	
template<class _Ty>
	struct remove_pointer
	{	
	typedef _Ty type;
	};








template<class _Ty> struct remove_pointer<_Ty *> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *volatile> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const volatile> { typedef _Ty type; };


	
template<class _Ty,
	bool = _Is_function<_Ty>::_Weird>
	struct _Add_pointer
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct _Add_pointer<_Ty, false>
	{	
	typedef typename remove_reference<_Ty>::type *type;
	};

template<class _Ty>
	struct add_pointer
	{	
	typedef typename _Add_pointer<_Ty>::type type;
	};

	
	
template<class _Ty>
	struct is_array
		: false_type
	{	
	};

template<class _Ty, size_t _Nx>
	struct is_array<_Ty[_Nx]>
		: true_type
	{	
	};

template<class _Ty>
	struct is_array<_Ty[]>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_lvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_lvalue_reference<_Ty&>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_rvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_rvalue_reference<_Ty&&>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_reference
		: _Cat_base<is_lvalue_reference<_Ty>::value
		|| is_rvalue_reference<_Ty>::value>
	{	
	};


	
template<class _Ty,
	bool _Pmf = _Is_memfunptr<_Ty>::_Bool_type::value>
	struct _Is_member_object_pointer
		: false_type
	{	
	};

template<class _Ty1,
	class _Ty2>
	struct _Is_member_object_pointer<_Ty1 _Ty2::*, false>
		: true_type
	{	
	typedef _Ty2 _Class_type;
	};

template<class _Ty>
	struct is_member_object_pointer
		: _Is_member_object_pointer<typename remove_cv<_Ty>::type>::type
	{	
	};

	
template<class _Ty>
	struct is_member_function_pointer
		: _Is_memfunptr<typename remove_cv<_Ty>::type>::_Bool_type
	{	
	};

	
template<class _Ty>
	struct _Is_pointer
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_pointer<_Ty *>
		: _Cat_base<!is_member_object_pointer<_Ty *>::value
		&& !is_member_function_pointer<_Ty *>::value>
	{	
	};

template<class _Ty>
	struct is_pointer
		: _Is_pointer<typename remove_cv<_Ty>::type>
	{	
	};

	

template<class _Ty>
	struct is_null_pointer
		: _Cat_base<is_same<typename remove_cv<_Ty>::type, nullptr_t>::value>
	{	
	};

	
template<class _Ty>
	struct is_union
		: _Cat_base<__is_union(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_class
		: _Cat_base<__is_class(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_fundamental
		: _Cat_base<is_arithmetic<_Ty>::value
		|| is_void<_Ty>::value
		|| is_null_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_object
		: _Cat_base<!is_function<_Ty>::value
		&& !is_reference<_Ty>::value
		&& !is_void<_Ty>::value>
	{	
	};

	

template<class _From,
	class _To>
	struct is_convertible
		: _Cat_base<__is_convertible_to(_From, _To)>
	{	
	};

	
template<class _Ty>
	struct is_enum
		: _Cat_base<__is_enum(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_compound
		: _Cat_base<!is_fundamental<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_member_pointer
		: _Cat_base<is_member_object_pointer<_Ty>::value
		|| is_member_function_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_scalar
		: _Cat_base<is_arithmetic<_Ty>::value
		|| is_enum<_Ty>::value
		|| is_pointer<_Ty>::value
		|| is_member_pointer<_Ty>::value
		|| is_null_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_const
		: false_type
	{	
	};

template<class _Ty>
	struct is_const<const _Ty>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_volatile
		: false_type
	{	
	};

template<class _Ty>
	struct is_volatile<volatile _Ty>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_pod
		: _Cat_base<__is_pod(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_empty
		: _Cat_base<__is_empty(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_polymorphic
		: _Cat_base<__is_polymorphic(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_abstract
		: _Cat_base<__is_abstract(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_final
		: _Cat_base<__is_final(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_standard_layout
		: _Cat_base<__is_standard_layout(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_literal_type
		: _Cat_base<__is_literal_type(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_trivial
		: _Cat_base<__is_trivial(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copyable
		: _Cat_base<__is_trivially_copyable(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_virtual_destructor
		: _Cat_base<__has_virtual_destructor(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_constructible
		: _Cat_base<__is_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_copy_constructible
		: is_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_default_constructible
		: is_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_move_constructible
		: is_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_assignable
		: integral_constant<bool, __is_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_copy_assignable
		: is_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_move_assignable
		: is_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_destructible
		: _Cat_base<__is_destructible(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_trivially_constructible
		: _Cat_base<__is_trivially_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copy_constructible
		: is_trivially_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_default_constructible
		: is_trivially_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_move_constructible
		: is_trivially_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_trivially_assignable
		: _Cat_base<__is_trivially_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copy_assignable
		: is_trivially_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_move_assignable
		: is_trivially_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_destructible
		: _Cat_base<__has_trivial_destructor(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_nothrow_constructible
		: _Cat_base<__is_nothrow_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_nothrow_copy_constructible
		: is_nothrow_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_default_constructible
		: is_nothrow_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_move_constructible
		: is_nothrow_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_nothrow_assignable
		: _Cat_base<__is_nothrow_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_nothrow_copy_assignable
		: is_nothrow_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_move_assignable
		: is_nothrow_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_destructible
		: _Cat_base<__is_nothrow_destructible(_Ty)>
	{	
	};

	
template<class _Ty,
	bool = is_integral<_Ty>::value>
	struct _Sign_base
	{	
	typedef typename remove_cv<_Ty>::type _Uty;
	typedef _Cat_base<_Uty(-1) < _Uty(0)> _Signed;
	typedef _Cat_base<_Uty(0) < _Uty(-1)> _Unsigned;
	};

template<class _Ty>
	struct _Sign_base<_Ty, false>
	{	
		
	typedef is_floating_point<_Ty> _Signed;
	typedef false_type _Unsigned;
	};

template<class _Ty>
	struct is_signed
		: _Sign_base<_Ty>::_Signed
	{	
	};

	
template<class _Ty>
	struct is_unsigned
		: _Sign_base<_Ty>::_Unsigned
	{	
	};

	
template<class _Ty>
	struct _Change_sign
	{	
	static_assert(
		((is_integral<_Ty>::value || is_enum<_Ty>::value)
			&& !is_same<_Ty, bool>::value),
		"make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
		"cv-qualified) integral type or enumeration but not a bool type.");

	typedef
		typename _If<is_same<_Ty, signed char>::value
			|| is_same<_Ty, unsigned char     >::value, signed char,
		typename _If<is_same<_Ty, short       >::value
			|| is_same<_Ty, unsigned short    >::value, short,
		typename _If<is_same<_Ty, int         >::value
			|| is_same<_Ty, unsigned int      >::value, int,
		typename _If<is_same<_Ty, long        >::value
			|| is_same<_Ty, unsigned long     >::value, long,
		typename _If<is_same<_Ty, long long   >::value
			|| is_same<_Ty, unsigned long long>::value, long long,
		typename _If<sizeof (_Ty) == sizeof (signed char), signed char,
		typename _If<sizeof (_Ty) == sizeof (short      ), short,
		typename _If<sizeof (_Ty) == sizeof (int        ), int,
		typename _If<sizeof (_Ty) == sizeof (long       ), long,
			long long
		>::type>::type>::type>::type>::type>::type>::type>::type>::type
			_Signed;

	typedef
		typename _If<is_same<_Signed, signed char>::value, unsigned char,
		typename _If<is_same<_Signed, short      >::value, unsigned short,
		typename _If<is_same<_Signed, int        >::value, unsigned int,
		typename _If<is_same<_Signed, long       >::value, unsigned long,
			unsigned long long
		>::type>::type>::type>::type
			_Unsigned;
	};

template<class _Ty>
	struct _Change_sign<const _Ty>
	{	
	typedef const typename _Change_sign<_Ty>::_Signed _Signed;
	typedef const typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

template<class _Ty>
	struct _Change_sign<volatile _Ty>
	{	
	typedef volatile typename _Change_sign<_Ty>::_Signed _Signed;
	typedef volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

template<class _Ty>
	struct _Change_sign<const volatile _Ty>
	{	
	typedef const volatile typename _Change_sign<_Ty>::_Signed _Signed;
	typedef const volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

	
template<class _Ty>
	struct make_signed
	{	
	typedef typename _Change_sign<_Ty>::_Signed type;
	};

	
template<class _Ty>
	struct make_unsigned
	{	
	typedef typename _Change_sign<_Ty>::_Unsigned type;
	};

	

template<class _Ty>
	struct alignment_of
		: integral_constant<size_t, alignof(_Ty)>
	{	
	};

	




template<class _Ty,
	size_t _Len>
	union _Align_type
	{	
	_Ty _Val;
	char _Pad[_Len];
	};

template<size_t _Len,
	size_t _Align,
	class _Ty,
	bool _Ok>
	struct _Aligned;

template<size_t _Len,
	size_t _Align,
	class _Ty>
	struct _Aligned<_Len, _Align, _Ty, true>
	{	
	typedef _Align_type<_Ty, _Len> type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, double, false>
	{	
	typedef _Align_type<max_align_t, _Len> type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, int, false>
	{	
	typedef typename _Aligned<_Len, _Align, double, _Align <= alignment_of<double>::value>::type type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, short, false>
	{	
	typedef typename _Aligned<_Len, _Align, int, _Align <= alignment_of<int>::value>::type type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, char, false>
	{	
	typedef typename _Aligned<_Len, _Align, short, _Align <= alignment_of<short>::value>::type type;
	};

template<size_t _Len,
	size_t _Align = alignment_of<max_align_t>::value>
	struct aligned_storage
	{	
	typedef typename _Aligned<_Len, _Align, char, _Align <= alignment_of<char>::value>::type type;
	};




	
template<size_t... _Vals>
	struct _Maximum;

template<>
	struct _Maximum<>
	{	
	static constexpr size_t value = 0;
	};

template<size_t _Val>
	struct _Maximum<_Val>
	{	
	static constexpr size_t value = _Val;
	};

template<size_t _First,
	size_t _Second,
	size_t... _Rest>
	struct _Maximum<_First, _Second, _Rest...>
		: _Maximum<(_First < _Second ? _Second : _First), _Rest...>
	{	
	};

template<size_t _Len,
	class... _Types>
	struct aligned_union
	{	
	static constexpr size_t _Max_len = _Maximum<
		_Len, sizeof(_Types)...>::value;	
	static constexpr size_t alignment_value = _Maximum<
		alignment_of<_Types>::value...>::value;
	typedef typename aligned_storage<_Max_len, alignment_value>::type type;
	};

	
template<class _Ty>
	struct underlying_type
	{	
	typedef __underlying_type(_Ty) type;
	};

	
template<class _Ty>
	struct rank
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, size_t _Ix>
	struct rank<_Ty[_Ix]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

template<class _Ty>
	struct rank<_Ty[]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

	
template<class _Ty, unsigned int _Nx>
	struct _Extent
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, size_t _Ix>
	struct _Extent<_Ty[_Ix], 0>
		: integral_constant<size_t, _Ix>
	{	
	};

template<class _Ty, unsigned int _Nx, size_t _Ix>
	struct _Extent<_Ty[_Ix], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct _Extent<_Ty[], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx = 0>
	struct extent
		: _Extent<_Ty, _Nx>
	{	
	};

	
template<class _Base,
	class _Der>
	struct is_base_of
		: _Cat_base<__is_base_of(_Base, _Der)>
	{	
	};

	
template<class _Ty>
	struct decay
	{	
	typedef typename remove_reference<_Ty>::type _Ty1;

	typedef typename _If<is_array<_Ty1>::value,
		typename remove_extent<_Ty1>::type *,
		typename _If<is_function<_Ty1>::value,
			typename add_pointer<_Ty1>::type,
			typename remove_cv<_Ty1>::type>::type>::type type;
	};

	
template<class...>
	struct _Conjunction;

template<bool,
	class _Lhs,
	class... _Traits>
	struct _Choose_conjunction
	{	
	typedef _Lhs type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Choose_conjunction<true, _Lhs, _Traits...>
	{	
	typedef typename _Conjunction<_Traits...>::type type;
	};

template<>
	struct _Conjunction<>
	{	
	typedef true_type type;
	};

template<class _Trait>
	struct _Conjunction<_Trait>
	{	
	typedef _Trait type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Conjunction<_Lhs, _Traits...>
	{	
	typedef typename _Choose_conjunction<_Lhs::value, _Lhs, _Traits...>::type type;
	};

template<class... _Traits>
	struct conjunction
		: _Conjunction<_Traits...>::type
	{	
		
		
	};

	
template<class...>
	struct _Disjunction;

template<bool,
	class _Lhs,
	class... _Traits>
	struct _Choose_disjunction
	{	
	typedef _Lhs type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Choose_disjunction<false, _Lhs, _Traits...>
	{	
	typedef typename _Disjunction<_Traits...>::type type;
	};

template<>
	struct _Disjunction<>
	{	
	typedef false_type type;
	};

template<class _Trait>
	struct _Disjunction<_Trait>
	{	
	typedef _Trait type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Disjunction<_Lhs, _Traits...>
	{	
	typedef typename _Choose_disjunction<_Lhs::value, _Lhs, _Traits...>::type type;
	};

template<class... _Traits>
	struct disjunction
		: _Disjunction<_Traits...>::type
	{	
		
		
	};

	
template<class _Trait>
	struct negation
		: bool_constant<!_Trait::value>
	{	
	};


namespace tr1 {	
using ::std:: add_const;
using ::std:: add_cv;
using ::std:: add_pointer;
using ::std:: add_volatile;
using ::std:: aligned_storage;
using ::std:: alignment_of;
using ::std:: conditional;
using ::std:: decay;
using ::std:: enable_if;
using ::std:: extent;
using ::std:: false_type;
using ::std:: has_virtual_destructor;
using ::std:: integral_constant;
using ::std:: is_abstract;
using ::std:: is_arithmetic;
using ::std:: is_array;
using ::std:: is_base_of;
using ::std:: is_class;
using ::std:: is_compound;
using ::std:: is_const;
using ::std:: is_convertible;
using ::std:: is_empty;
using ::std:: is_enum;
using ::std:: is_floating_point;
using ::std:: is_function;
using ::std:: is_fundamental;
using ::std:: is_integral;
using ::std:: is_member_function_pointer;
using ::std:: is_member_object_pointer;
using ::std:: is_member_pointer;
using ::std:: is_object;
using ::std:: is_pod;
using ::std:: is_pointer;
using ::std:: is_polymorphic;
using ::std:: is_reference;
using ::std:: is_same;
using ::std:: is_scalar;
using ::std:: is_signed;
using ::std:: is_union;
using ::std:: is_unsigned;
using ::std:: is_void;
using ::std:: is_volatile;
using ::std:: make_signed;
using ::std:: make_unsigned;
using ::std:: rank;
using ::std:: remove_all_extents;
using ::std:: remove_const;
using ::std:: remove_cv;
using ::std:: remove_extent;
using ::std:: remove_pointer;
using ::std:: remove_reference;
using ::std:: remove_volatile;
using ::std:: true_type;
	}	
#line 1156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

		
template<class... _Ty>
	struct common_type;

template<class _Ty>
	struct common_type<_Ty>
	{	
	typedef typename decay<_Ty>::type type;
	};

template<class _Ty0,
	class _Ty1>
	struct common_type<_Ty0, _Ty1>
	{	
	typedef typename decay<
		decltype(_Always_false<_Ty0>::value
			? ::std:: declval<_Ty0>()
			: ::std:: declval<_Ty1>())
	>::type type;
	};

template<class _Ty0,
	class _Ty1,
	class... _Ty>
	struct common_type<_Ty0, _Ty1, _Ty...>
	{	
	typedef typename common_type<
		typename common_type<_Ty0, _Ty1>::type, _Ty...
	>::type type;
	};

	
template<class _Ty,
	_Ty... _Vals>
	struct integer_sequence
	{	
	static_assert(is_integral<_Ty>::value,
		"integer_sequence<T, I...> requires T to be an integral type.");

	typedef integer_sequence<_Ty, _Vals...> type;
	typedef _Ty value_type;

	static constexpr size_t size() noexcept
		{	
		return (sizeof...(_Vals));
		}
	};

	
 




































template<class _Ty,
	_Ty _Size>
	using make_integer_sequence = __make_integer_seq<integer_sequence, _Ty, _Size>;
 #line 1247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

template<size_t... _Vals>
	using index_sequence = integer_sequence<size_t, _Vals...>;

template<size_t _Size>
	using make_index_sequence = make_integer_sequence<size_t, _Size>;

template<class... _Types>
	using index_sequence_for = make_index_sequence<sizeof...(_Types)>;


	
template<class _Ty>
	struct identity
	{	
	typedef _Ty type;

	const _Ty& operator()(const _Ty& _Left) const
		{	
		return (_Left);
		}
	};
#line 1270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

	
template<class _Ty> inline
	constexpr _Ty&& forward(
		typename remove_reference<_Ty>::type& _Arg) noexcept
	{	
	return (static_cast<_Ty&&>(_Arg));
	}

template<class _Ty> inline
	constexpr _Ty&& forward(
		typename remove_reference<_Ty>::type&& _Arg) noexcept
	{	
	static_assert(!is_lvalue_reference<_Ty>::value, "bad forward call");
	return (static_cast<_Ty&&>(_Arg));
	}

		
template<class _Ty> inline
	constexpr typename remove_reference<_Ty>::type&&
		move(_Ty&& _Arg) noexcept
	{	
	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));
	}

		
template<class _Ty> inline
	constexpr typename _If<!is_nothrow_move_constructible<_Ty>::value
		&& is_copy_constructible<_Ty>::value,
			const _Ty&, _Ty&&>::type
	move_if_noexcept(_Ty& _Arg) noexcept
	{	
	return (::std:: move(_Arg));
	}

	
template<class...>
	struct _Param_tester
	{	
	typedef void type;
	};

	
template<class... _Types>	
	using void_t = typename _Param_tester<_Types...>::type;

	
struct _Invoker_pmf_object
	{	
	template<class _Decayed,
		class _Ty1,
		class... _Types2>
		static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
		-> decltype((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...))
		{	
		return ((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...));
		}
	};

struct _Invoker_pmf_pointer
	{	
	template<class _Decayed,
		class _Ty1,
		class... _Types2>
		static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
		-> decltype(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...))
		{	
		return (((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...));
		}
	};

struct _Invoker_pmd_object
	{	
	template<class _Decayed,
		class _Ty1>
		static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
		-> decltype(::std:: forward<_Ty1>(_Arg1).*_Pmd)
		{	
		return (::std:: forward<_Ty1>(_Arg1).*_Pmd);
		}
	};

struct _Invoker_pmd_pointer
	{	
	template<class _Decayed,
		class _Ty1>
		static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
		-> decltype((*::std:: forward<_Ty1>(_Arg1)).*_Pmd)
		{	
		return ((*::std:: forward<_Ty1>(_Arg1)).*_Pmd);
		}
	};

struct _Invoker_functor
	{	
	template<class _Callable,
		class... _Types>
		static auto _Call(_Callable&& _Obj, _Types&&... _Args)
		-> decltype(::std:: forward<_Callable>(_Obj)(
			::std:: forward<_Types>(_Args)...))
		{	
		return (::std:: forward<_Callable>(_Obj)(
			::std:: forward<_Types>(_Args)...));
		}
	};

template<class _Callable,
	class _Ty1,
	class _Decayed = typename decay<_Callable>::type,
	bool _Is_pmf = is_member_function_pointer<_Decayed>::value,
	bool _Is_pmd = is_member_object_pointer<_Decayed>::value>
	struct _Invoker1;

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, true, false>
		: _If<is_base_of<
			typename _Is_memfunptr<_Decayed>::_Class_type,
			typename decay<_Ty1>::type>::value,
		_Invoker_pmf_object,
		_Invoker_pmf_pointer>::type
	{	
	};

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, false, true>
		: _If<is_base_of<
			typename _Is_member_object_pointer<_Decayed>::_Class_type,
			typename decay<_Ty1>::type>::value,
		_Invoker_pmd_object,
		_Invoker_pmd_pointer>::type
	{	
	};

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, false, false>
		: _Invoker_functor
	{	
	};

template<class _Callable,
	class... _Types>
	struct _Invoker;

template<class _Callable>
	struct _Invoker<_Callable>
		: _Invoker_functor
	{	
	};

template<class _Callable,
	class _Ty1,
	class... _Types2>
	struct _Invoker<_Callable, _Ty1, _Types2...>
		: _Invoker1<_Callable, _Ty1>
	{	
	};

template<class _Callable,
	class... _Types> inline
	auto invoke(_Callable&& _Obj, _Types&&... _Args)
	-> decltype(_Invoker<_Callable, _Types...>::_Call(
		::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...))
	{	
	return (_Invoker<_Callable, _Types...>::_Call(
		::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...));
	}

template<class _Rx,
	bool = is_void<_Rx>::value>
	struct _Forced
	{	
	};

struct _Unforced
	{	
	};

template<class _Cv_void,
	class... _Valtys> inline
	void _Invoke_ret(_Forced<_Cv_void, true>, _Valtys&&... _Vals)
	{	
	::std:: invoke(::std:: forward<_Valtys>(_Vals)...);
	}

template<class _Rx,
	class... _Valtys> inline
	_Rx _Invoke_ret(_Forced<_Rx, false>, _Valtys&&... _Vals)
	{	
	return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
	}

template<class... _Valtys> inline
	auto _Invoke_ret(_Forced<_Unforced, false>, _Valtys&&... _Vals)
	-> decltype(::std:: invoke(::std:: forward<_Valtys>(_Vals)...))
	{	
	return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
	}

	
struct _Unique_tag_result_of
	{	
	};

template<class _Void,
	class... _Types>
	struct _Result_of
	{	
	};

template<class... _Types>
	struct _Result_of<
		void_t<
			_Unique_tag_result_of,	
			decltype(::std:: invoke(::std:: declval<_Types>()...))>,
		_Types...>
	{	
	typedef decltype(::std:: invoke(::std:: declval<_Types>()...)) type;
	};

template<class _Fty>
	struct result_of
	{	
	static_assert(_Always_false<_Fty>::value,
		"result_of<CallableType> is invalid; use "
		"result_of<CallableType(zero or more argument types)> instead.");
	};









template<class _Fty, class... _Args> struct result_of<_Fty __cdecl (_Args...)> : _Result_of<void, _Fty, _Args...> { };  template<class _Fty, class... _Args> struct result_of<_Fty __fastcall (_Args...)> : _Result_of<void, _Fty, _Args...> { }; template<class _Fty, class... _Args> struct result_of<_Fty __stdcall (_Args...)> : _Result_of<void, _Fty, _Args...> { }; template<class _Fty, class... _Args> struct result_of<_Fty __vectorcall (_Args...)> : _Result_of<void, _Fty, _Args...> { };


	
template<class _Ty,
	class = void>
	struct _Weak_result_type
	{	
	};

template<class _Ty>
	struct _Weak_result_type<_Ty, void_t<
		typename _Ty::result_type> >
	{	
	typedef typename _Ty::result_type result_type;
	};

template<class _Ty,
	class = void>
	struct _Weak_argument_type
		: _Weak_result_type<_Ty>
	{	
	};

template<class _Ty>
	struct _Weak_argument_type<_Ty, void_t<
		typename _Ty::argument_type> >
		: _Weak_result_type<_Ty>
	{	
	typedef typename _Ty::argument_type argument_type;
	};

template<class _Ty,
	class = void>
	struct _Weak_binary_args
		: _Weak_argument_type<_Ty>
	{	
	};

template<class _Ty>
	struct _Weak_binary_args<_Ty, void_t<
		typename _Ty::first_argument_type,
		typename _Ty::second_argument_type> >
		: _Weak_argument_type<_Ty>
	{	
	typedef typename _Ty::first_argument_type first_argument_type;
	typedef typename _Ty::second_argument_type second_argument_type;
	};

template<class _Ty>
	struct _Weak_types
	{	
	typedef _Is_function<typename remove_pointer<_Ty>::type> _Is_f_or_pf;
	typedef _Is_memfunptr<typename remove_cv<_Ty>::type> _Is_pmf;
	typedef typename _If<_Is_f_or_pf::_Bool_type::value, _Is_f_or_pf,
		typename _If<_Is_pmf::_Bool_type::value, _Is_pmf,
		_Weak_binary_args<_Ty> >::type>::type type;
	};

	
template<class _Ty>
	class reference_wrapper
		: public _Weak_types<_Ty>::type
	{	
public:
	static_assert(is_object<_Ty>::value || is_function<_Ty>::value,
		"reference_wrapper<T> requires T to be an object type "
		"or a function type.");

	typedef _Ty type;

	reference_wrapper(_Ty& _Val) noexcept
		: _Ptr(::std:: addressof(_Val))
		{	
		}

	operator _Ty&() const noexcept
		{	
		return (*_Ptr);
		}

	_Ty& get() const noexcept
		{	
		return (*_Ptr);
		}

	template<class... _Types>
		auto operator()(_Types&&... _Args) const
		-> decltype(::std:: invoke(get(), ::std:: forward<_Types>(_Args)...))
		{	
		return (::std:: invoke(get(), ::std:: forward<_Types>(_Args)...));
		}

	reference_wrapper(_Ty&&) = delete;

private:
	_Ty *_Ptr;
	};

	
template<class _Ty> inline
	reference_wrapper<_Ty>
		ref(_Ty& _Val) noexcept
	{	
	return (reference_wrapper<_Ty>(_Val));
	}

template<class _Ty>
	void ref(const _Ty&&) = delete;

template<class _Ty> inline
	reference_wrapper<_Ty>
		ref(reference_wrapper<_Ty> _Val) noexcept
	{	
	return (::std:: ref(_Val.get()));
	}

template<class _Ty> inline
	reference_wrapper<const _Ty>
		cref(const _Ty& _Val) noexcept
	{	
	return (reference_wrapper<const _Ty>(_Val));
	}

template<class _Ty>
	void cref(const _Ty&&) = delete;

template<class _Ty> inline
	reference_wrapper<const _Ty>
		cref(reference_wrapper<_Ty> _Val) noexcept
	{	
	return (::std:: cref(_Val.get()));
	}

	
template<class _Ty>
	struct _Unrefwrap_helper
	{	
	typedef _Ty type;
	static constexpr bool _Is_refwrap = false;
	};

template<class _Ty>
	struct _Unrefwrap_helper<reference_wrapper<_Ty> >
	{	
	typedef _Ty& type;
	static constexpr bool _Is_refwrap = true;
	};

template<class _Ty>
	struct _Unrefwrap
	{	
	typedef typename decay<_Ty>::type _Ty1;
	typedef typename _Unrefwrap_helper<_Ty1>::type type;
	static constexpr bool _Is_refwrap = _Unrefwrap_helper<_Ty1>::_Is_refwrap;
	};


namespace tr1 {	
using ::std:: cref;
using ::std:: ref;
using ::std:: reference_wrapper;
using ::std:: result_of;
	}	
#line 1680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

		
template<class _Ty>
	struct _Is_swappable;

		
template<class _Ty>
	struct _Is_nothrow_swappable;

		




#line 1695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<class _Ty,
	class = void> inline
#line 1698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
	void swap(_Ty&, _Ty&)
		noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value);
#line 1701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

template<class _Ty,
	size_t _Size,
	class = typename enable_if<_Is_swappable<_Ty>::value>::type> inline
	void swap(_Ty (&)[_Size], _Ty (&)[_Size])
		noexcept(_Is_nothrow_swappable<_Ty>::value);

		
template<class _Ty1,
	class _Ty2,
	class = void>
	struct _Swappable_with_helper
		: false_type
	{	
	};

struct _Swappable_with_helper_unique_type {}; 
template<class _Ty1,
	class _Ty2>
	struct _Swappable_with_helper<_Ty1, _Ty2, void_t<
		_Swappable_with_helper_unique_type,
		decltype(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))>>
		: true_type
	{	
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Is_swappable_with
		: conjunction<
			_Swappable_with_helper<_Ty1, _Ty2>,
			_Swappable_with_helper<_Ty2, _Ty1>>::type
	{	
		
	};

		
template<class _Ty>
	struct _Is_swappable
		: _Is_swappable_with<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<_Ty>::type>::type
	{	
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Swap_cannot_throw
	{	
		
		

	static constexpr bool value = 
		noexcept(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))
		&& noexcept(swap(::std:: declval<_Ty2>(), ::std:: declval<_Ty1>()));


#line 1761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
	using type = bool_constant<value>;
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Is_nothrow_swappable_with
		: conjunction<
			_Is_swappable_with<_Ty1, _Ty2>,
			_Swap_cannot_throw<_Ty1, _Ty2>>::type
	{	
		
	};

		
template<class _Ty>
	struct _Is_nothrow_swappable
		: _Is_nothrow_swappable_with<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<_Ty>::type>::type
	{	
	};

































#line 1817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

		
template<class _Ty>
	using remove_const_t = typename remove_const<_Ty>::type;

template<class _Ty>
	using remove_volatile_t = typename remove_volatile<_Ty>::type;

template<class _Ty>
	using remove_cv_t = typename remove_cv<_Ty>::type;

template<class _Ty>
	using add_const_t = typename add_const<_Ty>::type;

template<class _Ty>
	using add_volatile_t = typename add_volatile<_Ty>::type;

template<class _Ty>
	using add_cv_t = typename add_cv<_Ty>::type;

template<class _Ty>
	using remove_reference_t = typename remove_reference<_Ty>::type;

template<class _Ty>
	using add_lvalue_reference_t = typename add_lvalue_reference<_Ty>::type;

template<class _Ty>
	using add_rvalue_reference_t = typename add_rvalue_reference<_Ty>::type;

template<class _Ty>
	using make_signed_t = typename make_signed<_Ty>::type;

template<class _Ty>
	using make_unsigned_t = typename make_unsigned<_Ty>::type;

template<class _Ty>
	using remove_extent_t = typename remove_extent<_Ty>::type;

template<class _Ty>
	using remove_all_extents_t = typename remove_all_extents<_Ty>::type;

template<class _Ty>
	using remove_pointer_t = typename remove_pointer<_Ty>::type;

template<class _Ty>
	using add_pointer_t = typename add_pointer<_Ty>::type;

template<size_t _Len,
	size_t _Align = alignment_of<max_align_t>::value>
	using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

template<size_t _Len,
	class... _Types>
	using aligned_union_t = typename aligned_union<_Len, _Types...>::type;

template<class _Ty>
	using decay_t = typename decay<_Ty>::type;

template<bool _Test,
	class _Ty = void>
	using enable_if_t = typename enable_if<_Test, _Ty>::type;

template<bool _Test,
	class _Ty1,
	class _Ty2>
	using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

template<class... _Ty>
	using common_type_t = typename common_type<_Ty...>::type;

template<class _Ty>
	using underlying_type_t = typename underlying_type<_Ty>::type;

template<class _Ty>
	using result_of_t = typename result_of<_Ty>::type;

	
 
template<class _Ty>
	constexpr bool is_void_v = is_void<_Ty>::value;
template<class _Ty>
	constexpr bool is_null_pointer_v = is_null_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_array_v = is_array<_Ty>::value;
template<class _Ty>
	constexpr bool is_pointer_v = is_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_lvalue_reference_v = is_lvalue_reference<_Ty>::value;
template<class _Ty>
	constexpr bool is_rvalue_reference_v = is_rvalue_reference<_Ty>::value;
template<class _Ty>
	constexpr bool is_member_object_pointer_v = is_member_object_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_member_function_pointer_v = is_member_function_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_enum_v = is_enum<_Ty>::value;
template<class _Ty>
	constexpr bool is_union_v = is_union<_Ty>::value;
template<class _Ty>
	constexpr bool is_class_v = is_class<_Ty>::value;
template<class _Ty>
	constexpr bool is_reference_v = is_reference<_Ty>::value;
template<class _Ty>
	constexpr bool is_fundamental_v = is_fundamental<_Ty>::value;
template<class _Ty>
	constexpr bool is_object_v = is_object<_Ty>::value;
template<class _Ty>
	constexpr bool is_scalar_v = is_scalar<_Ty>::value;
template<class _Ty>
	constexpr bool is_compound_v = is_compound<_Ty>::value;
template<class _Ty>
	constexpr bool is_member_pointer_v = is_member_pointer<_Ty>::value;
template<class _Ty>
	constexpr bool is_const_v = is_const<_Ty>::value;
template<class _Ty>
	constexpr bool is_volatile_v = is_volatile<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivial_v = is_trivial<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_copyable_v = is_trivially_copyable<_Ty>::value;
template<class _Ty>
	constexpr bool is_standard_layout_v = is_standard_layout<_Ty>::value;
template<class _Ty>
	constexpr bool is_pod_v = is_pod<_Ty>::value;
template<class _Ty>
	constexpr bool is_literal_type_v = is_literal_type<_Ty>::value;
template<class _Ty>
	constexpr bool is_empty_v = is_empty<_Ty>::value;
template<class _Ty>
	constexpr bool is_polymorphic_v = is_polymorphic<_Ty>::value;
template<class _Ty>
	constexpr bool is_abstract_v = is_abstract<_Ty>::value;
template<class _Ty>
	constexpr bool is_final_v = is_final<_Ty>::value;
template<class _Ty>
	constexpr bool is_signed_v = is_signed<_Ty>::value;
template<class _Ty>
	constexpr bool is_unsigned_v = is_unsigned<_Ty>::value;
template<class _Ty,
	class... _Args>
	constexpr bool is_constructible_v = is_constructible<_Ty, _Args...>::value;
template<class _Ty>
	constexpr bool is_default_constructible_v = is_default_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_copy_constructible_v = is_copy_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_move_constructible_v = is_move_constructible<_Ty>::value;
template<class _Ty,
	class _Uty>
	constexpr bool is_assignable_v = is_assignable<_Ty, _Uty>::value;
template<class _Ty>
	constexpr bool is_copy_assignable_v = is_copy_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_move_assignable_v = is_move_assignable<_Ty>::value;






#line 1978 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<class _Ty>
	constexpr bool is_destructible_v = is_destructible<_Ty>::value;
template<class _Ty,
	class... _Args>
	constexpr bool is_trivially_constructible_v = is_trivially_constructible<_Ty, _Args...>::value;
template<class _Ty>
	constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<_Ty>::value;
template<class _Ty,
	class _Uty>
	constexpr bool is_trivially_assignable_v = is_trivially_assignable<_Ty, _Uty>::value;
template<class _Ty>
	constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_trivially_destructible_v = is_trivially_destructible<_Ty>::value;
template<class _Ty,
	class... _Args>
	constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<_Ty, _Args...>::value;
template<class _Ty>
	constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<_Ty>::value;
template<class _Ty>
	constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<_Ty>::value;
template<class _Ty,
	class _Uty>
	constexpr bool is_nothrow_assignable_v = is_nothrow_assignable<_Ty, _Uty>::value;
template<class _Ty>
	constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<_Ty>::value;
template<class _Ty>
	constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<_Ty>::value;






#line 2021 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<class _Ty>
	constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<_Ty>::value;
template<class _Ty>
	constexpr bool has_virtual_destructor_v = has_virtual_destructor<_Ty>::value;
template<class _Ty>
	constexpr size_t alignment_of_v = alignment_of<_Ty>::value;
template<class _Ty>
	constexpr size_t rank_v = rank<_Ty>::value;
template<class _Ty,
	unsigned int _Ix = 0>
	constexpr size_t extent_v = extent<_Ty, _Ix>::value;
template<class _Base,
	class _Derived>
	constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;
template<class _From,
	class _To>
	constexpr bool is_convertible_v = is_convertible<_From, _To>::value;
template<class... _Traits>
	constexpr bool conjunction_v = conjunction<_Traits...>::value;
template<class... _Traits>
	constexpr bool disjunction_v = disjunction<_Traits...>::value;
template<class _Trait>
	constexpr bool negation_v = negation<_Trait>::value;
 #line 2045 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 2052 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#line 2053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"






#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {

  


  



  




  


  #line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

__declspec(dllimport) bool __cdecl uncaught_exception() noexcept;
__declspec(dllimport) int __cdecl uncaught_exceptions() noexcept;

}

 

#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {







    
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"















typedef struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
} _HEAPINFO;








   
void* __cdecl _alloca(  size_t _Size);





    __declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);

     
    __declspec(dllimport) int __cdecl _heapmin(void);

    
        __declspec(dllimport) int __cdecl _heapwalk(  _HEAPINFO* _EntryInfo);
    #line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"

    
          __declspec(dllimport) int __cdecl _heapchk(void);
        __declspec(dllimport) int __cdecl _resetstkoflw(void);
    #line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
     
    
    
    

    


        
    #line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"

    typedef char __static_assert_t[(sizeof(unsigned int) <= 8) != 0];


    #pragma warning(push)
    #pragma warning(disable:6540)

    __inline void* _MarkAllocaS(   void* _Ptr, unsigned int _Marker)
    {
        if (_Ptr)
        {
            *((unsigned int*)_Ptr) = _Marker;
            _Ptr = (char*)_Ptr + 8;
        }
        return _Ptr;
    }

    __inline size_t _MallocaComputeSize(size_t _Size)
    {
        size_t _MarkedSize = _Size + 8;
        return _MarkedSize > _Size ? _MarkedSize : 0;
    }

    #pragma warning(pop)

#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"





    
        
        




    #line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"












#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"




#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"
#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"

    

    #pragma warning(push)
    #pragma warning(disable: 6014)
    __inline void __cdecl _freea(    void* _Memory)
    {
        unsigned int _Marker;
        if (_Memory)
        {
            _Memory = (char*)_Memory - 8;
            _Marker = *(unsigned int*)_Memory;
            if (_Marker == 0xDDDD)
            {
                free(_Memory);
            }
            





        }
    }
    #pragma warning(pop)

#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"




    
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\malloc.h"



} __pragma(pack(pop))
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* terminate_handler )();
typedef void (__cdecl* terminate_function)();








    __declspec(dllimport) __declspec(noreturn) void __cdecl abort();
    __declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw();

    

        __declspec(dllimport) terminate_handler __cdecl set_terminate(
              terminate_handler _NewTerminateHandler
            ) throw();

        __declspec(dllimport) terminate_handler __cdecl _get_terminate();

    #line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"

#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"

} __pragma(pack(pop))

#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_terminate.h"
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"



__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* unexpected_handler )();
typedef void (__cdecl* unexpected_function)();






struct _EXCEPTION_POINTERS;


    
    __declspec(dllimport) __declspec(noreturn) void __cdecl unexpected() throw(...);

    

        __declspec(dllimport) unexpected_handler __cdecl set_unexpected(
              unexpected_handler _NewUnexpectedHandler
            ) throw();

        __declspec(dllimport) unexpected_handler __cdecl _get_unexpected();

        typedef void (__cdecl* _se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);

        __declspec(dllimport) _se_translator_function __cdecl _set_se_translator(
              _se_translator_function _NewSETranslator
            );

    #line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"

    class type_info;

    __declspec(dllimport) int __cdecl _is_exception_typeof(
          type_info const&     _Type,
          _EXCEPTION_POINTERS* _ExceptionPtr
        );

    __declspec(dllimport) bool __cdecl __uncaught_exception();
    __declspec(dllimport) int  __cdecl __uncaught_exceptions();

#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"

} __pragma(pack(pop))

#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"





#pragma pack(push, 8)


__pragma(pack(push, 8)) extern "C" {

struct __std_exception_data
{
    char const* _What;
    bool        _DoFree;
};

__declspec(dllimport) void __cdecl __std_exception_copy(
       __std_exception_data const* _From,
      __std_exception_data*       _To
    );

__declspec(dllimport) void __cdecl __std_exception_destroy(
      __std_exception_data* _Data
    );

} __pragma(pack(pop))



namespace std {

class exception
{
public:

    exception() throw()
        : _Data()
    {
    }

    explicit exception(char const* const _Message) throw()
        : _Data()
    {
        __std_exception_data _InitData = { _Message, true };
        __std_exception_copy(&_InitData, &_Data);
    }

    exception(char const* const _Message, int) throw()
        : _Data()
    {
        _Data._What = _Message;
    }

    exception(exception const& _Other) throw()
        : _Data()
    {
        __std_exception_copy(&_Other._Data, &_Data);
    }

    exception& operator=(exception const& _Other) throw()
    {
        if (this == &_Other)
        {
            return *this;
        }

        __std_exception_destroy(&_Data);
        __std_exception_copy(&_Other._Data, &_Data);
        return *this;
    }

    virtual ~exception() throw()
    {
        __std_exception_destroy(&_Data);
    }

    virtual char const* what() const
    {
        return _Data._What ? _Data._What : "Unknown exception";
    }

private:

    __std_exception_data _Data;
};

class bad_exception
    : public exception
{
public:

    bad_exception() throw()
        : exception("bad exception", 1)
    {
    }
};

class bad_alloc
    : public exception
{
public:

    bad_alloc() throw()
        : exception("bad allocation", 1)
    {
    }

private:

    friend class bad_array_new_length;

    bad_alloc(char const* const _Message) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_array_new_length
    : public bad_alloc
{
public:

    bad_array_new_length() throw()
        : bad_alloc("bad array new length")
    {
    }
};

} 

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
#pragma pack(pop)





#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

namespace std {

using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);


inline terminate_handler __cdecl get_terminate() noexcept
	{	
	return (_get_terminate());
	}

inline unexpected_handler __cdecl get_unexpected() noexcept
	{	
	return (_get_unexpected());
	}
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

}

 




































































































































































#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"









#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

__declspec(dllimport) void __cdecl __ExceptionPtrCreate(  void*);
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy(  void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopy(  void*,   const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrAssign(  void*,   const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare(  const void*,   const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrToBool(  const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrSwap(  void*,   void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException(  void*);
[[noreturn]] __declspec(dllimport) void __cdecl __ExceptionPtrRethrow(  const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException(
	  void*,   const void*,   const void*);

namespace std {

class exception_ptr
	{
public:
	exception_ptr() throw ()
		{
		__ExceptionPtrCreate(this);
		}

	exception_ptr(nullptr_t) throw ()
		{
		__ExceptionPtrCreate(this);
		}

	~exception_ptr() throw ()
		{
		__ExceptionPtrDestroy(this);
		}

	exception_ptr(const exception_ptr& _Rhs) throw ()
		{
		__ExceptionPtrCopy(this, &_Rhs);
		}

	exception_ptr& operator=(const exception_ptr& _Rhs) throw ()
		{
		__ExceptionPtrAssign(this, &_Rhs);
		return *this;
		}

	exception_ptr& operator=(nullptr_t) throw ()
		{
		exception_ptr _Ptr;
		__ExceptionPtrAssign(this, &_Ptr);
		return *this;
		}

	explicit operator bool() const throw ()
		{
		return __ExceptionPtrToBool(this);
		}

	[[noreturn]] void _RethrowException() const
		{
		__ExceptionPtrRethrow(this);
		}

	static exception_ptr _Current_exception() throw ()
		{
		exception_ptr _Retval;
		__ExceptionPtrCurrentException(&_Retval);
		return _Retval;
		}

	static exception_ptr _Copy_exception(  void* _Except,   const void* _Ptr)
		{
		exception_ptr _Retval = 0;
		if (!_Ptr)
			{
			
			return _Retval;
			}
		__ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
		return _Retval;
		}

private:
	void* _Data1;
	void* _Data2;
	};

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs) throw ()
	{
	__ExceptionPtrSwap(&_Lhs, &_Rhs);
	}

inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return __ExceptionPtrCompare(&_Lhs, &_Rhs);
	}

inline bool operator==(nullptr_t, const exception_ptr& _Rhs) throw ()
	{
	return !_Rhs;
	}

inline bool operator==(const exception_ptr& _Lhs, nullptr_t) throw ()
	{
	return !_Lhs;
	}

inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline exception_ptr current_exception() noexcept
	{
	return exception_ptr::_Current_exception();
	}

[[noreturn]] inline void rethrow_exception(  exception_ptr _Ptr)
	{
	_Ptr._RethrowException();
	}

template<class _Ex> void *__GetExceptionInfo(_Ex);

template<class _Ex> exception_ptr make_exception_ptr(_Ex _Except) noexcept
	{
	return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
	}

	
class nested_exception
	{	
public:
	nested_exception() noexcept
		: _Exc(::std:: current_exception())
		{	
		}

	nested_exception(const nested_exception&) noexcept = default;
	nested_exception& operator=(const nested_exception&) noexcept = default;
	virtual ~nested_exception() noexcept = default;

	[[noreturn]] void rethrow_nested() const
		{	
		if (_Exc)
			::std:: rethrow_exception(_Exc);
		else
			::std:: terminate();
		}

	::std:: exception_ptr nested_ptr() const noexcept
		{	
		return (_Exc);
		}

private:
	::std:: exception_ptr _Exc;
	};

	
template<class _Ty,
	class _Uty>
	struct _With_nested
		: _Uty, nested_exception
	{	
	explicit _With_nested(_Ty&& _Arg)
		: _Uty(::std:: forward<_Ty>(_Arg)), nested_exception()
		{	
		}
	};

template<class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, true_type)
	{	
	typedef typename remove_reference<_Ty>::type _Uty;
	typedef _With_nested<_Ty, _Uty> _Glued;

	throw _Glued(::std:: forward<_Ty>(_Arg));
	}

template<class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, false_type)
	{	
	typedef typename decay<_Ty>::type _Decayed;

	throw _Decayed(::std:: forward<_Ty>(_Arg));
	}

template<class _Ty>
	[[noreturn]] inline void throw_with_nested(_Ty&& _Arg)
	{	
	typedef typename remove_reference<_Ty>::type _Uty;

	integral_constant<bool,
		is_class<_Uty>::value
		&& !is_base_of<nested_exception, _Uty>::value
		&& !is_final<_Uty>::value> _Tag;

	_Throw_with_nested(::std:: forward<_Ty>(_Arg), _Tag);
	}

	
template<class _Ty> inline
	void _Rethrow_if_nested(const _Ty *_Ptr, true_type)
	{	
	const auto _Nested = dynamic_cast<const nested_exception *>(_Ptr);

	if (_Nested)
		_Nested->rethrow_nested();
	}

template<class _Ty> inline
	void _Rethrow_if_nested(const _Ty *, false_type)
	{	
	}

template<class _Ty> inline
	void rethrow_if_nested(const _Ty& _Arg)
	{	
	integral_constant<bool,
		is_polymorphic<_Ty>::value
		&& (!is_base_of<nested_exception, _Ty>::value
			|| is_convertible<_Ty *, nested_exception *>::value)> _Tag;

	_Rethrow_if_nested(::std:: addressof(_Arg), _Tag);
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)

#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"


extern "C++" {

#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4985) 






    namespace std
    {
        struct nothrow_t { };

        extern nothrow_t const nothrow;
    }
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"

   
__declspec(allocator) void* __cdecl operator new(
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new(
    size_t                _Size,
    std::nothrow_t const&
    ) throw();

   
__declspec(allocator) void* __cdecl operator new[](
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new[](
    size_t                _Size,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block
    ) throw();

void __cdecl operator delete(
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete[](
    void* _Block
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void*  _Block,
    size_t _Size
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) throw();


    
       
    inline void* __cdecl operator new(size_t _Size,   void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) throw()
    {
        return;
    }
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"


    
       
    inline void* __cdecl operator new[](size_t _Size,   void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) throw()
    {
    }
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"



#pragma warning(pop)
#pragma pack(pop)

} 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"

 #pragma pack(push,8)
 #pragma warning(push,3)
 

  



namespace std {

		
 

typedef void (__cdecl * new_handler) ();
 #line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"

		
__declspec(dllimport) new_handler __cdecl set_new_handler(  new_handler)
	noexcept;	

__declspec(dllimport) new_handler __cdecl get_new_handler()
	noexcept;	
}

 
 #pragma warning(pop)
 #pragma pack(pop)

#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"





#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"






#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"



#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new( size_t, void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new[]( size_t, void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*, void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*, void*) throw();

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*,  size_t) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*,  size_t) throw();
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"









#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {





#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
    
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"


    




#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"























#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"




#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"


    


        #pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
    #line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"



   
__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}



   
__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}



















} __pragma(pack(pop))

#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

__pragma(pack(push, 8)) extern "C" {








    
    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

__declspec(dllimport) FILE* __cdecl __acrt_iob_func(unsigned);















__declspec(dllimport) wint_t __cdecl fgetwc(
      FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _fgetwchar(void);


__declspec(dllimport) wint_t __cdecl fputwc(
         wchar_t _Character,
      FILE*   _Stream);


__declspec(dllimport) wint_t __cdecl _fputwchar(
      wchar_t _Character
    );

 
__declspec(dllimport) wint_t __cdecl getwc(
      FILE* _Stream
    );

 
__declspec(dllimport) wint_t __cdecl getwchar(void);



 
__declspec(dllimport) wchar_t* __cdecl fgetws(
      wchar_t* _Buffer,
                              int      _BufferCount,
                           FILE*    _Stream
    );


__declspec(dllimport) int __cdecl fputws(
       wchar_t const* _Buffer,
      FILE*          _Stream
    );


 
__declspec(dllimport) wchar_t* __cdecl _getws_s(
      wchar_t* _Buffer,
                              size_t   _BufferCount
    );

extern "C++" { template <size_t _Size> inline   wchar_t* __cdecl _getws_s(  wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__declspec(dllimport) wint_t __cdecl putwc(
         wchar_t _Character,
      FILE*   _Stream
    );


__declspec(dllimport) wint_t __cdecl putwchar(
      wchar_t _Character
    );


__declspec(dllimport) int __cdecl _putws(
      wchar_t const* _Buffer
    );


__declspec(dllimport) wint_t __cdecl ungetwc(
         wint_t _Character,
      FILE*  _Stream
    );

 
__declspec(dllimport) FILE * __cdecl _wfdopen(
        int            _FileHandle,
      wchar_t const* _Mode
    );

  
__declspec(dllimport) FILE* __cdecl _wfopen(
      wchar_t const* _FileName,
      wchar_t const* _Mode
    );


__declspec(dllimport) errno_t __cdecl _wfopen_s(
      FILE**         _Stream,
                         wchar_t const* _FileName,
                         wchar_t const* _Mode
    );

 

__declspec(dllimport) FILE* __cdecl _wfreopen(
       wchar_t const* _FileName,
       wchar_t const* _Mode,
      FILE*          _OldStream
    );


__declspec(dllimport) errno_t __cdecl _wfreopen_s(
      FILE**         _Stream,
                         wchar_t const* _FileName,
                         wchar_t const* _Mode,
                        FILE*          _OldStream
    );

 
__declspec(dllimport) FILE* __cdecl _wfsopen(
      wchar_t const* _FileName,
      wchar_t const* _Mode,
        int            _ShFlag
    );

__declspec(dllimport) void __cdecl _wperror(
      wchar_t const* _ErrorMessage
    );



     
    __declspec(dllimport) FILE* __cdecl _wpopen(
          wchar_t const* _Command,
          wchar_t const* _Mode
        );

#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

__declspec(dllimport) int __cdecl _wremove(
      wchar_t const* _FileName
    );




 
__declspec(dllimport) __declspec(allocator) wchar_t* __cdecl _wtempnam(
      wchar_t const* _Directory,
      wchar_t const* _FilePrefix
    );



 

__declspec(dllimport) errno_t __cdecl _wtmpnam_s(
      wchar_t* _Buffer,
                              size_t   _BufferCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 __declspec(dllimport)  wchar_t* __cdecl _wtmpnam(  wchar_t *_Buffer);
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"









__declspec(dllimport) wint_t __cdecl _fgetwc_nolock(
      FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _fputwc_nolock(
         wchar_t _Character, 
      FILE*   _Stream
    );


__declspec(dllimport) wint_t __cdecl _getwc_nolock(
      FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _putwc_nolock(
         wchar_t _Character,
      FILE*   _Stream
    );


__declspec(dllimport) wint_t __cdecl _ungetwc_nolock(
         wint_t _Character,
      FILE*  _Stream
    );





#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
















__declspec(dllimport) int __cdecl __stdio_common_vfwprintf(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__inline int __cdecl _vfwprintf_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vfwprintf(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
}
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwprintf_s_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vfwprintf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwprintf_p_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwprintf_p(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
}
#line 383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vwprintf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_s_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vwprintf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_p(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl fwprintf(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)


#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_s_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl fwprintf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)


#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_p_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_p(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)


#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl wprintf(
        wchar_t const* const _Format,
    ...)


#line 609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 618 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_s_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 636 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl wprintf_s(
            wchar_t const* const _Format,
        ...)


#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_p(
        wchar_t const* const _Format,
    ...)


#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"








__declspec(dllimport) int __cdecl __stdio_common_vfwscanf(
                                        unsigned __int64 _Options,
                                     FILE*            _Stream,
        wchar_t const*   _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );


__inline int __cdecl _vfwscanf_l(
      FILE*                                const _Stream,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}
#line 724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vfwscanf(
      FILE*                                const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
}
#line 738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwscanf_s_l(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}
#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vfwscanf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

__inline int __cdecl _vwscanf_l(
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vwscanf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}
#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwscanf_s_l(
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vwscanf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }
#line 828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
__inline int __cdecl _fwscanf_l(
                                     FILE*          const _Stream,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)


#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

  
__inline int __cdecl fwscanf(
                           FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)


#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwscanf_s_l(
                                       FILE*          const _Stream,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 886 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl fwscanf_s(
                                 FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)


#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
__inline int __cdecl _wscanf_l(
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)


#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

  
__inline int __cdecl wscanf(
        wchar_t const* const _Format,
    ...)


#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wscanf_s_l(
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl wscanf_s(
            wchar_t const* const _Format,
        ...)


#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"









    





#line 998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__declspec(dllimport) int __cdecl __stdio_common_vswprintf(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

__declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

__declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
                                         size_t           _MaxCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

__declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
 
__inline int __cdecl _vsnwprintf_l(
           wchar_t*       const _Buffer,
                                             size_t         const _BufferCount,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
    )


#line 1056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(push)
#pragma warning(disable: 4793)

 

__inline int __cdecl _vsnwprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
                                         size_t         const _MaxCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vsnwprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vsnwprintf_s(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
                               size_t         const _MaxCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}
#line 1106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 __inline   int __cdecl _snwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, ...);  __inline   int __cdecl _vsnwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, va_list _Args);
#line 1115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(pop)

 
 
__inline int __cdecl _vsnwprintf(
        wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                   wchar_t const* _Format,
                                             va_list        _ArgList
    )


#line 1129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)
}
#line 1136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl _vsnwprintf_s(  wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_c_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_c(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_l(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)
}
#line 1202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl __vswprintf_l(
                         wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 1218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf(
               wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
}
#line 1233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl vswprintf(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                            va_list              _ArgList
    )


#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



     
    __inline int __cdecl vswprintf_s(
           wchar_t*       const _Buffer,
                                   size_t         const _BufferCount,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
#line 1287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl vswprintf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_p_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_p(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vscwprintf_l(_Format, 0, _ArgList);
}
#line 1367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf_p(
        wchar_t const* const _Format, 
                                  va_list              _ArgList
    )


#line 1396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vscwprintf_p_l(_Format, 0, _ArgList);
}
#line 1400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl __swprintf_l(
                         wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_l(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf(
               wchar_t*       const _Buffer,
        wchar_t const* const _Format,
    ...)


#line 1451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl swprintf(
               wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)


#line 1471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(push)


#pragma warning(disable:4793 4996)

 __inline   int __cdecl __swprintf_l(    wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, ...);  __inline   int __cdecl __vswprintf_l(    wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, va_list _Args);
#line 1494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 __inline   int __cdecl _swprintf(    wchar_t *_Buffer,     wchar_t const* _Format, ...);  __inline   int __cdecl _vswprintf(    wchar_t *_Buffer,     wchar_t const* _Format, va_list _Args);
#line 1501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(pop)

 

__inline int __cdecl _swprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



     
    __inline int __cdecl swprintf_s(
           wchar_t*       const _Buffer,
                                   size_t         const _BufferCount,
            wchar_t const* const _Format,
        ...)


#line 1536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 1547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl swprintf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_p_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_p(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)


#line 1586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_c_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_c(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)


#line 1627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1636 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _snwprintf_l(
        wchar_t*       const _Buffer,
                                          size_t         const _BufferCount,
         wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwprintf(
        wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                   wchar_t const* _Format,
    ...)


#line 1673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
                                         size_t         const _MaxCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwprintf_s(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
                               size_t         const _MaxCount,
        wchar_t const* const _Format,
    ...)


#line 1721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snwprintf_s(  wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
__inline int __cdecl _scwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1756 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _scwprintf(
        wchar_t const* const _Format,
    ...)


#line 1765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscwprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _scwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1793 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _scwprintf_p(
        wchar_t const* const _Format,
    ...)


#line 1802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscwprintf_p_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



    #pragma warning(push)
    #pragma warning(disable: 4141 4412 4793 4996 6054)

    

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
        inline int swprintf(
                       wchar_t*       const _Buffer,
                wchar_t const* const _Format,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            #pragma warning(suppress: 28719)
            _Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);       
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
        inline int __cdecl vswprintf(
                       wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            ) throw()
        {
            #pragma warning(suppress: 28719)
            return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
        inline int _swprintf_l(
                                 wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                             _locale_t      const _Locale,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
            _Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) 
        inline int __cdecl _vswprintf_l(
                                 wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                             _locale_t      const _Locale,
                                                    va_list              _ArgList
            ) throw()
        {
            return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
        }

    #line 1872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(pop)
#line 1875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"






#line 1882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"







 
__declspec(dllimport) int __cdecl __stdio_common_vswscanf(
                                        unsigned __int64 _Options,
              wchar_t const*   _Buffer,
                                        size_t           _BufferCount,
        wchar_t const*   _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );

 

__inline int __cdecl _vswscanf_l(
                             wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 1910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 1916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl vswscanf(
                             wchar_t const* _Buffer,
        wchar_t const* _Format,
                                  va_list        _ArgList
    )


#line 1927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
}
#line 1931 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswscanf_s_l(
                             wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 1949 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



     
    
    __inline int __cdecl vswscanf_s(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 1962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }
#line 1966 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 1968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl vswscanf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _Args) throw() { return vswscanf_s(_Buffer, _Size, _Format, _Args); } }
#line 1976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vsnwscanf_l(
              wchar_t const* const _Buffer,
                                        size_t         const _BufferCount,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
                                           va_list              _ArgList
    )


#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}
#line 1995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vsnwscanf_s_l(
                wchar_t const* const _Buffer,
                                          size_t         const _BufferCount,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
                                             va_list              _ArgList
    )


#line 2008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}
#line 2014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _swscanf_l(
                                      wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                                    _locale_t            _Locale,
    ...)


#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2034 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
  
__inline int __cdecl swscanf(
                            wchar_t const* const _Buffer,
        wchar_t const* const _Format,
    ...)


#line 2044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2053 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swscanf_s_l(
                                        wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"



     
    
    __inline int __cdecl swscanf_s(
                                  wchar_t const* const _Buffer,
            wchar_t const* const _Format,
        ...)


#line 2085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);  
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 2094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

#line 2096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _snwscanf_l(
              wchar_t const* const _Buffer,
                                        size_t         const _BufferCount,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)


#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _snwscanf(
        wchar_t const* const _Buffer,
                                  size_t         const _BufferCount,
            wchar_t const* const _Format,
    ...)


#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwscanf_s_l(
                wchar_t const* const _Buffer,
                                          size_t         const _BufferCount,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 2159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwscanf_s(
         wchar_t const* const _Buffer,
                                   size_t         const _BufferCount,
           wchar_t const* const _Format,
    ...)


#line 2179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"







} __pragma(pack(pop))

#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

__pragma(pack(push, 8)) extern "C" {































    
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"















    
    
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


typedef __int64 fpos_t;




__declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(
           FILE*   _Stream,
      char*** _Base,
      char*** _Pointer,
      int**   _Count
    );









    
    __declspec(dllimport) errno_t __cdecl clearerr_s(
          FILE* _Stream
        );

    
    __declspec(dllimport) errno_t __cdecl fopen_s(
          FILE**      _Stream,
                             char const* _FileName,
                             char const* _Mode
        );
    
    
     
    __declspec(dllimport) size_t __cdecl fread_s(
            void*  _Buffer,
                       size_t _BufferSize,
                                                                        size_t _ElementSize,
                                                                        size_t _ElementCount,
                                                                     FILE*  _Stream
        );
    
    
    __declspec(dllimport) errno_t __cdecl freopen_s(
          FILE**      _Stream,
                             char const* _FileName,
                             char const* _Mode,
                            FILE*       _OldStream
        );

     
    __declspec(dllimport) char* __cdecl gets_s(
          char*   _Buffer,
                           rsize_t _Size
        );

    
    __declspec(dllimport) errno_t __cdecl tmpfile_s(
            FILE** _Stream
        );

     
    
    __declspec(dllimport) errno_t __cdecl tmpnam_s(
          char*   _Buffer,
                           rsize_t _Size
        );

#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

__declspec(dllimport) void __cdecl clearerr(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl fclose(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fcloseall(void);

 
__declspec(dllimport) FILE* __cdecl _fdopen(
        int         _FileHandle,
      char const* _Mode
    );

 
__declspec(dllimport) int __cdecl feof(
      FILE* _Stream
    );

 
__declspec(dllimport) int __cdecl ferror(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl fflush(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl fgetc(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fgetchar(void);

 

__declspec(dllimport) int __cdecl fgetpos(
      FILE*   _Stream,
        fpos_t* _Position
    );

 

__declspec(dllimport) char* __cdecl fgets(
      char* _Buffer,
                           int   _MaxCount,
                        FILE* _Stream
    );

 
__declspec(dllimport) int __cdecl _fileno(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _flushall(void);

  
__declspec(dllimport) FILE* __cdecl fopen(
      char const* _FileName,
      char const* _Mode
    );


 

__declspec(dllimport) int __cdecl fputc(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fputchar(
      int _Character
    );

 

__declspec(dllimport) int __cdecl fputs(
       char const* _Buffer,
      FILE*       _Stream
    );


__declspec(dllimport) size_t __cdecl fread(
      void*  _Buffer,
                                                  size_t _ElementSize,
                                                  size_t _ElementCount,
                                               FILE*  _Stream
    );

 
  
__declspec(dllimport) FILE* __cdecl freopen(
       char const* _FileName,
       char const* _Mode,
      FILE*       _Stream
    );

 
__declspec(dllimport) FILE* __cdecl _fsopen(
      char const* _FileName,
      char const* _Mode,
        int         _ShFlag
    );

 

__declspec(dllimport) int __cdecl fsetpos(
      FILE*         _Stream,
         fpos_t const* _Position
    );

 

__declspec(dllimport) int __cdecl fseek(
      FILE* _Stream,
         long  _Offset,
         int   _Origin
    );

 

__declspec(dllimport) int __cdecl _fseeki64(
      FILE*   _Stream,
         __int64 _Offset,
         int     _Origin
    );

 
 
__declspec(dllimport) long __cdecl ftell(
      FILE* _Stream
    );

 
 
__declspec(dllimport) __int64 __cdecl _ftelli64(
      FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl fwrite(
      void const* _Buffer,
                                                size_t      _ElementSize,
                                                size_t      _ElementCount,
                                             FILE*       _Stream
    );

 
 
__declspec(dllimport) int __cdecl getc(
      FILE* _Stream
    );

 
__declspec(dllimport) int __cdecl getchar(void);

 
__declspec(dllimport) int __cdecl _getmaxstdio(void);

extern "C++" { template <size_t _Size> inline char* __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__declspec(dllimport) int __cdecl _getw(
      FILE* _Stream
    );

__declspec(dllimport) void __cdecl perror(
      char const* _ErrorMessage
    );



     
    
    __declspec(dllimport) int __cdecl _pclose(
          FILE* _Stream
        );

     
    __declspec(dllimport) FILE* __cdecl _popen(
          char const* _Command,
          char const* _Mode
        );

#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__declspec(dllimport) int __cdecl putc(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl putchar(
      int _Character
    );


__declspec(dllimport) int __cdecl puts(
      char const* _Buffer
    );

 

__declspec(dllimport) int __cdecl _putw(
         int   _Word, 
      FILE* _Stream
    );



__declspec(dllimport) int __cdecl remove(
      char const* _FileName
    );

 
__declspec(dllimport) int __cdecl rename(
      char const* _OldFileName,
      char const* _NewFileName
    );

__declspec(dllimport) int __cdecl _unlink(
      char const* _FileName
    );



    
    __declspec(dllimport) int __cdecl unlink(
          char const* _FileName
        );

#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



__declspec(dllimport) void __cdecl rewind(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _rmtmp(void);


__declspec(dllimport) void __cdecl setbuf(
                                                  FILE* _Stream,
        char* _Buffer
    );


__declspec(dllimport) int __cdecl _setmaxstdio(
      int _Maximum
    );

 

__declspec(dllimport) int __cdecl setvbuf(
                           FILE*  _Stream,
        char*  _Buffer,
                              int    _Mode,
                              size_t _Size
    );




#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__declspec(dllimport) __declspec(allocator) char* __cdecl _tempnam(
      char const* _DirectoryName,
      char const* _FilePrefix
    );



#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

  
__declspec(dllimport) FILE* __cdecl tmpfile(void);

extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(  char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 __declspec(dllimport)  char* __cdecl tmpnam(  char *_Buffer);
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__declspec(dllimport) int __cdecl ungetc(
         int   _Character,
      FILE* _Stream
    );








__declspec(dllimport) void __cdecl _lock_file(
      FILE* _Stream
    );

__declspec(dllimport) void __cdecl _unlock_file(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fclose_nolock(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fflush_nolock(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fgetc_nolock(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fputc_nolock(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl _fread_nolock(
      void*  _Buffer,
                                                  size_t _ElementSize,
                                                  size_t _ElementCount,
                                               FILE*  _Stream
    );


 
__declspec(dllimport) size_t __cdecl _fread_nolock_s(
      void*  _Buffer,
               size_t _BufferSize,
                                                                  size_t _ElementSize,
                                                                  size_t _ElementCount,
                                                               FILE*  _Stream
    );


__declspec(dllimport) int __cdecl _fseek_nolock(
      FILE* _Stream,
         long  _Offset,
         int   _Origin
    );


__declspec(dllimport) int __cdecl _fseeki64_nolock(
      FILE*   _Stream,
         __int64 _Offset,
         int     _Origin
    );

 
__declspec(dllimport) long __cdecl _ftell_nolock(
      FILE* _Stream
    );

 
__declspec(dllimport) __int64 __cdecl _ftelli64_nolock(
      FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl _fwrite_nolock(
      void const* _Buffer,
                                                size_t      _ElementSize,
                                                size_t      _ElementCount,
                                             FILE*       _Stream
    );


__declspec(dllimport) int __cdecl _getc_nolock(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _putc_nolock(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _ungetc_nolock(
         int   _Character,
      FILE* _Stream
    );






















#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



__declspec(dllimport) int* __cdecl __p__commode(void);




    
#line 590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"






#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"






__declspec(dllimport) int __cdecl __stdio_common_vfprintf(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

__declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__inline int __cdecl _vfprintf_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )


#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vfprintf(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_l(_Stream, _Format, 0, _ArgList);
}
#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vfprintf_s_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )


#line 667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl vfprintf_s(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vfprintf_p_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )


#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vfprintf_p(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
}
#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vprintf(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_s_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl vprintf_s(
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_p(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _fprintf_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl fprintf(
                            FILE*       const _Stream,
        char const* const _Format,
    ...)


#line 831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

__declspec(dllimport) int __cdecl _set_printf_count_output(
      int _Value
    );

__declspec(dllimport) int __cdecl _get_printf_count_output(void);


__inline int __cdecl _fprintf_s_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl fprintf_s(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)


#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _fprintf_p_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _fprintf_p(
                            FILE*       const _Stream,
        char const* const _Format,
    ...)


#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 942 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl printf(
        char const* const _Format,
    ...)


#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_s_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl printf_s(
            char const* const _Format,
        ...)


#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 996 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1007 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_p(
        char const* const _Format,
    ...)


#line 1024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"







__declspec(dllimport) int __cdecl __stdio_common_vfscanf(
                                        unsigned __int64 _Options,
                                     FILE*            _Stream,
        char const*      _Format,
                                    _locale_t        _Locale,
                                           va_list          _Arglist
    );


__inline int __cdecl _vfscanf_l(
                            FILE*       const _Stream,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}
#line 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vfscanf(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfscanf_l(_Stream, _Format, 0, _ArgList);
}
#line 1078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vfscanf_s_l(
                            FILE*       const _Stream,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"




    
    __inline int __cdecl vfscanf_s(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 1112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vscanf_l(
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 1128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vscanf(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}
#line 1141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vscanf_s_l(
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 1155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl vscanf_s(
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }
#line 1170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _fscanf_l(
                                     FILE*       const _Stream,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

  
__inline int __cdecl fscanf(
                           FILE*       const _Stream,
        char const* const _Format,
    ...)


#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _fscanf_s_l(
                                       FILE*       const _Stream,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 1219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl fscanf_s(
                                 FILE*       const _Stream,
            char const* const _Format,
        ...)


#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _scanf_l(
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 1259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

  
__inline int __cdecl scanf(
        char const* const _Format,
    ...)


#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _scanf_s_l(
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 1294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl scanf_s(
            char const* const _Format,
        ...)


#line 1313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"








 
__declspec(dllimport) int __cdecl __stdio_common_vsprintf(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
                                         size_t           _MaxCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
 
__inline int __cdecl _vsnprintf_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf(
        char*       const _Buffer,
                                          size_t      const _BufferCount,
                   char const* const _Format,
                                             va_list           _ArgList
    )


#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)
}
#line 1412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"










#line 1423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl vsnprintf(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
 
__inline int __cdecl _vsprintf_l(
        char*       const _Buffer,
                      char const* const _Format,
                    _locale_t   const _Locale,
                           va_list           _ArgList
    )


#line 1455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    #pragma warning(pop)
}
#line 1462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
 
__inline int __cdecl vsprintf(
               char*       const _Buffer,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
    #pragma warning(pop)
}
#line 1480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



     
    
    __inline int __cdecl vsprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
#line 1519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    
    extern "C++" { template <size_t _Size> inline   int __cdecl vsprintf_s(  char (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsprintf_p_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsprintf_p(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
                                         size_t      const _MaxCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list          _ArgList
    )


#line 1580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsnprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf_s(
       char*       const _Buffer,
                               size_t      const _BufferCount,
                               size_t      const _MaxCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}
#line 1605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl _vsnprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



     
    
    __inline int __cdecl vsnprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
                                   size_t      const _MaxCount,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }
#line 1633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    
    extern "C++" { template <size_t _Size> inline   int __cdecl vsnprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vscprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _vscprintf(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vscprintf_l(_Format, 0, _ArgList);
}
#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vscprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _vscprintf_p(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vscprintf_p_l(_Format, 0, _ArgList);
}
#line 1706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vsnprintf_c_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf_c(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _sprintf_l(
                         char*       const _Buffer,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl sprintf(
               char*       const _Buffer,
        char const* const _Format,
    ...)


#line 1776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable: 4996)
   int __cdecl sprintf(  char *_Buffer,  char const* _Format, ...);    int __cdecl vsprintf(  char *_Buffer,  char const* _Format, va_list _Args);
#line 1799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)

 

__inline int __cdecl _sprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



     
    
    __inline int __cdecl sprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
            char const* const _Format,
        ...)


#line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 1845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl sprintf_s(  char (&_Buffer)[_Size],     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _sprintf_p_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _sprintf_p(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)


#line 1883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
 
__inline int __cdecl _snprintf_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"










#line 1929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
 
__inline int __cdecl snprintf(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)


#line 1940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
#pragma warning(suppress:28719)    
    _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _snprintf(
        char*       const _Buffer,
                                          size_t      const _BufferCount,
                   char const* const _Format,
    ...)


#line 1960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
#pragma warning(suppress:28719)    
    _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

    int __cdecl _snprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, ...);     int __cdecl _vsnprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, va_list _Args);
#line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_c_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_c(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)


#line 2011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
                                         size_t      const _MaxCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 2033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2042 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_s(
       char*       const _Buffer,
                               size_t      const _BufferCount,
                               size_t      const _MaxCount,
        char const* const _Format,
    ...)


#line 2054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2063 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }
#line 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _scprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _scprintf(
        char const* const _Format,
    ...)


#line 2097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _scprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 2115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _scprintf_p(
        char const* const _Format,
    ...)


#line 2132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vscprintf_p(_Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"






__declspec(dllimport) int __cdecl __stdio_common_vsscanf(
                                        unsigned __int64 _Options,
              char const*      _Buffer,
                                        size_t           _BufferCount,
        char const*      _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );


__inline int __cdecl _vsscanf_l(
                             char const* const _Buffer,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 2166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 2172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl vsscanf(
                             char const* const _Buffer,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 2182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
}
#line 2186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _vsscanf_s_l(
                             char const* const _Buffer,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 2197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 2203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    #pragma warning(push)
    #pragma warning(disable:6530)

    
    __inline int __cdecl vsscanf_s(
                                 char const* const _Buffer,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 2218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }
#line 2222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

    extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(  char const (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 2229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
   
    #pragma warning(pop)

#line 2233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _sscanf_l(
                                      char const* const _Buffer,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 2243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

  
__inline int __cdecl sscanf(
                            char const* const _Buffer,
        char const* const _Format,
    ...)


#line 2261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _sscanf_s_l(
                                        char const* const _Buffer,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 2280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));
    _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



    
    __inline int __cdecl sscanf_s(
                                  char const* const _Buffer,
            char const* const _Format,
        ...)


#line 2300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = vsscanf_s(_Buffer, _Format, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 2314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#line 2316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable:6530)

 
__inline int __cdecl _snscanf_l(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 2330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

 
__inline int __cdecl _snscanf(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
                  char const* const _Format,
    ...)


#line 2353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



__inline int __cdecl _snscanf_s_l(
          char const* const _Buffer,
                                          size_t      const _BufferCount,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 2378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Locale))) + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"


__inline int __cdecl _snscanf_s(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
                char const* const _Format,
    ...)


#line 2401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(_ArgList = (va_list)(&const_cast<char&>(reinterpret_cast<const volatile char&>(_Format))) + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1))))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

#pragma warning(pop)



#line 2420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"










    

    


#line 2436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

    
    __declspec(dllimport) char* __cdecl tempnam(
          char const* _Directory,
          char const* _FilePrefix
        );

    

#line 2446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"

      __declspec(dllimport) int   __cdecl fcloseall(void);
              __declspec(dllimport) FILE* __cdecl fdopen(  int _FileHandle,   char const* _Format);
       __declspec(dllimport) int   __cdecl fgetchar(void);
              __declspec(dllimport) int   __cdecl fileno(  FILE* _Stream);
       __declspec(dllimport) int   __cdecl flushall(void);
       __declspec(dllimport) int   __cdecl fputchar(  int _Ch);
                __declspec(dllimport) int   __cdecl getw(  FILE* _Stream);
           __declspec(dllimport) int   __cdecl putw(  int _Ch,   FILE* _Stream);
               __declspec(dllimport) int   __cdecl rmtmp(void);

#line 2458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"



} __pragma(pack(pop))

#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"




extern "C"
{
extern


#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
__declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) int     __cdecl printf(const char*, ...);

extern


#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
__declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) int     __cdecl fprintf(FILE*, const char*, ...);
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl malloc(size_t) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl free(void*) ;

}





#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"









#line 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"



__pragma(pack(push, 8)) extern "C" {











    __declspec(dllimport) void __cdecl _wassert(
          wchar_t const* _Message,
          wchar_t const* _File,
            unsigned       _Line
        );

    




#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\assert.h"



} __pragma(pack(pop))
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

extern "C"
{






#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"



#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"


#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"




#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"



#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(dllimport) void __cdecl _wassert(
  const wchar_t *, const wchar_t *, unsigned);
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
}



















#line 199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

















#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"



#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new( size_t) throw(...);
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void*   __cdecl operator new[]( size_t) throw(...);
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*) throw();

extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete(void*,  size_t) throw();
extern         __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) void    __cdecl operator delete[](void*,  size_t) throw();
#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"



#line 234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

#line 238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"









#line 248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"








extern "C"
{
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"




















































#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) int            __cdecl abs(int) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) long int       __cdecl labs(long int) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) long long int          llabs(long long int) ;



#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl fabs(double x) ;








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  fabsf(float x) ;



extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    min(int, int);

extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned int           umin(unsigned int, unsigned int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llmin(long long int, long long int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned long long int ullmin(unsigned long long int, unsigned long long int);





















#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl fminf(float x, float y);
#line 290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

















#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl fmin(double x, double y);
#line 310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    max(int, int);

extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned int           umax(unsigned int, unsigned int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llmax(long long int, long long int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned long long int ullmax(unsigned long long int, unsigned long long int);





















#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl fmaxf(float x, float y);
#line 342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

















#line 360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl fmax(double, double);
#line 362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sin(double x) ;
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl cos(double x) ;


















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincos(double x, double *sptr, double *cptr) ;















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincosf(float x, float *sptr, float *cptr) ;












































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl tan(double x) ;




































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sqrt(double x) ;







































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 rsqrt(double x);





































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  rsqrtf(float x);
























































#line 784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl log2(double x);
#line 786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"






















#line 809 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl exp2(double x);
#line 811 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"






















#line 834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl exp2f(float x);
#line 836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"






















         
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 exp10(double x) ;






















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  exp10f(float x) ;














































#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl expm1(double x);
#line 932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"










































#line 975 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl expm1f(float x);
#line 977 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"




















































#line 1030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl log2f(float x);
#line 1032 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl log10(double x) ;






































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl log(double x) ;






























































































#line 1249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl log1p(double x);
#line 1251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"






























































































#line 1346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl log1pf(float x);
#line 1348 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"







































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl floor(double x) ;






































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl exp(double x) ;






























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl cosh(double x) ;





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sinh(double x) ;





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl tanh(double x) ;



































#line 1586 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl acosh(double x);
#line 1588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



































#line 1624 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl acoshf(float x);
#line 1626 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 1640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl asinh(double x);
#line 1642 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 1656 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl asinhf(float x);
#line 1658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















































#line 1710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl atanh(double x);
#line 1712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















































#line 1764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl atanhf(float x);
#line 1766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl ldexp(double x, int exp) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  ldexpf(float x, int exp) ;




















































#line 1931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl logb(double x);
#line 1933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"




















































#line 1986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl logbf(float x);
#line 1988 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



























#line 2016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) int    __cdecl ilogb(double x);
#line 2018 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



























#line 2046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) int    __cdecl ilogbf(float x);
#line 2048 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"









































































#line 2122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl scalbn(double x, int n);
#line 2124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"









































































#line 2198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl scalbnf(float x, int n);
#line 2200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"









































































#line 2274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl scalbln(double x, long int n);
#line 2276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"









































































#line 2350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl scalblnf(float x, long int n);
#line 2352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl frexp(double x, int *nptr) ;










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  frexpf(float x, int *nptr) ;














#line 2517 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl round(double x);
#line 2519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"














#line 2534 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl roundf(float x);
#line 2536 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"















#line 2552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long int __cdecl lround(double x);
#line 2554 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"















#line 2570 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long int __cdecl lroundf(float x);
#line 2572 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"















#line 2588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long long int __cdecl llround(double x);
#line 2590 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"















#line 2606 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long long int __cdecl llroundf(float x);
#line 2608 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

































#line 2642 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl rint(double x);
#line 2644 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
#line 2645 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"












#line 2658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl rintf(float x);
#line 2660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 2674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long int __cdecl lrint(double x);
#line 2676 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 2690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long int __cdecl lrintf(float x);
#line 2692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 2706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long long int __cdecl llrint(double x);
#line 2708 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 2722 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) long long int __cdecl llrintf(float x);
#line 2724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































#line 2775 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl nearbyint(double x);
#line 2777 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































#line 2828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl nearbyintf(float x);
#line 2830 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl ceil(double x) ;












#line 2902 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl trunc(double x);
#line 2904 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"












#line 2917 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl truncf(float x);
#line 2919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"























#line 2943 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl fdim(double x, double y);
#line 2945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"























#line 2969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl fdimf(float x, float y);
#line 2971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl atan2(double y, double x) ;






























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl atan(double x) ;






















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl acos(double x) ;































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl asin(double x) ;









































#line 3132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double __cdecl hypot(double x, double y);
#line 3134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


#line 3137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                rhypot(double x, double y) ;











































static __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl hypotf(float x, float y);


#line 3235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                 rhypotf(float x, float y) ;














































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl norm3d(double a, double b, double c) ;


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                rnorm3d(double a, double b, double c) ;
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl norm4d(double a, double b, double c, double d) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double rnorm4d(double a, double b, double c, double d) ;












































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double norm(int dim, double const * t) ;


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double rnorm(int dim, double const * t) ;



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float rnormf(int dim, float const * a) ;











































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float normf(int dim, float const * a) ;












































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float norm3df(float a, float b, float c) ;


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float rnorm3df(float a, float b, float c) ;
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float norm4df(float a, float b, float c, float d) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float rnorm4df(float a, float b, float c, float d) ;




















































































#line 3967 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl cbrt(double x);
#line 3969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















































































#line 4053 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl cbrtf(float x);
#line 4055 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 rcbrt(double x);

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  rcbrtf(float x);



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 sinpi(double x);



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  sinpif(float x);



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 cospi(double x);



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cospif(float x);





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincospi(double x, double *sptr, double *cptr);





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincospif(float x, float *sptr, float *cptr);























































































































































































































































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl pow(double x, double y) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl modf(double x, double *iptr) ;


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl fmod(double x, double y) ;






















































































#line 4955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl remainder(double x, double y);
#line 4957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"























































































#line 5045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl remainderf(float x, float y);
#line 5047 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















































#line 5099 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl remquo(double x, double y, int *quo);
#line 5101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















































#line 5153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl remquof(float x, float y, int *quo);
#line 5155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl j0(double x) ;









































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  j0f(float x) ;




























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl j1(double x) ;




























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  j1f(float x) ;










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl jn(int n, double x) ;










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  jnf(int n, float x) ;



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl y0(double x) ;



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  y0f(float x) ;



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl y1(double x) ;



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  y1f(float x) ;




















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl yn(int n, double x) ;




















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  ynf(int n, float x) ;


























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl cyl_bessel_i0(double x) ;

























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cyl_bessel_i0f(float x) ;


























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl cyl_bessel_i1(double x) ;

























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cyl_bessel_i1f(float x) ;



















































































#line 5947 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl erf(double x);
#line 5949 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"















































































#line 6029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl erff(float x);
#line 6031 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"




























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfinv(double y);
























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfinvf(float y);







































#line 6189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl erfc(double x);
#line 6191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



































#line 6227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl erfcf(float x);
#line 6229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





























































































































#line 6355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl lgamma(double x);
#line 6357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfcinv(double y);























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfcinvf(float y);

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 normcdfinv(double y);

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  normcdfinvf(float y);










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 normcdf(double y);










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  normcdff(float y);










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfcx(double x);










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfcxf(float x);






































































































































#line 6960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl lgammaf(float x);
#line 6962 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"










































































































#line 7069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl tgamma(double x);
#line 7071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"










































































































#line 7178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl tgammaf(float x);
#line 7180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"










#line 7191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl copysign(double x, double y);
#line 7193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"










#line 7204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl copysignf(float x, float y);
#line 7206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


































#line 7241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl nextafter(double x, double y);
#line 7243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


































#line 7278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl nextafterf(float x, float y);
#line 7280 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 7294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl nan(const char *tagp);
#line 7296 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













#line 7310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl nanf(const char *tagp);
#line 7312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinff(float) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnanf(float) ;








#line 7326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finite(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finitef(float) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbit(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnan(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinf(double) ;
#line 7332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbitf(float) ;































































































































































#line 7494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl fma(double x, double y, double z);
#line 7496 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



























































































































































#line 7652 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) float  __cdecl fmaf(float x, float y, float z);
#line 7654 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"







extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbitl(long double) ;




#line 7667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finitel(long double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinfl(long double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnanl(long double) ;
#line 7671 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





















#line 7693 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  acosf(float x) ;







































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  asinf(float x) ;







































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  atanf(float x) ;
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  atan2f(float y, float x) ;























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cosf(float x) ;









































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  sinf(float x) ;









































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  tanf(float x) ;























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  coshf(float x) ;








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  sinhf(float x) ;





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  tanhf(float x) ;


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  logf(float x) ;

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  expf(float x) ;


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  log10f(float x) ;






















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  modff(float x, float *iptr) ;



















































































































































































































































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  powf(float x, float y) ;




































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  sqrtf(float x) ;         


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  ceilf(float x) ;







































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  floorf(float x) ;


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  fmodf(float x, float y) ;










#line 8821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


}
#line 8825 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"












__pragma(pack(push, 8)) extern "C" {



#pragma warning(push)
#pragma warning(disable:4738) 
#pragma warning(disable:4820) 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"



    
    
    struct _exception
    {
        int    type;   
        char*  name;   
        double arg1;   
        double arg2;   
        double retval; 
    };

    
    
    
        

        struct _complex
        {
            double x, y; 
        };

        


#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
    #line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

typedef float float_t;
typedef double double_t;













    
        extern double const _HUGE;
    

#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"


    
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"


















































































void __cdecl _fperrraise(  int _Except);

  __declspec(dllimport) short __cdecl _dclass(  double _X);
  __declspec(dllimport) short __cdecl _ldclass(  long double _X);
  __declspec(dllimport) short __cdecl _fdclass(  float _X);

  __declspec(dllimport) int __cdecl _dsign(  double _X);
  __declspec(dllimport) int __cdecl _ldsign(  long double _X);
  __declspec(dllimport) int __cdecl _fdsign(  float _X);

  __declspec(dllimport) int __cdecl _dpcomp(  double _X,   double _Y);
  __declspec(dllimport) int __cdecl _ldpcomp(  long double _X,   long double _Y);
  __declspec(dllimport) int __cdecl _fdpcomp(  float _X,   float _Y);

  __declspec(dllimport) short __cdecl _dtest(  double* _Px);
  __declspec(dllimport) short __cdecl _ldtest(  long double* _Px);
  __declspec(dllimport) short __cdecl _fdtest(  float* _Px);

__declspec(dllimport) short __cdecl _d_int(  double* _Px,   short _Xexp);
__declspec(dllimport) short __cdecl _ld_int(  long double* _Px,   short _Xexp);
__declspec(dllimport) short __cdecl _fd_int(  float* _Px,   short _Xexp);

__declspec(dllimport) short __cdecl _dscale(  double* _Px,   long _Lexp);
__declspec(dllimport) short __cdecl _ldscale(  long double* _Px,   long _Lexp);
__declspec(dllimport) short __cdecl _fdscale(  float* _Px,   long _Lexp);

__declspec(dllimport) short __cdecl _dunscale(  short* _Pex,   double* _Px);
__declspec(dllimport) short __cdecl _ldunscale(  short* _Pex,   long double* _Px);
__declspec(dllimport) short __cdecl _fdunscale(  short* _Pex,   float* _Px);

  __declspec(dllimport) short __cdecl _dexp(  double* _Px,   double _Y,   long _Eoff);
  __declspec(dllimport) short __cdecl _ldexp(  long double* _Px,   long double _Y,   long _Eoff);
  __declspec(dllimport) short __cdecl _fdexp(  float* _Px,   float _Y,   long _Eoff);

  __declspec(dllimport) short __cdecl _dnorm(  unsigned short* _Ps);
  __declspec(dllimport) short __cdecl _fdnorm(  unsigned short* _Ps);

  __declspec(dllimport) double __cdecl _dpoly(  double _X,   double const* _Tab,   int _N);
  __declspec(dllimport) long double __cdecl _ldpoly(  long double _X,   long double const* _Tab,   int _N);
  __declspec(dllimport) float __cdecl _fdpoly(  float _X,   float const* _Tab,   int _N);

  __declspec(dllimport) double __cdecl _dlog(  double _X,   int _Baseflag);
  __declspec(dllimport) long double __cdecl _ldlog(  long double _X,   int _Baseflag);
  __declspec(dllimport) float __cdecl _fdlog(  float _X,   int _Baseflag);

  __declspec(dllimport) double __cdecl _dsin(  double _X,   unsigned int _Qoff);
  __declspec(dllimport) long double __cdecl _ldsin(  long double _X,   unsigned int _Qoff);
  __declspec(dllimport) float __cdecl _fdsin(  float _X,   unsigned int _Qoff);


typedef union
{   
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{   
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{   
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{   
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C,  _Inf_C,  _Nan_C,  _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C,  _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double      _Zero_C,  _Xbig_C;
extern const float       _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;




























extern "C++"
{
      inline int fpclassify(  float _X) throw()
    {
        return _fdtest(&_X);
    }

      inline int fpclassify(  double _X) throw()
    {
        return _dtest(&_X);
    }

      inline int fpclassify(  long double _X) throw()
    {
        return _ldtest(&_X);
    }

      inline bool signbit(  float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

      inline bool signbit(  double _X) throw()
    {
        return _dsign(_X) != 0;
    }

      inline bool signbit(  long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

      inline int _fpcomp(  float _X,   float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

      inline int _fpcomp(  double _X,   double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

      inline int _fpcomp(  long double _X,   long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {   
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {   
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {   
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {   
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {   
        typedef double _Type;   
    };

    template <> struct _Real_type<float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {   
        typedef long double _Type;
    };

    template <class _T1, class _T2>
      inline int _fpcomp(  _T1 _X,   _T2 _Y) throw()
    {   
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
      inline bool isfinite(  _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
      inline bool isinf(  _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
      inline bool isnan(  _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
      inline bool isnormal(  _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreaterequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isless(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isunordered(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}  
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"





  int       __cdecl abs(  int _X);
  long      __cdecl labs(  long _X);
  long long __cdecl llabs(  long long _X);

  double __cdecl acos(  double _X);
  double __cdecl asin(  double _X);
  double __cdecl atan(  double _X);
  double __cdecl atan2(  double _Y,   double _X);

  double __cdecl cos(  double _X);
  double __cdecl cosh(  double _X);
  double __cdecl exp(  double _X);
   double __cdecl fabs(  double _X);
  double __cdecl fmod(  double _X,   double _Y);
  double __cdecl log(  double _X);
  double __cdecl log10(  double _X);
  double __cdecl pow(  double _X,   double _Y);
  double __cdecl sin(  double _X);
  double __cdecl sinh(  double _X);
   double __cdecl sqrt(  double _X);
  double __cdecl tan(  double _X);
  double __cdecl tanh(  double _X);

  __declspec(dllimport) double    __cdecl acosh(  double _X);
  __declspec(dllimport) double    __cdecl asinh(  double _X);
  __declspec(dllimport) double    __cdecl atanh(  double _X);
  __declspec(dllimport)  double    __cdecl atof(  char const* _String);
  __declspec(dllimport)  double    __cdecl _atof_l(  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) double    __cdecl _cabs(  struct _complex _Complex_value);
  __declspec(dllimport) double    __cdecl cbrt(  double _X);
  __declspec(dllimport) double    __cdecl ceil(  double _X);
  __declspec(dllimport) double    __cdecl _chgsign(  double _X);
  __declspec(dllimport) double    __cdecl copysign(  double _Number,   double _Sign);
  __declspec(dllimport) double    __cdecl _copysign(  double _Number,   double _Sign);
  __declspec(dllimport) double    __cdecl erf(  double _X);
  __declspec(dllimport) double    __cdecl erfc(  double _X);
  __declspec(dllimport) double    __cdecl exp2(  double _X);
  __declspec(dllimport) double    __cdecl expm1(  double _X);
  __declspec(dllimport) double    __cdecl fdim(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl floor(  double _X);
  __declspec(dllimport) double    __cdecl fma(  double _X,   double _Y,   double _Z);
  __declspec(dllimport) double    __cdecl fmax(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl fmin(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl frexp(  double _X,   int* _Y);
  __declspec(dllimport) double    __cdecl hypot(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl _hypot(  double _X,   double _Y);
  __declspec(dllimport) int       __cdecl ilogb(  double _X);
  __declspec(dllimport) double    __cdecl ldexp(  double _X,   int _Y);
  __declspec(dllimport) double    __cdecl lgamma(  double _X);
  __declspec(dllimport) long long __cdecl llrint(  double _X);
  __declspec(dllimport) long long __cdecl llround(  double _X);
  __declspec(dllimport) double    __cdecl log1p(  double _X);
  __declspec(dllimport) double    __cdecl log2(  double _X);
  __declspec(dllimport) double    __cdecl logb(  double _X);
  __declspec(dllimport) long      __cdecl lrint(  double _X);
  __declspec(dllimport) long      __cdecl lround(  double _X);

int __cdecl _matherr(  struct _exception* _Except);

  __declspec(dllimport) double __cdecl modf(  double _X,   double* _Y);
  __declspec(dllimport) double __cdecl nan(  char const*);
  __declspec(dllimport) double __cdecl nearbyint(  double _X);
  __declspec(dllimport) double __cdecl nextafter(  double _X,   double _Y);
  __declspec(dllimport) double __cdecl nexttoward(  double _X,   long double _Y);
  __declspec(dllimport) double __cdecl remainder(  double _X,   double _Y);
  __declspec(dllimport) double __cdecl remquo(  double _X,   double _Y,   int* _Z);
  __declspec(dllimport) double __cdecl rint(  double _X);
  __declspec(dllimport) double __cdecl round(  double _X);
  __declspec(dllimport) double __cdecl scalbln(  double _X,   long _Y);
  __declspec(dllimport) double __cdecl scalbn(  double _X,   int _Y);
  __declspec(dllimport) double __cdecl tgamma(  double _X);
  __declspec(dllimport) double __cdecl trunc(  double _X);
  __declspec(dllimport) double __cdecl _j0(  double _X );
  __declspec(dllimport) double __cdecl _j1(  double _X );
  __declspec(dllimport) double __cdecl _jn(int _X,   double _Y);
  __declspec(dllimport) double __cdecl _y0(  double _X);
  __declspec(dllimport) double __cdecl _y1(  double _X);
  __declspec(dllimport) double __cdecl _yn(  int _X,   double _Y);

  __declspec(dllimport) float     __cdecl acoshf(  float _X);
  __declspec(dllimport) float     __cdecl asinhf(  float _X);
  __declspec(dllimport) float     __cdecl atanhf(  float _X);
  __declspec(dllimport) float     __cdecl cbrtf(  float _X);
  __declspec(dllimport) float     __cdecl _chgsignf(  float _X);
  __declspec(dllimport) float     __cdecl copysignf(  float _Number,   float _Sign);
  __declspec(dllimport) float     __cdecl _copysignf(  float _Number,   float _Sign);
  __declspec(dllimport) float     __cdecl erff(  float _X);
  __declspec(dllimport) float     __cdecl erfcf(  float _X);
  __declspec(dllimport) float     __cdecl expm1f(  float _X);
  __declspec(dllimport) float     __cdecl exp2f(  float _X);
  __declspec(dllimport) float     __cdecl fdimf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl fmaf(  float _X,   float _Y,   float _Z);
  __declspec(dllimport) float     __cdecl fmaxf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl fminf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl _hypotf(  float _X,   float _Y);
  __declspec(dllimport) int       __cdecl ilogbf(  float _X);
  __declspec(dllimport) float     __cdecl lgammaf(  float _X);
  __declspec(dllimport) long long __cdecl llrintf(  float _X);
  __declspec(dllimport) long long __cdecl llroundf(  float _X);
  __declspec(dllimport) float     __cdecl log1pf(  float _X);
  __declspec(dllimport) float     __cdecl log2f(  float _X);
  __declspec(dllimport) float     __cdecl logbf(  float _X);
  __declspec(dllimport) long      __cdecl lrintf(  float _X);
  __declspec(dllimport) long      __cdecl lroundf(  float _X);
  __declspec(dllimport) float     __cdecl nanf(  char const*);
  __declspec(dllimport) float     __cdecl nearbyintf(  float _X);
  __declspec(dllimport) float     __cdecl nextafterf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl nexttowardf(  float _X,   long double _Y);
  __declspec(dllimport) float     __cdecl remainderf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl remquof(  float _X,   float _Y,   int* _Z);
  __declspec(dllimport) float     __cdecl rintf(  float _X);
  __declspec(dllimport) float     __cdecl roundf(  float _X);
  __declspec(dllimport) float     __cdecl scalblnf(  float _X,   long _Y);
  __declspec(dllimport) float     __cdecl scalbnf(  float _X,   int _Y);
  __declspec(dllimport) float     __cdecl tgammaf(  float _X);
  __declspec(dllimport) float     __cdecl truncf(  float _X);



      __declspec(dllimport) int  __cdecl _set_SSE2_enable(  int _Flag);

















#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"














#line 607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

      __inline float __cdecl acosf(  float _X)
    {
        return (float)acos(_X);
    }

      __inline float __cdecl asinf(  float _X)
    {
        return (float)asin(_X);
    }

      __inline float __cdecl atan2f(  float _Y,   float _X)
    {
        return (float)atan2(_Y, _X);
    }

      __inline float __cdecl atanf(  float _X)
    {
        return (float)atan(_X);
    }

      __inline float __cdecl ceilf(  float _X)
    {
        return (float)ceil(_X);
    }

      __inline float __cdecl cosf(  float _X)
    {
        return (float)cos(_X);
    }

      __inline float __cdecl coshf(  float _X)
    {
        return (float)cosh(_X);
    }

      __inline float __cdecl expf(  float _X)
    {
        return (float)exp(_X);
    }

#line 649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"





#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

      __inline float __cdecl fabsf(  float _X)
    {
        return (float)fabs(_X);
    }

#line 662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"






#line 669 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

      __inline float __cdecl floorf(  float _X)
    {
        return (float)floor(_X);
    }

      __inline float __cdecl fmodf(  float _X,   float _Y)
    {
        return (float)fmod(_X, _Y);
    }

#line 681 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

  __inline float __cdecl frexpf(  float _X,   int *_Y)
{
    return (float)frexp(_X, _Y);
}

  __inline float __cdecl hypotf(  float _X,   float _Y)
{
    return _hypotf(_X, _Y);
}

  __inline float __cdecl ldexpf(  float _X,   int _Y)
{
    return (float)ldexp(_X, _Y);
}













#line 710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

      __inline float __cdecl log10f(  float _X)
    {
        return (float)log10(_X);
    }

      __inline float __cdecl logf(  float _X)
    {
        return (float)log(_X);
    }

      __inline float __cdecl modff(  float _X,   float* _Y)
    {
        double _F, _I;
        _F = modf(_X, &_I);
        *_Y = (float)_I;
        return (float)_F;
    }

      __inline float __cdecl powf(  float _X,   float _Y)
    {
        return (float)pow(_X, _Y);
    }

      __inline float __cdecl sinf(  float _X)
    {
        return (float)sin(_X);
    }

      __inline float __cdecl sinhf(  float _X)
    {
        return (float)sinh(_X);
    }

      __inline float __cdecl sqrtf(  float _X)
    {
        return (float)sqrt(_X);
    }

      __inline float __cdecl tanf(  float _X)
    {
        return (float)tan(_X);
    }

      __inline float __cdecl tanhf(  float _X)
    {
        return (float)tanh(_X);
    }

#line 760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

  __declspec(dllimport) long double __cdecl acoshl(  long double _X);

  __inline long double __cdecl acosl(  long double _X)
{
    return acos((double)_X);
}

  __declspec(dllimport) long double __cdecl asinhl(  long double _X);

  __inline long double __cdecl asinl(  long double _X)
{
    return asin((double)_X);
}

  __inline long double __cdecl atan2l(  long double _Y,   long double _X)
{
    return atan2((double)_Y, (double)_X);
}

  __declspec(dllimport) long double __cdecl atanhl(  long double _X);

  __inline long double __cdecl atanl(  long double _X)
{
    return atan((double)_X);
}

  __declspec(dllimport) long double __cdecl cbrtl(  long double _X);

  __inline long double __cdecl ceill(  long double _X)
{
    return ceil((double)_X);
}

  __inline long double __cdecl _chgsignl(  long double _X)
{
    return _chgsign((double)_X);
}

  __declspec(dllimport) long double __cdecl copysignl(  long double _Number,   long double _Sign);

  __inline long double __cdecl _copysignl(  long double _Number,   long double _Sign)
{
    return _copysign((double)_Number, (double)_Sign);
}

  __inline long double __cdecl coshl(  long double _X)
{
    return cosh((double)_X);
}

  __inline long double __cdecl cosl(  long double _X)
{
    return cos((double)_X);
}

  __declspec(dllimport) long double __cdecl erfl(  long double _X);
  __declspec(dllimport) long double __cdecl erfcl(  long double _X);

  __inline long double __cdecl expl(  long double _X)
{
    return exp((double)_X);
}

  __declspec(dllimport) long double __cdecl exp2l(  long double _X);
  __declspec(dllimport) long double __cdecl expm1l(  long double _X);

  __inline long double __cdecl fabsl(  long double _X)
{
    return fabs((double)_X);
}

  __declspec(dllimport) long double __cdecl fdiml(  long double _X,   long double _Y);

  __inline long double __cdecl floorl(  long double _X)
{
    return floor((double)_X);
}

  __declspec(dllimport) long double __cdecl fmal(  long double _X,   long double _Y,   long double _Z);
  __declspec(dllimport) long double __cdecl fmaxl(  long double _X,   long double _Y);
  __declspec(dllimport) long double __cdecl fminl(  long double _X,   long double _Y);

  __inline long double __cdecl fmodl(  long double _X,   long double _Y)
{
    return fmod((double)_X, (double)_Y);
}

  __inline long double __cdecl frexpl(  long double _X,   int *_Y)
{
    return frexp((double)_X, _Y);
}

  __declspec(dllimport) int __cdecl ilogbl(  long double _X);

  __inline long double __cdecl _hypotl(  long double _X,   long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

  __inline long double __cdecl hypotl(  long double _X,   long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

  __inline long double __cdecl ldexpl(  long double _X,   int _Y)
{
    return ldexp((double)_X, _Y);
}

  __declspec(dllimport) long double __cdecl lgammal(  long double _X);
  __declspec(dllimport) long long __cdecl llrintl(  long double _X);
  __declspec(dllimport) long long __cdecl llroundl(  long double _X);

  __inline long double __cdecl logl(  long double _X)
{
    return log((double)_X);
}

  __inline long double __cdecl log10l(  long double _X)
{
    return log10((double)_X);
}

  __declspec(dllimport) long double __cdecl log1pl(  long double _X);
  __declspec(dllimport) long double __cdecl log2l(  long double _X);
  __declspec(dllimport) long double __cdecl logbl(  long double _X);
  __declspec(dllimport) long __cdecl lrintl(  long double _X);
  __declspec(dllimport) long __cdecl lroundl(  long double _X);

  __inline long double __cdecl modfl(  long double _X,   long double* _Y)
{
    double _F, _I;
    _F = modf((double)_X, &_I);
    *_Y = _I;
    return _F;
}

  __declspec(dllimport) long double __cdecl nanl(  char const*);
  __declspec(dllimport) long double __cdecl nearbyintl(  long double _X);
  __declspec(dllimport) long double __cdecl nextafterl(  long double _X,   long double _Y);
  __declspec(dllimport) long double __cdecl nexttowardl(  long double _X,   long double _Y);

  __inline long double __cdecl powl(  long double _X,   long double _Y)
{
    return pow((double)_X, (double)_Y);
}

  __declspec(dllimport) long double __cdecl remainderl(  long double _X,   long double _Y);
  __declspec(dllimport) long double __cdecl remquol(  long double _X,   long double _Y,   int* _Z);
  __declspec(dllimport) long double __cdecl rintl(  long double _X);
  __declspec(dllimport) long double __cdecl roundl(  long double _X);
  __declspec(dllimport) long double __cdecl scalblnl(  long double _X,   long _Y);
  __declspec(dllimport) long double __cdecl scalbnl(  long double _X,   int _Y);

  __inline long double __cdecl sinhl(  long double _X)
{
    return sinh((double)_X);
}

  __inline long double __cdecl sinl(  long double _X)
{
    return sin((double)_X);
}

  __inline long double __cdecl sqrtl(  long double _X)
{
    return sqrt((double)_X);
}

  __inline long double __cdecl tanhl(  long double _X)
{
    return tanh((double)_X);
}

  __inline long double __cdecl tanl(  long double _X)
{
    return tan((double)_X);
}

  __declspec(dllimport) long double __cdecl tgammal(  long double _X);
  __declspec(dllimport) long double __cdecl truncl(  long double _X);





#line 948 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"



    
    
    
    
    
    
    

    

    
        
            extern double HUGE;
        

#line 967 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

           __declspec(dllimport) double __cdecl j0(  double _X);
           __declspec(dllimport) double __cdecl j1(  double _X);
           __declspec(dllimport) double __cdecl jn(  int _X,   double _Y);
           __declspec(dllimport) double __cdecl y0(  double _X);
           __declspec(dllimport) double __cdecl y1(  double _X);
           __declspec(dllimport) double __cdecl yn(  int _X,   double _Y);
    #line 975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#line 976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"



#pragma warning(pop)
#line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"


} __pragma(pack(pop))

#line 986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"























#line 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

#line 8828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

#pragma once









 #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"

#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

 

  inline double abs(  double _Xx) noexcept
	{
	return (:: fabs(_Xx));
	}

  inline double pow(  double _Xx,   int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: pow(_Xx, static_cast<double>(_Yx)));
	}

  inline float abs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline float acos(  float _Xx) noexcept
	{
	return (:: acosf(_Xx));
	}

  inline float acosh(  float _Xx) noexcept
	{
	return (:: acoshf(_Xx));
	}

  inline float asin(  float _Xx) noexcept
	{
	return (:: asinf(_Xx));
	}

  inline float asinh(  float _Xx) noexcept
	{
	return (:: asinhf(_Xx));
	}

  inline float atan(  float _Xx) noexcept
	{
	return (:: atanf(_Xx));
	}

  inline float atanh(  float _Xx) noexcept
	{
	return (:: atanhf(_Xx));
	}

  inline float atan2(  float _Yx,   float _Xx) noexcept
	{
	return (:: atan2f(_Yx, _Xx));
	}

  inline float cbrt(  float _Xx) noexcept
	{
	return (:: cbrtf(_Xx));
	}

  inline float ceil(  float _Xx) noexcept
	{
	return (:: ceilf(_Xx));
	}

  inline float copysign(  float _Number,
	  float _Sign) noexcept
	{
	return (:: copysignf(_Number, _Sign));
	}

  inline float cos(  float _Xx) noexcept
	{
	return (:: cosf(_Xx));
	}

  inline float cosh(  float _Xx) noexcept
	{
	return (:: coshf(_Xx));
	}

  inline float erf(  float _Xx) noexcept
	{
	return (:: erff(_Xx));
	}

  inline float erfc(  float _Xx) noexcept
	{
	return (:: erfcf(_Xx));
	}

  inline float exp(  float _Xx) noexcept
	{
	return (:: expf(_Xx));
	}

  inline float exp2(  float _Xx) noexcept
	{
	return (:: exp2f(_Xx));
	}

  inline float expm1(  float _Xx) noexcept
	{
	return (:: expm1f(_Xx));
	}

  inline float fabs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline float fdim(  float _Xx,   float _Yx) noexcept
	{
	return (:: fdimf(_Xx, _Yx));
	}

  inline float floor(  float _Xx) noexcept
	{
	return (:: floorf(_Xx));
	}

  inline float fma(  float _Xx,   float _Yx,
	  float _Zx) noexcept
	{
	return (:: fmaf(_Xx, _Yx, _Zx));
	}

  inline float fmax(  float _Xx,   float _Yx) noexcept
	{
	return (:: fmaxf(_Xx, _Yx));
	}

  inline float fmin(  float _Xx,   float _Yx) noexcept
	{
	return (:: fminf(_Xx, _Yx));
	}

  inline float fmod(  float _Xx,   float _Yx) noexcept
	{
	return (:: fmodf(_Xx, _Yx));
	}

  inline float frexp(  float _Xx,   int* _Yx) noexcept
	{
	return (:: frexpf(_Xx, _Yx));
	}

  inline float hypot(  float _Xx,   float _Yx) noexcept
	{
	return (:: hypotf(_Xx, _Yx));
	}

  inline int ilogb(  float _Xx) noexcept
	{
	return (:: ilogbf(_Xx));
	}

  inline float ldexp(  float _Xx,   int _Yx) noexcept
	{
	return (:: ldexpf(_Xx, _Yx));
	}

  inline float lgamma(  float _Xx) noexcept
	{
	return (:: lgammaf(_Xx));
	}

  inline long long llrint(  float _Xx) noexcept
	{
	return (:: llrintf(_Xx));
	}

  inline long long llround(  float _Xx) noexcept
	{
	return (:: llroundf(_Xx));
	}

  inline float log(  float _Xx) noexcept
	{
	return (:: logf(_Xx));
	}

  inline float log10(  float _Xx) noexcept
	{
	return (:: log10f(_Xx));
	}

  inline float log1p(  float _Xx) noexcept
	{
	return (:: log1pf(_Xx));
	}

  inline float log2(  float _Xx) noexcept
	{
	return (:: log2f(_Xx));
	}

  inline float logb(  float _Xx) noexcept
	{
	return (:: logbf(_Xx));
	}

  inline long lrint(  float _Xx) noexcept
	{
	return (:: lrintf(_Xx));
	}

  inline long lround(  float _Xx) noexcept
	{
	return (:: lroundf(_Xx));
	}

  inline float modf(  float _Xx,   float* _Yx) noexcept
	{
	return (:: modff(_Xx, _Yx));
	}

  inline float nearbyint(  float _Xx) noexcept
	{
	return (:: nearbyintf(_Xx));
	}

  inline float nextafter(  float _Xx,   float _Yx) noexcept
	{
	return (:: nextafterf(_Xx, _Yx));
	}

  inline float nexttoward(  float _Xx,
	  long double _Yx) noexcept
	{
	return (:: nexttowardf(_Xx, _Yx));
	}

  inline float pow(  float _Xx,
	  float _Yx) noexcept
	{
	return (:: powf(_Xx, _Yx));
	}

  inline float pow(  float _Xx,   int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: powf(_Xx, static_cast<float>(_Yx)));
	}

  inline float remainder(  float _Xx,   float _Yx) noexcept
	{
	return (:: remainderf(_Xx, _Yx));
	}

  inline float remquo(  float _Xx,   float _Yx,
	  int *_Zx) noexcept
	{
	return (:: remquof(_Xx, _Yx, _Zx));
	}

  inline float rint(  float _Xx) noexcept
	{
	return (:: rintf(_Xx));
	}

  inline float round(  float _Xx) noexcept
	{
	return (:: roundf(_Xx));
	}

  inline float scalbln(  float _Xx,   long _Yx) noexcept
	{
	return (:: scalblnf(_Xx, _Yx));
	}

  inline float scalbn(  float _Xx,   int _Yx) noexcept
	{
	return (:: scalbnf(_Xx, _Yx));
	}

  inline float sin(  float _Xx) noexcept
	{
	return (:: sinf(_Xx));
	}

  inline float sinh(  float _Xx) noexcept
	{
	return (:: sinhf(_Xx));
	}

  inline float sqrt(  float _Xx) noexcept
	{
	return (:: sqrtf(_Xx));
	}

  inline float tan(  float _Xx) noexcept
	{
	return (:: tanf(_Xx));
	}

  inline float tanh(  float _Xx) noexcept
	{
	return (:: tanhf(_Xx));
	}

  inline float tgamma(  float _Xx) noexcept
	{
	return (:: tgammaf(_Xx));
	}

  inline float trunc(  float _Xx) noexcept
	{
	return (:: truncf(_Xx));
	}

  inline long double abs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

  inline long double acos(  long double _Xx) noexcept
	{
	return (:: acosl(_Xx));
	}

  inline long double acosh(  long double _Xx) noexcept
	{
	return (:: acoshl(_Xx));
	}

  inline long double asin(  long double _Xx) noexcept
	{
	return (:: asinl(_Xx));
	}

  inline long double asinh(  long double _Xx) noexcept
	{
	return (:: asinhl(_Xx));
	}

  inline long double atan(  long double _Xx) noexcept
	{
	return (:: atanl(_Xx));
	}

  inline long double atanh(  long double _Xx) noexcept
	{
	return (:: atanhl(_Xx));
	}

  inline long double atan2(  long double _Yx,
	  long double _Xx) noexcept
	{
	return (:: atan2l(_Yx, _Xx));
	}

  inline long double cbrt(  long double _Xx) noexcept
	{
	return (:: cbrtl(_Xx));
	}

  inline long double ceil(  long double _Xx) noexcept
	{
	return (:: ceill(_Xx));
	}

  inline long double copysign(  long double _Number,
	  long double _Sign) noexcept
	{
	return (:: copysignl(_Number, _Sign));
	}

  inline long double cos(  long double _Xx) noexcept
	{
	return (:: cosl(_Xx));
	}

  inline long double cosh(  long double _Xx) noexcept
	{
	return (:: coshl(_Xx));
	}

  inline long double erf(  long double _Xx) noexcept
	{
	return (:: erfl(_Xx));
	}

  inline long double erfc(  long double _Xx) noexcept
	{
	return (:: erfcl(_Xx));
	}

  inline long double exp(  long double _Xx) noexcept
	{
	return (:: expl(_Xx));
	}

  inline long double exp2(  long double _Xx) noexcept
	{
	return (:: exp2l(_Xx));
	}

  inline long double expm1(  long double _Xx) noexcept
	{
	return (:: expm1l(_Xx));
	}

  inline long double fabs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

  inline long double fdim(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fdiml(_Xx, _Yx));
	}

  inline long double floor(  long double _Xx) noexcept
	{
	return (:: floorl(_Xx));
	}

  inline long double fma(  long double _Xx,
	  long double _Yx,   long double _Zx) noexcept
	{
	return (:: fmal(_Xx, _Yx, _Zx));
	}

  inline long double fmax(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fmaxl(_Xx, _Yx));
	}

  inline long double fmin(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fminl(_Xx, _Yx));
	}

  inline long double fmod(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fmodl(_Xx, _Yx));
	}

  inline long double frexp(  long double _Xx,
	  int* _Yx) noexcept
	{
	return (:: frexpl(_Xx, _Yx));
	}

  inline long double hypot(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: hypotl(_Xx, _Yx));
	}

  inline int ilogb(  long double _Xx) noexcept
	{
	return (:: ilogbl(_Xx));
	}

  inline long double ldexp(  long double _Xx,
	  int _Yx) noexcept
	{
	return (:: ldexpl(_Xx, _Yx));
	}

  inline long double lgamma(  long double _Xx) noexcept
	{
	return (:: lgammal(_Xx));
	}

  inline long long llrint(  long double _Xx) noexcept
	{
	return (:: llrintl(_Xx));
	}

  inline long long llround(  long double _Xx) noexcept
	{
	return (:: llroundl(_Xx));
	}

  inline long double log(  long double _Xx) noexcept
	{
	return (:: logl(_Xx));
	}

  inline long double log10(  long double _Xx) noexcept
	{
	return (:: log10l(_Xx));
	}

  inline long double log1p(  long double _Xx) noexcept
	{
	return (:: log1pl(_Xx));
	}

  inline long double log2(  long double _Xx) noexcept
	{
	return (:: log2l(_Xx));
	}

  inline long double logb(  long double _Xx) noexcept
	{
	return (:: logbl(_Xx));
	}

  inline long lrint(  long double _Xx) noexcept
	{
	return (:: lrintl(_Xx));
	}

  inline long lround(  long double _Xx) noexcept
	{
	return (:: lroundl(_Xx));
	}

  inline long double modf(  long double _Xx,
	  long double* _Yx) noexcept
	{
	return (:: modfl(_Xx, _Yx));
	}

  inline long double nearbyint(  long double _Xx) noexcept
	{
	return (:: nearbyintl(_Xx));
	}

  inline long double nextafter(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: nextafterl(_Xx, _Yx));
	}

  inline long double nexttoward(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: nexttowardl(_Xx, _Yx));
	}

  inline long double pow(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: powl(_Xx, _Yx));
	}

  inline long double pow(  long double _Xx,
	  int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: powl(_Xx, static_cast<long double>(_Yx)));
	}

  inline long double remainder(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: remainderl(_Xx, _Yx));
	}

  inline long double remquo(  long double _Xx,
	  long double _Yx,   int *_Zx) noexcept
	{
	return (:: remquol(_Xx, _Yx, _Zx));
	}

  inline long double rint(  long double _Xx) noexcept
	{
	return (:: rintl(_Xx));
	}

  inline long double round(  long double _Xx) noexcept
	{
	return (:: roundl(_Xx));
	}

  inline long double scalbln(  long double _Xx,
	  long _Yx) noexcept
	{
	return (:: scalblnl(_Xx, _Yx));
	}

  inline long double scalbn(  long double _Xx,
	  int _Yx) noexcept
	{
	return (:: scalbnl(_Xx, _Yx));
	}

  inline long double sin(  long double _Xx) noexcept
	{
	return (:: sinl(_Xx));
	}

  inline long double sinh(  long double _Xx) noexcept
	{
	return (:: sinhl(_Xx));
	}

  inline long double sqrt(  long double _Xx) noexcept
	{
	return (:: sqrtl(_Xx));
	}

  inline long double tan(  long double _Xx) noexcept
	{
	return (:: tanl(_Xx));
	}

  inline long double tanh(  long double _Xx) noexcept
	{
	return (:: tanhl(_Xx));
	}

  inline long double tgamma(  long double _Xx) noexcept
	{
	return (:: tgammal(_Xx));
	}

  inline long double trunc(  long double _Xx) noexcept
	{
	return (:: truncl(_Xx));
	}

 #line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"






 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"


 
#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
template<class _Ty>
	struct _Promote_to_float
	{	
	typedef typename conditional<is_integral<_Ty>::value,
		double, _Ty>::type type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Common_float_type
	{	
	typedef typename _Promote_to_float<_Ty1>::type _Ty1f;
	typedef typename _Promote_to_float<_Ty2>::type _Ty2f;
	typedef typename conditional<is_same<_Ty1f, long double>::value
		|| is_same<_Ty2f, long double>::value, long double,
		typename conditional<is_same<_Ty1f, double>::value
			|| is_same<_Ty2f, double>::value, double,
			float>::type>::type type;
	};
}








































template<class _Ty1,
	class _Ty2> inline
	typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value
		&& ::std:: is_arithmetic<_Ty2>::value,
		typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type
	pow(const _Ty1 _Left, const _Ty2 _Right)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
	return (:: pow(type(_Left), type(_Right)));
	}


extern "C"    double __cdecl acos(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acos(_Ty _Left) { return (:: acos((double)_Left)); }
extern "C"    double __cdecl asin(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asin(_Ty _Left) { return (:: asin((double)_Left)); }
extern "C"    double __cdecl atan(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atan(_Ty _Left) { return (:: atan((double)_Left)); }
extern "C"    double __cdecl atan2(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type atan2(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: atan2((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl ceil(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ceil(_Ty _Left) { return (:: ceil((double)_Left)); }
extern "C"    double __cdecl cos(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cos(_Ty _Left) { return (:: cos((double)_Left)); }
extern "C"    double __cdecl cosh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cosh(_Ty _Left) { return (:: cosh((double)_Left)); }
extern "C"    double __cdecl exp(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp(_Ty _Left) { return (:: exp((double)_Left)); }

extern "C"    double __cdecl fabs(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type fabs(_Ty _Left) { return (:: fabs((double)_Left)); }

extern "C"   __declspec(dllimport) double __cdecl floor(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type floor(_Ty _Left) { return (:: floor((double)_Left)); }
extern "C"    double __cdecl fmod(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmod(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmod((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl frexp(  double,   int *); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type frexp(_Ty _Left,   int * _Arg2) { return (:: frexp((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl ldexp(  double,   int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ldexp(_Ty _Left,   int _Arg2) { return (:: ldexp((double)_Left, _Arg2)); }
extern "C"    double __cdecl log(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log(_Ty _Left) { return (:: log((double)_Left)); }
extern "C"    double __cdecl log10(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log10(_Ty _Left) { return (:: log10((double)_Left)); }


extern "C"    double __cdecl sin(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sin(_Ty _Left) { return (:: sin((double)_Left)); }
extern "C"    double __cdecl sinh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sinh(_Ty _Left) { return (:: sinh((double)_Left)); }
extern "C"    double __cdecl sqrt(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sqrt(_Ty _Left) { return (:: sqrt((double)_Left)); }
extern "C"    double __cdecl tan(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tan(_Ty _Left) { return (:: tan((double)_Left)); }
extern "C"    double __cdecl tanh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tanh(_Ty _Left) { return (:: tanh((double)_Left)); }

		









		

inline float _Fma(float _Left, float _Middle, float _Right)
	{	
	return (:: fmaf(_Left, _Middle, _Right));
	}

inline double _Fma(double _Left, double _Middle, double _Right)
	{	
	return (:: fma(_Left, _Middle, _Right));
	}

inline long double _Fma(long double _Left, long double _Middle,
	long double _Right)
	{	
	return (:: fmal(_Left, _Middle, _Right));
	}

template<class _Ty1,
	class _Ty2,
	class _Ty3> inline
	typename ::std:: _Common_float_type<_Ty1,
		typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type
	fma(_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1,
		typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type type;
	return (_Fma((type)_Left, (type)_Middle, (type)_Right));
	}

		

inline float _Remquo(float _Left, float _Right, int *_Pquo)
	{	
	return (:: remquof(_Left, _Right, _Pquo));
	}

inline double _Remquo(double _Left, double _Right, int *_Pquo)
	{	
	return (:: remquo(_Left, _Right, _Pquo));
	}

inline long double _Remquo(long double _Left, long double _Right, int *_Pquo)
	{	
	return (:: remquol(_Left, _Right, _Pquo));
	}

template<class _Ty1,
	class _Ty2> inline
	typename ::std:: _Common_float_type<_Ty1, _Ty2>::type
	remquo(_Ty1 _Left, _Ty2 _Right, int *_Pquo)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
	return (_Remquo((type)_Left, (type)_Right, _Pquo));
	}

extern "C"   __declspec(dllimport) double __cdecl acosh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acosh(_Ty _Left) { return (:: acosh((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl asinh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asinh(_Ty _Left) { return (:: asinh((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl atanh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atanh(_Ty _Left) { return (:: atanh((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl cbrt(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cbrt(_Ty _Left) { return (:: cbrt((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl copysign(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type copysign(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: copysign((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl erf(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erf(_Ty _Left) { return (:: erf((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl erfc(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erfc(_Ty _Left) { return (:: erfc((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl expm1(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type expm1(_Ty _Left) { return (:: expm1((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl exp2(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp2(_Ty _Left) { return (:: exp2((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl fdim(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fdim(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fdim((type)_Left, (type)_Right)); }

extern "C"   __declspec(dllimport) double __cdecl fmax(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmax(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmax((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl fmin(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmin(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmin((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl hypot(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type hypot(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: hypot((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) int __cdecl ilogb(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, int>::type ilogb(_Ty _Left) { return (:: ilogb((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl lgamma(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type lgamma(_Ty _Left) { return (:: lgamma((double)_Left)); }
extern "C"   __declspec(dllimport) long long __cdecl llrint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llrint(_Ty _Left) { return (:: llrint((double)_Left)); }
extern "C"   __declspec(dllimport) long long __cdecl llround(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llround(_Ty _Left) { return (:: llround((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl log1p(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log1p(_Ty _Left) { return (:: log1p((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl log2(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log2(_Ty _Left) { return (:: log2((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl logb(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type logb(_Ty _Left) { return (:: logb((double)_Left)); }
extern "C"   __declspec(dllimport) long __cdecl lrint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lrint(_Ty _Left) { return (:: lrint((double)_Left)); }
extern "C"   __declspec(dllimport) long __cdecl lround(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lround(_Ty _Left) { return (:: lround((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl nearbyint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nearbyint(_Ty _Left) { return (:: nearbyint((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl nextafter(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type nextafter(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: nextafter((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl nexttoward(  double,   long double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nexttoward(_Ty _Left,   long double _Arg2) { return (:: nexttoward((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl remainder(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type remainder(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: remainder((type)_Left, (type)_Right)); }

extern "C"   __declspec(dllimport) double __cdecl rint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type rint(_Ty _Left) { return (:: rint((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl round(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type round(_Ty _Left) { return (:: round((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl scalbln(  double,   long); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbln(_Ty _Left,   long _Arg2) { return (:: scalbln((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl scalbn(  double,   int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbn(_Ty _Left,   int _Arg2) { return (:: scalbn((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl tgamma(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tgamma(_Ty _Left) { return (:: tgamma((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl trunc(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type trunc(_Ty _Left) { return (:: trunc((double)_Left)); }

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
 #line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"





#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

 
namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;

using :: fpclassify; using :: signbit;
using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal;
using :: islessgreater; using :: isunordered;
}
 #line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"





#line 8832 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 8834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
#line 8835 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

























#line 8861 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"











































































































































































#line 9033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(dllimport) double __cdecl _hypot(double x, double y);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(dllimport) float  __cdecl _hypotf(float x, float y);



#line 9040 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"




#line 9045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(long double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(dllimport) int _ldsign(long double);

#line 9049 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















#line 9069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





#line 9075 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"














extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(dllimport) int _dsign(double);


#line 9094 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















#line 9114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





#line 9120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"














extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) bool signbit(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(dllimport) int _fdsign(float);


#line 9139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 9143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(long double a);
#line 9145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















#line 9164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isinf(double a);

#line 9181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















#line 9201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"















static __inline __declspec(__host__) __declspec(__device__) bool isinf(float a);

#line 9219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 9223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isnan(long double a);
#line 9225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

















#line 9243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













static __inline __declspec(__host__) __declspec(__device__) bool isnan(double a);

#line 9259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















#line 9278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isnan(float a);

#line 9295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 9299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline __declspec(__host__) __declspec(__device__) bool isfinite(long double a);
#line 9301 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



















#line 9321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"















static __inline __declspec(__host__) __declspec(__device__) bool isfinite(double a);

#line 9339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















#line 9358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"














static __inline __declspec(__host__) __declspec(__device__) bool isfinite(float a);

#line 9375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"




#line 9380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
template<class T> extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) T _Pow_int(T, int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int abs(long long int) throw();
#line 9383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 9385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"







#line 9393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


#line 9396 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 9400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 9402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"







#line 9410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"









































#line 9452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int __cdecl abs(long int) throw();


#line 9456 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl abs(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double   __cdecl abs(double) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl fabs(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl ceil(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl floor(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sqrt(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl pow(float, float) throw();






















#line 9486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl pow(float, int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double   __cdecl pow(double, int) throw();
#line 9490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
#line 9491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl log(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl log10(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl fmod(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl modf(float, float*) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl exp(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl frexp(float, int*) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl ldexp(float, int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl asin(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sin(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sinh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl acos(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl cos(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl cosh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl atan(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl atan2(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl tan(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl tanh(float) throw();
#line 9509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"








#line 9518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


#line 9521 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 9525 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 9527 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

























































































































































#line 9681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl logb(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) int   __cdecl ilogb(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl scalbn(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl scalbln(float, long int) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl exp2(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl expm1(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl log2(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl log1p(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl acosh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl asinh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl atanh(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl hypot(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl norm3d(float, float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl norm4d(float, float, float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl cbrt(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl erf(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl erfc(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl lgamma(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl tgamma(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl copysign(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl nextafter(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl remainder(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl remquo(float, float, int *) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float __cdecl round(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int      __cdecl lround(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int __cdecl llround(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl trunc(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl rint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int      __cdecl lrint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int __cdecl llrint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl nearbyint(float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fdim(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fma(float, float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fmax(float, float) throw();
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float         __cdecl fmin(float, float) throw();
#line 9717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

static inline __declspec(__host__) __declspec(__device__) float exp10(float a);

static inline __declspec(__host__) __declspec(__device__) float rsqrt(float a);

static inline __declspec(__host__) __declspec(__device__) float rcbrt(float a);

static inline __declspec(__host__) __declspec(__device__) float sinpi(float a);

static inline __declspec(__host__) __declspec(__device__) float cospi(float a);

static inline __declspec(__host__) __declspec(__device__) void sincospi(float a, float *sptr, float *cptr);

static inline __declspec(__host__) __declspec(__device__) void sincos(float a, float *sptr, float *cptr);

static inline __declspec(__host__) __declspec(__device__) float j0(float a);

static inline __declspec(__host__) __declspec(__device__) float j1(float a);

static inline __declspec(__host__) __declspec(__device__) float jn(int n, float a);

static inline __declspec(__host__) __declspec(__device__) float y0(float a);

static inline __declspec(__host__) __declspec(__device__) float y1(float a);

static inline __declspec(__host__) __declspec(__device__) float yn(int n, float a);

static inline __declspec(__host__) __declspec(__device__) float cyl_bessel_i0(float a);

static inline __declspec(__host__) __declspec(__device__) float cyl_bessel_i1(float a);

static inline __declspec(__host__) __declspec(__device__) float erfinv(float a);

static inline __declspec(__host__) __declspec(__device__) float erfcinv(float a);

static inline __declspec(__host__) __declspec(__device__) float normcdfinv(float a);

static inline __declspec(__host__) __declspec(__device__) float normcdf(float a);

static inline __declspec(__host__) __declspec(__device__) float erfcx(float a);

static inline __declspec(__host__) __declspec(__device__) double copysign(double a, float b);

static inline __declspec(__host__) __declspec(__device__) float copysign(float a, double b);

static inline __declspec(__host__) __declspec(__device__) unsigned int min(unsigned int a, unsigned int b);

static inline __declspec(__host__) __declspec(__device__) unsigned int min(int a, unsigned int b);

static inline __declspec(__host__) __declspec(__device__) unsigned int min(unsigned int a, int b);

static inline __declspec(__host__) __declspec(__device__) long int min(long int a, long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(unsigned long int a, unsigned long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(long int a, unsigned long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(unsigned long int a, long int b);

static inline __declspec(__host__) __declspec(__device__) long long int min(long long int a, long long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(unsigned long long int a, unsigned long long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(long long int a, unsigned long long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(unsigned long long int a, long long int b);

static inline __declspec(__host__) __declspec(__device__) float min(float a, float b);

static inline __declspec(__host__) __declspec(__device__) double min(double a, double b);

static inline __declspec(__host__) __declspec(__device__) double min(float a, double b);

static inline __declspec(__host__) __declspec(__device__) double min(double a, float b);

static inline __declspec(__host__) __declspec(__device__) unsigned int max(unsigned int a, unsigned int b);

static inline __declspec(__host__) __declspec(__device__) unsigned int max(int a, unsigned int b);

static inline __declspec(__host__) __declspec(__device__) unsigned int max(unsigned int a, int b);

static inline __declspec(__host__) __declspec(__device__) long int max(long int a, long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(unsigned long int a, unsigned long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(long int a, unsigned long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(unsigned long int a, long int b);

static inline __declspec(__host__) __declspec(__device__) long long int max(long long int a, long long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(unsigned long long int a, unsigned long long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(long long int a, unsigned long long int b);

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(unsigned long long int a, long long int b);

static inline __declspec(__host__) __declspec(__device__) float max(float a, float b);

static inline __declspec(__host__) __declspec(__device__) double max(double a, double b);

static inline __declspec(__host__) __declspec(__device__) double max(float a, double b);

static inline __declspec(__host__) __declspec(__device__) double max(double a, float b);









#line 9831 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"












































































































































































































































































































































































































































































































#line 10324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

























































#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"










































































































































































































#line 330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
















#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(long double a)
{

  return (__isinfl(a) != 0);


#line 361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(double a)
{

  return (__isinf(a) != 0);


#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isinf(float a)
{

  return (__isinff(a) != 0);


#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isnan(long double a)
{

  return (__isnanl(a) != 0);


#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isnan(double a)
{

  return (__isnan(a) != 0);


#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 434 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isnan(float a)
{

  return (__isnanf(a) != 0);


#line 441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 443 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 450 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isfinite(long double a)
{

  return (__finitel(a) != 0);


#line 457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isfinite(double a)
{

  return (__finite(a) != 0);


#line 473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"






#line 482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline __declspec(__host__) __declspec(__device__) bool isfinite(float a)
{

  return (__finitef(a) != 0);


#line 489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}
#line 491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"



#line 497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"




















































































































































































#line 680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

static inline __declspec(__host__) __declspec(__device__) float exp10(float a)
{
  return exp10f(a);
}

static inline __declspec(__host__) __declspec(__device__) float rsqrt(float a)
{
  return rsqrtf(a);
}

static inline __declspec(__host__) __declspec(__device__) float rcbrt(float a)
{
  return rcbrtf(a);
}

static inline __declspec(__host__) __declspec(__device__) float sinpi(float a)
{
  return sinpif(a);
}

static inline __declspec(__host__) __declspec(__device__) float cospi(float a)
{
  return cospif(a);
}

static inline __declspec(__host__) __declspec(__device__) void sincospi(float a, float *sptr, float *cptr)
{
  sincospif(a, sptr, cptr);
}

static inline __declspec(__host__) __declspec(__device__) void sincos(float a, float *sptr, float *cptr)
{
  sincosf(a, sptr, cptr);
}

static inline __declspec(__host__) __declspec(__device__) float j0(float a)
{
  return j0f(a);
}

static inline __declspec(__host__) __declspec(__device__) float j1(float a)
{
  return j1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float jn(int n, float a)
{
  return jnf(n, a);
}

static inline __declspec(__host__) __declspec(__device__) float y0(float a)
{
  return y0f(a);
}

static inline __declspec(__host__) __declspec(__device__) float y1(float a)
{
  return y1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float yn(int n, float a)
{ 
  return ynf(n, a);
}

static inline __declspec(__host__) __declspec(__device__) float cyl_bessel_i0(float a)
{
  return cyl_bessel_i0f(a);
}

static inline __declspec(__host__) __declspec(__device__) float cyl_bessel_i1(float a)
{
  return cyl_bessel_i1f(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfinv(float a)
{
  return erfinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfcinv(float a)
{
  return erfcinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float normcdfinv(float a)
{
  return normcdfinvf(a);
}

static inline __declspec(__host__) __declspec(__device__) float normcdf(float a)
{
  return normcdff(a);
}

static inline __declspec(__host__) __declspec(__device__) float erfcx(float a)
{
  return erfcxf(a);
}

static inline __declspec(__host__) __declspec(__device__) double copysign(double a, float b)
{
  return copysign(a, (double)b);
}

static inline __declspec(__host__) __declspec(__device__) float copysign(float a, double b)
{
  return copysignf(a, (float)b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(unsigned int a, unsigned int b)
{
  return umin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(int a, unsigned int b)
{
  return umin((unsigned int)a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int min(unsigned int a, int b)
{
  return umin(a, (unsigned int)b);
}

static inline __declspec(__host__) __declspec(__device__) long int min(long int a, long int b)
{
  

#pragma warning (disable: 4127)
#line 812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  
  if (sizeof(long int) == sizeof(int)) {

#pragma warning (default: 4127)
#line 817 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (long int)min((int)a, (int)b);
  } else {
    return (long int)llmin((long long int)a, (long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(unsigned long int a, unsigned long int b)
{

#pragma warning (disable: 4127)
#line 828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 832 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(long int a, unsigned long int b)
{

#pragma warning (disable: 4127)
#line 843 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int min(unsigned long int a, long int b)
{

#pragma warning (disable: 4127)
#line 858 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) long long int min(long long int a, long long int b)
{
  return llmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(unsigned long long int a, unsigned long long int b)
{
  return ullmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(long long int a, unsigned long long int b)
{
  return ullmin((unsigned long long int)a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int min(unsigned long long int a, long long int b)
{
  return ullmin(a, (unsigned long long int)b);
}

static inline __declspec(__host__) __declspec(__device__) float min(float a, float b)
{
  return fminf(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double min(double a, double b)
{
  return fmin(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double min(float a, double b)
{
  return fmin((double)a, b);
}

static inline __declspec(__host__) __declspec(__device__) double min(double a, float b)
{
  return fmin(a, (double)b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(unsigned int a, unsigned int b)
{
  return umax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(int a, unsigned int b)
{
  return umax((unsigned int)a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned int max(unsigned int a, int b)
{
  return umax(a, (unsigned int)b);
}

static inline __declspec(__host__) __declspec(__device__) long int max(long int a, long int b)
{
  

#pragma warning (disable: 4127)
#line 929 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (sizeof(long int) == sizeof(int)) {

#pragma warning (default: 4127)
#line 933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (long int)max((int)a, (int)b);
  } else {
    return (long int)llmax((long long int)a, (long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(unsigned long int a, unsigned long int b)
{

#pragma warning (disable: 4127)
#line 944 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(long int a, unsigned long int b)
{

#pragma warning (disable: 4127)
#line 959 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 963 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) unsigned long int max(unsigned long int a, long int b)
{

#pragma warning (disable: 4127)
#line 974 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (sizeof(unsigned long int) == sizeof(unsigned int)) {

#pragma warning (default: 4127)
#line 978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __declspec(__host__) __declspec(__device__) long long int max(long long int a, long long int b)
{
  return llmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(unsigned long long int a, unsigned long long int b)
{
  return ullmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(long long int a, unsigned long long int b)
{
  return ullmax((unsigned long long int)a, b);
}

static inline __declspec(__host__) __declspec(__device__) unsigned long long int max(unsigned long long int a, long long int b)
{
  return ullmax(a, (unsigned long long int)b);
}

static inline __declspec(__host__) __declspec(__device__) float max(float a, float b)
{
  return fmaxf(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double max(double a, double b)
{
  return fmax(a, b);
}

static inline __declspec(__host__) __declspec(__device__) double max(float a, double b)
{
  return fmax((double)a, b);
}

static inline __declspec(__host__) __declspec(__device__) double max(double a, float b)
{
  return fmax(a, (double)b);
}


























































#line 1082 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"









#line 1092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3855 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 3857 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


#line 10328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"













































































































































































































#line 266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"











































































































































































































































































































































































































































































































#line 552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"



#line 556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"
#line 10332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"

#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"



























































































































































































































































































































































































































#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"

#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"







template<class T, int dim = 1>
struct __declspec(__device_builtin_surface_type__) surface : public surfaceReference
{

  __declspec(__host__) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<T>();
  }

  __declspec(__host__) surface(struct cudaChannelFormatDesc desc)
  {
    channelDesc = desc;
  }
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
};

template<int dim>
struct  __declspec(__device_builtin_surface_type__)  surface<void, dim> : public surfaceReference
{

  __declspec(__host__) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<void>();
  }
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
};

#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"

#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
#line 118 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"



























































































































































































































































































































































































































#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"

#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"







template<class T, int texType = 0x01, enum cudaTextureReadMode mode = cudaReadModeElementType>
struct __declspec(__device_builtin_texture_type__) texture : public textureReference
{

  __declspec(__host__) texture(int                         norm  = 0,
                   enum cudaTextureFilterMode  fMode = cudaFilterModePoint,
                   enum cudaTextureAddressMode aMode = cudaAddressModeClamp)
  {
    normalized     = norm;
    filterMode     = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc    = cudaCreateChannelDesc<T>();
    sRGB           = 0;
  }

  __declspec(__host__) texture(int                          norm,
                   enum cudaTextureFilterMode   fMode,
                   enum cudaTextureAddressMode  aMode,
                   struct cudaChannelFormatDesc desc)
  {
    normalized     = norm;
    filterMode     = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc    = desc;
    sRGB           = 0;
  }
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
};

#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"

#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
#line 119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"































































#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"


#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"


#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"







#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"







extern "C"
{









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __mulhi(int x, int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __umulhi(unsigned int x, unsigned int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __mul64hi(long long int x, long long int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __umul64hi(unsigned long long int x, unsigned long long int y);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int_as_float(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float_as_int(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint_as_float(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float_as_uint(float x);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __syncthreads(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __prof_trigger(int);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __threadfence(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __threadfence_block(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __trap(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) void                   __brkpt(int c = 0);






















__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __saturatef(float x);




































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __sad(int x, int y, unsigned int z);



































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __usad(unsigned int x, unsigned int y, unsigned int z);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __mul24(int x, int y);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __umul24(unsigned int x, unsigned int y);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  fdividef(float x, float y);










































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdividef(float x, float y);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) double                 fdivide(double x, double y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __sinf(float x) ;











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __cosf(float x) ;













__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __tanf(float x) ;














__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void                   __sincosf(float x, float *sptr, float *cptr) ;

















































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __expf(float x) ;































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __exp10f(float x) ;

























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __log2f(float x) ;



























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __log10f(float x) ;











































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __logf(float x) ;










































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __powf(float x, float y) ;








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_ru(float);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __float2int_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __float2uint_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rn(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rz(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_ru(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __int2float_rd(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rn(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rz(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_ru(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __uint2float_rd(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __float2ll_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rz(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_ru(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __float2ull_rd(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rn(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rz(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_ru(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ll2float_rd(long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rn(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rz(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_ru(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __ull2float_rd(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned short         __float2half_rn(float x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __half2float(unsigned short x);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fadd_rd(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsub_rd(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rn(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rz(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_ru(float x, float y);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmul_rd(float x, float y);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rn(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rz(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_ru(float x, float y, float z);
























































































































































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fmaf_rd(float x, float y, float z);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rn(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rz(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_ru(float x);
































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frcp_rd(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rn(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rz(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_ru(float x);






























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fsqrt_rd(float x);






































__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __frsqrt_rn(float x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rn(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rz(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_ru(float x, float y);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) float                  __fdiv_rd(float x, float y);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __clz(int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __ffs(int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __popc(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __brev(unsigned int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __clzll(long long int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __ffsll(long long int x);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __popcll(unsigned long long int x);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __brevll(unsigned long long int x);























__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __byte_perm(unsigned int x, unsigned int y, unsigned int s);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __hadd(int, int);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __rhadd(int, int);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __uhadd(unsigned int, unsigned int);












__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __urhadd(unsigned int, unsigned int);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) int                    __double2int_rz(double);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __double2uint_rz(double);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) long long int          __double2ll_rz(double);








__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned long long int __double2ull_rz(double);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm0(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm1(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm2(void);
__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int           __pm3(void);







 

















__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabs2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsss2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vadd2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddss2 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddus2 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vhaddu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpeq2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpges2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgeu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgtu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmples2(unsigned int a, unsigned int b);











__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpleu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmplts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpltu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpne2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmins2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vminu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vseteq2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetges2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgeu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgtu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetles2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetleu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetlts2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetltu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetne2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsadu2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsub2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubss2 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubus2 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vneg2(unsigned int a);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vnegss2(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffs2(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsads2(unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabs4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsss4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vadd4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddss4 (unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vaddus4 (unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vavgu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vhaddu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpeq4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpges4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgeu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpgtu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmples4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpleu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmplts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpltu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vcmpne4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmaxu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vmins4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vminu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vseteq4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetles4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetleu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetlts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetltu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetges4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgeu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgts4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetgtu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsetne4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsadu4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsub4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubss4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsubus4(unsigned int a, unsigned int b);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vneg4(unsigned int a);









__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vnegss4(unsigned int a);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vabsdiffs4(unsigned int a, unsigned int b);










__declspec(__device__) __declspec(__cudart_builtin__) __declspec(__device_builtin__) unsigned int __vsads4(unsigned int a, unsigned int b);






}







static __inline __declspec(__device__) __declspec(__cudart_builtin__) int mulhi(int a, int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int mulhi(unsigned int a, unsigned int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int mulhi(int a, unsigned int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int mulhi(unsigned int a, int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) long long int mul64hi(long long int a, long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int mul64hi(long long int a, unsigned long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int mul64hi(unsigned long long int a, long long int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) int float_as_int(float a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float int_as_float(int a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int float_as_uint(float a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float uint_as_float(unsigned int a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float saturate(float a);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) int mul24(int a, int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int umul24(unsigned int a, unsigned int b);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("Please use __trap() instead.")) void trap(void);


static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("Please use __brkpt() instead.")) void brkpt(int c = 0);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("Please use __syncthreads() instead.")) void syncthreads(void);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("Please use __prof_trigger() instead.")) void prof_trigger(int e);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) __declspec(deprecated("Please use __threadfence() instead.")) void threadfence(bool global = true);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) int float2int(float a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) unsigned int float2uint(float a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float int2float(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) __declspec(__cudart_builtin__) float uint2float(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);





#line 3292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 4503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"








#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"































































#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"


#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"


#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"








static __inline __declspec(__device__) int mulhi(int a, int b)
{
  return __mulhi(a, b);
}

static __inline __declspec(__device__) unsigned int mulhi(unsigned int a, unsigned int b)
{
  return __umulhi(a, b);
}

static __inline __declspec(__device__) unsigned int mulhi(int a, unsigned int b)
{
  return __umulhi((unsigned int)a, b);
}

static __inline __declspec(__device__) unsigned int mulhi(unsigned int a, int b)
{
  return __umulhi(a, (unsigned int)b);
}

static __inline __declspec(__device__) long long int mul64hi(long long int a, long long int b)
{
  return __mul64hi(a, b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b)
{
  return __umul64hi(a, b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(long long int a, unsigned long long int b)
{
  return __umul64hi((unsigned long long int)a, b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(unsigned long long int a, long long int b)
{
  return __umul64hi(a, (unsigned long long int)b);
}

static __inline __declspec(__device__) int float_as_int(float a)
{
  return __float_as_int(a);
}

static __inline __declspec(__device__) float int_as_float(int a)
{
  return __int_as_float(a);
}

static __inline __declspec(__device__) unsigned int float_as_uint(float a)
{
  return __float_as_uint(a);
}

static __inline __declspec(__device__) float uint_as_float(unsigned int a)
{
  return __uint_as_float(a);
}
static __inline __declspec(__device__) float saturate(float a)
{
  return __saturatef(a);
}

static __inline __declspec(__device__) int mul24(int a, int b)
{
  return __mul24(a, b);
}

static __inline __declspec(__device__) unsigned int umul24(unsigned int a, unsigned int b)
{
  return __umul24(a, b);
}

static __inline __declspec(__device__) void trap(void)
{
  __trap();
}


static __inline __declspec(__device__) void brkpt(int c)
{
  __brkpt(c);
}

static __inline __declspec(__device__) void syncthreads(void)
{
  __syncthreads();
}

static __inline __declspec(__device__) void prof_trigger(int e)
{
       if (e ==  0) __prof_trigger( 0);
  else if (e ==  1) __prof_trigger( 1);
  else if (e ==  2) __prof_trigger( 2);
  else if (e ==  3) __prof_trigger( 3);
  else if (e ==  4) __prof_trigger( 4);
  else if (e ==  5) __prof_trigger( 5);
  else if (e ==  6) __prof_trigger( 6);
  else if (e ==  7) __prof_trigger( 7);
  else if (e ==  8) __prof_trigger( 8);
  else if (e ==  9) __prof_trigger( 9);
  else if (e == 10) __prof_trigger(10);
  else if (e == 11) __prof_trigger(11);
  else if (e == 12) __prof_trigger(12);
  else if (e == 13) __prof_trigger(13);
  else if (e == 14) __prof_trigger(14);
  else if (e == 15) __prof_trigger(15);
}

static __inline __declspec(__device__) void threadfence(bool global)
{
  global ? __threadfence() : __threadfence_block();
}

static __inline __declspec(__device__) int float2int(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2int_rn(a) :
         mode == cudaRoundPosInf  ? __float2int_ru(a) :
         mode == cudaRoundMinInf  ? __float2int_rd(a) :
                                    __float2int_rz(a);
}

static __inline __declspec(__device__) unsigned int float2uint(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2uint_rn(a) :
         mode == cudaRoundPosInf  ? __float2uint_ru(a) :
         mode == cudaRoundMinInf  ? __float2uint_rd(a) :
                                    __float2uint_rz(a);
}

static __inline __declspec(__device__) float int2float(int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __int2float_rz(a) :
         mode == cudaRoundPosInf ? __int2float_ru(a) :
         mode == cudaRoundMinInf ? __int2float_rd(a) :
                                   __int2float_rn(a);
}

static __inline __declspec(__device__) float uint2float(unsigned int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __uint2float_rz(a) :
         mode == cudaRoundPosInf ? __uint2float_ru(a) :
         mode == cudaRoundMinInf ? __uint2float_rd(a) :
                                   __uint2float_rn(a);
}




#line 234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 4320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"







#line 4328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"


#line 4512 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 4513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"





#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"



extern "C"
{
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicAdd(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicAdd(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicExch(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicExch(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) float        __fAtomicExch(float *address, float val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicMin(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicMin(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicMax(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicMax(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicInc(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicDec(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicAnd(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicAnd(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicOr(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicOr(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicXor(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicXor(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicCAS(int *address, int compare, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicCAS(unsigned int *address, unsigned int compare, unsigned int val);

}
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"







static __inline __declspec(__device__) int atomicAdd(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicAdd(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicSub(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicSub(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicExch(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicExch(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) float atomicExch(float *address, float val) ;

static __inline __declspec(__device__) int atomicMin(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicMin(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicMax(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicMax(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) unsigned int atomicInc(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) unsigned int atomicDec(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicAnd(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicAnd(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicOr(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicOr(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicXor(int *address, int val) ;

static __inline __declspec(__device__) unsigned int atomicXor(unsigned int *address, unsigned int val) ;

static __inline __declspec(__device__) int atomicCAS(int *address, int compare, int val) ;

static __inline __declspec(__device__) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val) ;







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"



extern "C"
{
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"

extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicAdd(unsigned long long int *address, unsigned long long int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicExch(unsigned long long int *address, unsigned long long int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val);
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
extern __declspec(__device__) __declspec(__device_builtin__) int                    __any(int cond);
extern __declspec(__device__) __declspec(__device_builtin__) int                    __all(int cond);

}
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"








static __inline __declspec(__device__) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val) ;

static __inline __declspec(__device__) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val) ;

static __inline __declspec(__device__) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val) ;

static __inline __declspec(__device__) bool any(bool cond) ;

static __inline __declspec(__device__) bool all(bool cond) ;

#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"







static __inline __declspec(__device__) int atomicAdd(int *address, int val)
{
  return __iAtomicAdd(address, val);
}

static __inline __declspec(__device__) unsigned int atomicAdd(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, val);
}

static __inline __declspec(__device__) int atomicSub(int *address, int val)
{
  return __iAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline __declspec(__device__) unsigned int atomicSub(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline __declspec(__device__) int atomicExch(int *address, int val)
{
  return __iAtomicExch(address, val);
}

static __inline __declspec(__device__) unsigned int atomicExch(unsigned int *address, unsigned int val)
{
  return __uAtomicExch(address, val);
}

static __inline __declspec(__device__) float atomicExch(float *address, float val)
{
  return __fAtomicExch(address, val);
}

static __inline __declspec(__device__) int atomicMin(int *address, int val)
{
  return __iAtomicMin(address, val);
}

static __inline __declspec(__device__) unsigned int atomicMin(unsigned int *address, unsigned int val)
{
  return __uAtomicMin(address, val);
}

static __inline __declspec(__device__) int atomicMax(int *address, int val)
{
  return __iAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned int atomicMax(unsigned int *address, unsigned int val)
{
  return __uAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned int atomicInc(unsigned int *address, unsigned int val)
{
  return __uAtomicInc(address, val);
}

static __inline __declspec(__device__) unsigned int atomicDec(unsigned int *address, unsigned int val)
{
  return __uAtomicDec(address, val);
}

static __inline __declspec(__device__) int atomicAnd(int *address, int val)
{
  return __iAtomicAnd(address, val);
}

static __inline __declspec(__device__) unsigned int atomicAnd(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd(address, val);
}

static __inline __declspec(__device__) int atomicOr(int *address, int val)
{
  return __iAtomicOr(address, val);
}

static __inline __declspec(__device__) unsigned int atomicOr(unsigned int *address, unsigned int val)
{
  return __uAtomicOr(address, val);
}

static __inline __declspec(__device__) int atomicXor(int *address, int val)
{
  return __iAtomicXor(address, val);
}

static __inline __declspec(__device__) unsigned int atomicXor(unsigned int *address, unsigned int val)
{
  return __uAtomicXor(address, val);
}

static __inline __declspec(__device__) int atomicCAS(int *address, int compare, int val)
{
  return __iAtomicCAS(address, compare, val);
}

static __inline __declspec(__device__) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val)
{
  return __uAtomicCAS(address, compare, val);
}







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"







static __inline __declspec(__device__) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicAdd(address, val);
}

static __inline __declspec(__device__) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicExch(address, val);
}

static __inline __declspec(__device__) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val)
{
  return __ullAtomicCAS(address, compare, val);
}

static __inline __declspec(__device__) bool any(bool cond)
{
  return (bool)__any((int)cond);
}

static __inline __declspec(__device__) bool all(bool cond)
{
  return (bool)__all((int)cond);
}

#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"



#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.hpp"

#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"

#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 4515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"

#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"

#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"


extern "C"
{
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"








extern __declspec(__device__) __declspec(__device_builtin__) long long int         __double_as_longlong(double x);








extern __declspec(__device__) __declspec(__device_builtin__) double                __longlong_as_double(long long int x);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rn(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rz(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_ru(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rd(double x, double y, double z);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rd(double x, double y);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rz(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rd(double x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __int2double_rn(int x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __uint2double_rn(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rn(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rz(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_ru(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rd(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rn(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rz(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_ru(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rd(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2hiint(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2loint(double x);









extern __declspec(__device__) __declspec(__device_builtin__) double                 __hiloint2double(int hi, int lo);

}
#line 1136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"







static __inline __declspec(__device__) double fma(double a, double b, double c, enum cudaRoundMode mode);

static __inline __declspec(__device__) double dmul(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double dadd(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double dsub(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) int double2int(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) unsigned int double2uint(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) long long int double2ll(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) unsigned long long int double2ull(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline __declspec(__device__) double ll2double(long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double ull2double(unsigned long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double int2double(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double uint2double(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline __declspec(__device__) double float2double(float a, enum cudaRoundMode mode = cudaRoundNearest);



#line 1172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"




















#line 1193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"

#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"

#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"







static __inline __declspec(__device__) double fma(double a, double b, double c, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __fma_rz(a, b, c) :
         mode == cudaRoundPosInf ? __fma_ru(a, b, c) :
         mode == cudaRoundMinInf ? __fma_rd(a, b, c) :
                                   __fma_rn(a, b, c);
}

static __inline __declspec(__device__) double dmul(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dmul_rz(a, b) :
         mode == cudaRoundPosInf ? __dmul_ru(a, b) :
         mode == cudaRoundMinInf ? __dmul_rd(a, b) :
                                   __dmul_rn(a, b);
}

static __inline __declspec(__device__) double dadd(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dadd_rz(a, b) :
         mode == cudaRoundPosInf ? __dadd_ru(a, b) :
         mode == cudaRoundMinInf ? __dadd_rd(a, b) :
                                   __dadd_rn(a, b);
}

static __inline __declspec(__device__) double dsub(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __dsub_rz(a, b) :
         mode == cudaRoundPosInf ? __dsub_ru(a, b) :
         mode == cudaRoundMinInf ? __dsub_rd(a, b) :
                                   __dsub_rn(a, b);
}

static __inline __declspec(__device__) int double2int(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2int_rn(a) :
         mode == cudaRoundPosInf  ? __double2int_ru(a) :
         mode == cudaRoundMinInf  ? __double2int_rd(a) :
                                    __double2int_rz(a);
}

static __inline __declspec(__device__) unsigned int double2uint(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2uint_rn(a) :
         mode == cudaRoundPosInf  ? __double2uint_ru(a) :
         mode == cudaRoundMinInf  ? __double2uint_rd(a) :
                                    __double2uint_rz(a);
}

static __inline __declspec(__device__) long long int double2ll(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ll_rn(a) :
         mode == cudaRoundPosInf  ? __double2ll_ru(a) :
         mode == cudaRoundMinInf  ? __double2ll_rd(a) :
                                    __double2ll_rz(a);
}

static __inline __declspec(__device__) unsigned long long int double2ull(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ull_rn(a) :
         mode == cudaRoundPosInf  ? __double2ull_ru(a) :
         mode == cudaRoundMinInf  ? __double2ull_rd(a) :
                                    __double2ull_rz(a);
}

static __inline __declspec(__device__) double ll2double(long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __ll2double_rz(a) :
         mode == cudaRoundPosInf ? __ll2double_ru(a) :
         mode == cudaRoundMinInf ? __ll2double_rd(a) :
                                   __ll2double_rn(a);
}

static __inline __declspec(__device__) double ull2double(unsigned long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __ull2double_rz(a) :
         mode == cudaRoundPosInf ? __ull2double_ru(a) :
         mode == cudaRoundMinInf ? __ull2double_rd(a) :
                                   __ull2double_rn(a);
}

static __inline __declspec(__device__) double int2double(int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline __declspec(__device__) double uint2double(unsigned int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline __declspec(__device__) double float2double(float a, enum cudaRoundMode mode)
{
  return (double)a;
}



#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"








































#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"

#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"

#line 1196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
#line 1197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"

#line 1199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"

#line 4516 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"





#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"




extern "C"
{
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
extern __declspec(__device__) __declspec(__device_builtin__) float __fAtomicAdd(float *address, float val);

}
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"







static __inline __declspec(__device__) float atomicAdd(float *address, float val) ;

#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.hpp"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.hpp"







static __inline __declspec(__device__) float atomicAdd(float *address, float val)
{
  return __fAtomicAdd(address, val);
}

#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.hpp"



#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.hpp"

#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"

#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
#line 4517 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"


























































#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"

#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.hpp"























































#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.hpp"

#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.hpp"



#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.hpp"

#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"

#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 4518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_35_atomic_functions.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"






























































































































#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_35_atomic_functions.h"

#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_35_atomic_functions.h"
#line 4519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"























































#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"

#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"













































































































































































































































































































































































































































































#line 521 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"

#line 523 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.hpp"























































































































































































































































































































































































































































#line 498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.hpp"

#line 500 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.hpp"



#line 504 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.hpp"

#line 529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"

#line 532 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"

#line 4520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"





#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"



extern "C"
{
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
extern __declspec(__device__) __declspec(__device_builtin__) void                   __threadfence_system(void);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rd(double x, double y);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rn(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rz(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_ru(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rd(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rn(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rz(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_ru(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rd(double x);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __ballot(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_count(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_and(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_or(int);
extern __declspec(__device__) __declspec(__device_builtin__) long long int         clock64(void);






extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_rn(float, float, float);
extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_rz(float, float, float);
extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_ru(float, float, float);
extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_rd(float, float, float);











extern __declspec(__device__) __declspec(__device_builtin__) long long int         __double_as_longlong(double x);








extern __declspec(__device__) __declspec(__device_builtin__) double                __longlong_as_double(long long int x);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rn(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rz(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_ru(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rd(double x, double y, double z);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rd(double x, double y);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rz(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rd(double x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __int2double_rn(int x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __uint2double_rn(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rn(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rz(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_ru(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rd(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rn(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rz(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_ru(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rd(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2hiint(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2loint(double x);









extern __declspec(__device__) __declspec(__device_builtin__) double                 __hiloint2double(int hi, int lo);



}
#line 1468 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"







static __inline __declspec(__device__) unsigned int ballot(bool pred) ;

static __inline __declspec(__device__) int syncthreads_count(bool pred) ;

static __inline __declspec(__device__) bool syncthreads_and(bool pred) ;

static __inline __declspec(__device__) bool syncthreads_or(bool pred) ;




static __inline __declspec(__device__) unsigned int __isGlobal(const void *ptr) ;

#line 1489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"







static __inline __declspec(__device__) unsigned int ballot(bool pred)
{
  return __ballot((int)pred);
}

static __inline __declspec(__device__) int syncthreads_count(bool pred)
{
  return __syncthreads_count((int)pred);
}

static __inline __declspec(__device__) bool syncthreads_and(bool pred)
{
  return (bool)__syncthreads_and((int)pred);
}

static __inline __declspec(__device__) bool syncthreads_or(bool pred)
{
  return (bool)__syncthreads_or((int)pred);
}




static __inline __declspec(__device__) unsigned int __isGlobal(const void *ptr)
{
    unsigned int ret;
    asm volatile ("{ \n\t"
                  "    .reg .pred p; \n\t"
                  "    isspacep.global p, %1; \n\t"
                  "    selp.u32 %0, 1, 0, p;  \n\t"


#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"
                  "} \n\t" : "=r"(ret) : "r"(ptr));
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"

    return ret;
}

#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"



#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.hpp"

#line 1495 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1496 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"

#line 4521 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"















































































































#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"

#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"




































































































































































































































































#line 319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"

#line 321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"



#line 325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.hpp"

#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"

#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 4522 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"


























































































































































































#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"

#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"
































































































































































































































































#line 315 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"

#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"



#line 321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.hpp"


#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"

#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 4523 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_35_intrinsics.h"














































































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"





























































































































































































































































#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_35_intrinsics.h"



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_35_intrinsics.h"

#line 4524 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
























































#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"

#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"





#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.hpp"


































































































#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.hpp"

#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.hpp"



#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.hpp"

#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"

#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 4525 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

























































#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"









#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"









































































































#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"


















































































































































































#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"








extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf1Dreadc1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadc1");
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf1Dreadc2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadc2");
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf1Dreadc4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadc4");
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf1Dreads1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreads1");
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf1Dreads2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreads2");
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf1Dreads4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreads4");
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf1Dreadu1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadu1");
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf1Dreadu2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadu2");
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf1Dreadu4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadu4");
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf1Dreadl1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadl1");
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf1Dreadl2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadl2");





#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf1Dread(T *res, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s ==  1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadc1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadc1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadc1(surf, x, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreads1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreads1(surf, x, cudaBoundaryModeClamp) : __surf1Dreads1(surf, x, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(*(uint1  *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu1(surf, x, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(*(uint2  *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu2(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu2(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu2(surf, x, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4  *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu4(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu4(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu4(surf, x, cudaBoundaryModeTrap ))) :
              (void)0;
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline  T surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;
  
  surf1Dread(&tmp, surf, x, (int)sizeof(T), mode);
  
  return tmp;
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf1Dread(T *res, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf1Dread<T>(surf, x, mode);
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


template<> __declspec(__device__) __declspec(__cudart_builtin__) char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) signed char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_schar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_longlong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ulonglong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_longlong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ulonglong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_longlong2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ulonglong2") ;

template<>
__declspec(__device__) __forceinline long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __surf1Dread_long_as_int(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_long_as_int");
  return (long int)__surf1Dread_long_as_int(surf, x, mode);
}

template<>
__declspec(__device__) __forceinline unsigned long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned __surf1Dread_ulong_as_uint(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_ulong_as_uint");
  return (long unsigned)__surf1Dread_ulong_as_uint(surf, x, mode);
}

template<>
__declspec(__device__) __forceinline long1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __surf1Dread_long1_as_int1(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_long1_as_int1");
  int1 v = __surf1Dread_long1_as_int1(surf, x, mode);
  return make_long1((long int)v.x);
}

template<>
__declspec(__device__) __forceinline ulong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __surf1Dread_ulong1_as_uint1(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_ulong1_as_uint1");
  uint1 v = __surf1Dread_ulong1_as_uint1(surf, x, mode);
  return make_ulong1((unsigned long int)v.x);
}

template<>
__declspec(__device__) __forceinline long2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __surf1Dread_long2_as_int2(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_long2_as_int2");
  int2 tmp = __surf1Dread_long2_as_int2(surf, x, mode);
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline ulong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __surf1Dread_ulong2_as_uint2(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_ulong2_as_uint2");
  uint2 tmp = __surf1Dread_ulong2_as_uint2(surf, x, mode);
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline long4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __surf1Dread_long4_as_int4(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_long4_as_int4");
  int4 tmp = __surf1Dread_long4_as_int4(surf, x, mode);
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__declspec(__device__) __forceinline ulong4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __surf1Dread_ulong4_as_uint4(surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dread_ulong4_as_uint4");
  uint4 tmp = __surf1Dread_ulong4_as_uint4(surf, x, mode);
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template<> __declspec(__device__) __declspec(__cudart_builtin__) float surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float4") ;
#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"









extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf2Dreadc1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadc1") ;
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf2Dreadc2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadc2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf2Dreadc4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadc4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf2Dreads1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreads1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf2Dreads2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreads2") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf2Dreads4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreads4") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf2Dreadu1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf2Dreadu2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf2Dreadu4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf2Dreadl1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadl1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf2Dreadl2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadl2");





#line 259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s ==  1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(*(uint1  *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(*(uint2  *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4  *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap ))) :
              (void)0;
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline T surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;
  
  surf2Dread(&tmp, surf, x, y, (int)sizeof(T), mode);
  
  return tmp;
#line 283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf2Dread<T>(surf, x, y, mode);
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


template<> __declspec(__device__) __declspec(__cudart_builtin__) char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) signed char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_schar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_longlong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ulonglong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_longlong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ulonglong1") ;
template<>__declspec(__device__) __declspec(__cudart_builtin__) longlong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_longlong2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ulonglong2") ;


template<>
__declspec(__device__) __forceinline long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __surf1Dread_long_as_int(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_long_as_int");
  return __surf1Dread_long_as_int(surf, x, y, mode);
}

template<>
__declspec(__device__) __forceinline unsigned long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __surf1Dread_ulong_as_uint(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_ulong_as_uint");
  return __surf1Dread_ulong_as_uint(surf, x, y, mode);
}

template<>
__declspec(__device__) __forceinline long1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __surf2Dread_long1_as_int1(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_long1_as_int1");
  int1 tmp = __surf2Dread_long1_as_int1(surf, x, y, mode);
  return make_long1((long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline ulong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __surf2Dread_ulong1_as_uint1(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_ulong1_as_uint1");
  uint1 tmp = __surf2Dread_ulong1_as_uint1(surf, x, y, mode);
  return make_ulong1((unsigned long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline long2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __surf2Dread_long2_as_int2(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_long2_as_int2");
  int2 tmp = __surf2Dread_long2_as_int2(surf, x, y, mode);
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline ulong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __surf2Dread_ulong2_as_uint2(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_ulong2_as_uint2");
  uint2 tmp = __surf2Dread_ulong2_as_uint2(surf, x, y, mode);
  return make_ulong2((long unsigned int)tmp.x, (long unsigned int)tmp.y);
}

template<>
__declspec(__device__) __forceinline long4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __surf2Dread_long4_as_int4(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_long4_as_int4");
  int4 tmp = __surf2Dread_long4_as_int4(surf, x, y, mode);
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__declspec(__device__) __forceinline ulong4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __surf2Dread_ulong4_as_uint4(surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dread_ulong4_as_uint4");
  uint4 tmp = __surf2Dread_ulong4_as_uint4(surf, x, y, mode);
  return make_ulong4((unsigned long)tmp.x, (unsigned long)tmp.y, (unsigned long)tmp.z, (unsigned long)tmp.w);
}
#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<> __declspec(__device__) __declspec(__cudart_builtin__) float surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float4") ;
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"









extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf3Dreadc1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadc1") ;
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf3Dreadc2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadc2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf3Dreadc4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadc4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf3Dreads1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreads1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf3Dreads2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreads2") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf3Dreads4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreads4") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf3Dreadu1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf3Dreadu2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf3Dreadu4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf3Dreadl1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadl1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf3Dreadl2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadl2") ;





#line 421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s ==  1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(*(uint1  *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(*(uint2  *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4  *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap ))) :
              (void)0;
#line 433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline T surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;
  
  surf3Dread(&tmp, surf, x, y, z, (int)sizeof(T), mode);
  
  return tmp;
#line 445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf3Dread<T>(surf, x, y, z, mode);
#line 453 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


template<> __declspec(__device__) __declspec(__cudart_builtin__) char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) signed char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_schar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_longlong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ulonglong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_longlong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ulonglong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_longlong2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ulonglong2") ;

template<>
__declspec(__device__) __forceinline long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __surf3Dread_long_as_int(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_long_as_int");
  return __surf3Dread_long_as_int(surf, x, y, z, mode);
}

template<>
__declspec(__device__) __forceinline unsigned long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __surf3Dread_ulong_as_uint(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_ulong_as_uint");
  return __surf3Dread_ulong_as_uint(surf, x, y, z, mode);
}

template<>
__declspec(__device__) __forceinline long1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __surf3Dread_long1_as_int1(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_long1_as_int1");
  int1 tmp = __surf3Dread_long1_as_int1(surf, x, y, z, mode);
  return make_long1((long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline ulong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __surf3Dread_ulong1_as_uint1(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_ulong1_as_uint1");
  uint1 tmp = __surf3Dread_ulong1_as_uint1(surf, x, y, z, mode);
  return make_ulong1((unsigned long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline long2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __surf3Dread_long2_as_int2(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_long2_as_int2");
  int2 tmp = __surf3Dread_long2_as_int2(surf, x, y, z, mode);
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline ulong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __surf3Dread_ulong2_as_uint2(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_ulong2_as_uint2");
  uint2 tmp = __surf3Dread_ulong2_as_uint2(surf, x, y, z, mode);
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline long4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __surf3Dread_long4_as_int4(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_long4_as_int4");
  int4 tmp = __surf3Dread_long4_as_int4(surf, x, y, z, mode);
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__declspec(__device__) __forceinline ulong4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __surf3Dread_ulong4_as_uint4(surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dread_ulong4_as_uint4");
  uint4 tmp = __surf3Dread_ulong4_as_uint4(surf, x, y, z, mode);
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}
#line 550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<> __declspec(__device__) __declspec(__cudart_builtin__) float surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float4") ;
#line 556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"








extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf1DLayeredreadc1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadc1");
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf1DLayeredreadc2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadc2");
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf1DLayeredreadc4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadc4");
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf1DLayeredreads1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreads1");
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf1DLayeredreads2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreads2");
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf1DLayeredreads4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreads4");
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf1DLayeredreadu1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadu1");
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf1DLayeredreadu2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadu2");
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf1DLayeredreadu4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadu4");
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf1DLayeredreadl1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadl1");
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf1DLayeredreadl2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadl2");





#line 581 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s ==  1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(*(uint1  *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(*(uint2  *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4  *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap ))) :
              (void)0;
#line 593 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline T surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;
  
  surf1DLayeredread(&tmp, surf, x, layer, (int)sizeof(T), mode);
  
  return tmp;
#line 605 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf1DLayeredread<T>(surf, x, layer, mode);
#line 613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


template<> __declspec(__device__) __declspec(__cudart_builtin__) char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) signed char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_schar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_longlong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ulonglong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_longlong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ulonglong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_longlong2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ulonglong2") ;


template<>
__declspec(__device__) __forceinline long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __surf1DLayeredread_long_as_int(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_long_as_int");
  return (long int)__surf1DLayeredread_long_as_int(surf, x, layer, mode);
}

template<>
__declspec(__device__) __forceinline unsigned long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __surf1DLayeredread_ulong_as_uint(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_ulong_as_uint");
  return (unsigned long int)__surf1DLayeredread_ulong_as_uint(surf, x, layer, mode);
}

template<>
__declspec(__device__) __forceinline long1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __surf1DLayeredread_long1_as_int1(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_long1_as_int1");
  int1 tmp = __surf1DLayeredread_long1_as_int1(surf, x, layer, mode);
  return make_long1((long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline ulong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __surf1DLayeredread_ulong1_as_uint1(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_ulong1_as_uint1");
  uint1 tmp = __surf1DLayeredread_ulong1_as_uint1(surf, x, layer, mode);
  return make_ulong1((unsigned long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline long2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __surf1DLayeredread_long2_as_int2(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_long2_as_int2");
  int2 tmp = __surf1DLayeredread_long2_as_int2(surf, x, layer, mode);
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline ulong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __surf1DLayeredread_ulong2_as_uint2(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_ulong2_as_uint2");
  uint2 tmp = __surf1DLayeredread_ulong2_as_uint2(surf, x, layer, mode);
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline long4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __surf1DLayeredread_long4_as_int4(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_long4_as_int4");
  int4 tmp = __surf1DLayeredread_long4_as_int4(surf, x, layer, mode);
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__declspec(__device__) __forceinline ulong4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __surf1DLayeredread_ulong4_as_uint4(surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredread_ulong4_as_uint4");
  uint4 tmp = __surf1DLayeredread_ulong4_as_uint4(surf, x, layer, mode);
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}
#line 711 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<> __declspec(__device__) __declspec(__cudart_builtin__) float surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float4") ;
#line 717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"









extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf2DLayeredreadc1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc1");
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf2DLayeredreadc2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf2DLayeredreadc4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf2DLayeredreads1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf2DLayeredreads2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads2") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf2DLayeredreads4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads4") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf2DLayeredreadu1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf2DLayeredreadu2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf2DLayeredreadu4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf2DLayeredreadl1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf2DLayeredreadl2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl2") ;

extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf2DLayeredreadc1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc1");
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf2DLayeredreadc2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf2DLayeredreadc4(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf2DLayeredreads1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf2DLayeredreads2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads2") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf2DLayeredreads4(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads4") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf2DLayeredreadu1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf2DLayeredreadu2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf2DLayeredreadu4(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf2DLayeredreadl1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf2DLayeredreadl2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl2") ;

extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf2DLayeredreadc1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc1");
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf2DLayeredreadc2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf2DLayeredreadc4(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf2DLayeredreads1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf2DLayeredreads2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads2") ;
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf2DLayeredreads4(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads4") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf2DLayeredreadu1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf2DLayeredreadu2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf2DLayeredreadu4(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf2DLayeredreadl1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl1") ;
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf2DLayeredreadl2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl2") ;





#line 767 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s ==  1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(*(uint1  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(*(uint2  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap ))) :
              (void)0;
#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline T surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;
  
  surf2DLayeredread(&tmp, surf, x, y, layer, (int)sizeof(T), mode);
  
  return tmp;
#line 791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf2DLayeredread<T>(surf, x, y, layer, mode);
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


template<> __declspec(__device__) __declspec(__cudart_builtin__) char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) signed char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_schar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_longlong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ulonglong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_longlong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ulonglong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_longlong2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ulonglong2") ;


template<>
__declspec(__device__) __forceinline long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __surf2DLayeredread_long_as_int(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_long_as_int");
  return (long int)__surf2DLayeredread_long_as_int(surf, x, y, layer, mode);
}

template<>
__declspec(__device__) __forceinline unsigned long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __surf2DLayeredread_ulong_as_uint(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_ulong_as_uint");
  return (unsigned long int)__surf2DLayeredread_ulong_as_uint(surf, x, y, layer, mode);
}

template<>
__declspec(__device__) __forceinline long1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __surf2DLayeredread_long1_as_int1(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_long1_as_int1");
  int1 tmp = __surf2DLayeredread_long1_as_int1(surf, x, y, layer, mode);
  return make_long1((long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline ulong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __surf2DLayeredread_ulong1_as_uint1(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_ulong1_as_uint1");
  uint1 tmp = __surf2DLayeredread_ulong1_as_uint1(surf, x, y, layer, mode);
  return make_ulong1((unsigned long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline long2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __surf2DLayeredread_long2_as_int2(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_long2_as_int2");
  int2 tmp = __surf2DLayeredread_long2_as_int2(surf, x, y, layer, mode);
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline ulong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __surf2DLayeredread_ulong2_as_uint2(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_ulong2_as_uint2");
  uint2 tmp = __surf2DLayeredread_ulong2_as_uint2(surf, x, y, layer, mode);
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline long4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __surf2DLayeredread_long4_as_int4(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_long4_as_int4");
  int4 tmp = __surf2DLayeredread_long4_as_int4(surf, x, y, layer, mode);
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__declspec(__device__) __forceinline ulong4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __surf2DLayeredread_ulong4_as_uint4(surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredread_ulong4_as_uint4");
  uint4 tmp = __surf2DLayeredread_ulong4_as_uint4(surf, x, y, layer, mode);
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}
#line 897 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<> __declspec(__device__) __declspec(__cudart_builtin__) float surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float4") ;
#line 903 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"














#line 918 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s ==  1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(*(uint1  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(*(uint2  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap ))) :
              (void)0;
#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline T surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;
  
  surfCubemapread(&tmp, surf, x, y, face, (int)sizeof(T), mode);
  
  return tmp;
#line 942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surfCubemapread<T>(surf, x, y, face, mode);
#line 950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


template<> __declspec(__device__) __declspec(__cudart_builtin__) char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) signed char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_schar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_longlong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ulonglong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_longlong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ulonglong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_longlong2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ulonglong2") ;


template<>
__declspec(__device__) __forceinline long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __surfCubemapread_long_as_int(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_long_as_int");
  return (long int)__surfCubemapread_long_as_int(surf, x, y, face, mode);
}

template<>
__declspec(__device__) __forceinline unsigned long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __surfCubemapread_ulong_as_uint(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_ulong_as_uint");
  return (unsigned long)__surfCubemapread_ulong_as_uint(surf, x, y, face, mode);
}

template<>
__declspec(__device__) __forceinline long1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __surfCubemapread_long1_as_int1(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_long1_as_int1");
  int1 tmp = __surfCubemapread_long1_as_int1(surf, x, y, face, mode);
  return make_long1((long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline ulong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __surfCubemapread_ulong1_as_uint1(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_ulong1_as_uint1");
  uint1 tmp = __surfCubemapread_ulong1_as_uint1(surf, x, y, face, mode);
  return make_ulong1((unsigned long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline long2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __surfCubemapread_long2_as_int2(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_long2_as_int2");
  int2 tmp = __surfCubemapread_long2_as_int2(surf, x, y, face, mode);
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline ulong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __surfCubemapread_ulong2_as_uint2(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_ulong2_as_uint2");
  uint2 tmp = __surfCubemapread_ulong2_as_uint2(surf, x, y, face, mode);
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline long4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __surfCubemapread_long4_as_int4(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_long4_as_int4");
  int4 tmp = __surfCubemapread_long4_as_int4(surf, x, y, face, mode);
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__declspec(__device__) __forceinline ulong4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __surfCubemapread_ulong4_as_uint4(surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapread_ulong4_as_uint4");
  uint4 tmp = __surfCubemapread_ulong4_as_uint4(surf, x, y, face, mode);
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}
#line 1048 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<> __declspec(__device__) __declspec(__cudart_builtin__) float surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float4") ;
#line 1054 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"














#line 1069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s ==  1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(*(uint1  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(*(uint2  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4  *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
              (void)0;
#line 1081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline T surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;
  
  surfCubemapLayeredread(&tmp, surf, x, y, layerFace, (int)sizeof(T), mode);
  
  return tmp;
#line 1093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surfCubemapLayeredread<T>(surf, x, y, layerFace, mode);
#line 1101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


template<> __declspec(__device__) __declspec(__cudart_builtin__) char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) signed char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_schar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) char4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uchar4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) short4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ushort4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) int4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) uint4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint4") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_longlong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) unsigned long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ulonglong") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_longlong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ulonglong1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) longlong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_longlong2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) ulonglong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ulonglong2") ;


template<>
__declspec(__device__) __forceinline long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __surfCubemapLayeredread_long_as_int(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_long_as_int");
  return (long int)__surfCubemapLayeredread_long_as_int(surf, x, y, layerFace, mode);
}

template<>
__declspec(__device__) __forceinline unsigned long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __surfCubemapLayeredread_ulong_as_uint(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_ulong_as_uint");
  return (unsigned long int)__surfCubemapLayeredread_ulong_as_uint(surf, x, y, layerFace, mode);
}

template<>
__declspec(__device__) __forceinline long1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __surfCubemapLayeredread_long1_as_int1(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_long1_as_int1");
  int1 tmp = __surfCubemapLayeredread_long1_as_int1(surf, x, y, layerFace, mode);
  return make_long1((long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline ulong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __surfCubemapLayeredread_ulong1_as_uint1(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_ulong1_as_uint1");
  uint1 tmp = __surfCubemapLayeredread_ulong1_as_uint1(surf, x, y, layerFace, mode);
  return make_ulong1((unsigned long int)tmp.x);
}

template<>
__declspec(__device__) __forceinline long2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __surfCubemapLayeredread_long2_as_int2(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_long2_as_int2");
  int2 tmp = __surfCubemapLayeredread_long2_as_int2(surf, x, y, layerFace, mode);
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline ulong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __surfCubemapLayeredread_ulong2_as_uint2(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_ulong2_as_uint2");
  uint2 tmp = __surfCubemapLayeredread_ulong2_as_uint2(surf, x, y, layerFace, mode);
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__declspec(__device__) __forceinline long4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __surfCubemapLayeredread_long4_as_int4(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_long4_as_int4");
  int4 tmp = __surfCubemapLayeredread_long4_as_int4(surf, x, y, layerFace, mode);
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__declspec(__device__) __forceinline ulong4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __surfCubemapLayeredread_ulong4_as_uint4(surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredread_ulong4_as_uint4");
  uint4 tmp = __surfCubemapLayeredread_ulong4_as_uint4(surf, x, y, layerFace, mode);
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}
#line 1199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<> __declspec(__device__) __declspec(__cudart_builtin__) float surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float1") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float2") ;
template<> __declspec(__device__) __declspec(__cudart_builtin__) float4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float4") ;
#line 1205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"









extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritec1(    uchar1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritec1");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritec2(    uchar2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritec2");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritec4(    uchar4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritec4");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwrites1(   ushort1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwrites1");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwrites2(   ushort2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwrites2");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwrites4(   ushort4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwrites4");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwriteu1(     uint1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwriteu1");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwriteu2(     uint2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwriteu2");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwriteu4(     uint4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwriteu4");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritel1(ulonglong1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritel1");
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritel2(ulonglong2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritel2");





#line 1231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf1Dwrite(T val, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeClamp) : __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeClamp) : __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeTrap ))) :
              (void)0;
#line 1254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf1Dwrite(T val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf1Dwrite(val, surf, x, (int)sizeof(T), mode);
#line 1262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(signed char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uchar1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uchar2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uchar4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ushort1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ushort2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ushort4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uint1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uint2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uint4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_longlong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ulonglong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(longlong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_longlong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ulonglong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ulonglong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(longlong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_longlong2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ulonglong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ulonglong2") ;

static __declspec(__device__) __forceinline void surf1Dwrite(long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_long_as_int(int, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_long_as_int");
  __surf1Dwrite_long_as_int((int)val, surf, x, mode);
}

static __declspec(__device__) __forceinline void surf1Dwrite(unsigned long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_ulong_as_uint(unsigned int, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_ulong_as_uint");
  __surf1Dwrite_ulong_as_uint((unsigned int)val, surf, x, mode);
}

static __declspec(__device__) __forceinline void surf1Dwrite(long1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_long1_as_int1(int1, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_long1_as_int1");
  __surf1Dwrite_long1_as_int1(make_int1((int)val.x), surf, x, mode);
}

static __declspec(__device__) __forceinline void surf1Dwrite(ulong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_ulong1_as_uint1(uint1, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_ulong1_as_uint1");
  __surf1Dwrite_ulong1_as_uint1(make_uint1((unsigned int)val.x), surf, x, mode);
}

static __declspec(__device__) __forceinline void surf1Dwrite(long2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_long2_as_int2(int2, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_long2_as_int2");
  __surf1Dwrite_long2_as_int2(make_int2((int)val.x, (int)val.y), surf, x, mode);
}

static __declspec(__device__) __forceinline void surf1Dwrite(ulong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_ulong2_as_uint2(uint2, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_ulong2_as_uint2");
  __surf1Dwrite_ulong2_as_uint2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, mode);
}

static __declspec(__device__) __forceinline void surf1Dwrite(long4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_long4_as_int4(int4, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_long4_as_int4");
  __surf1Dwrite_long4_as_int4(make_int4((int)val.x, (int)val.y, (int)val.z, (int)val.w), surf, x, mode);
}

static __declspec(__device__) __forceinline void surf1Dwrite(ulong4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1Dwrite_ulong4_as_uint4(uint4, surface<void, 0x01>, int, enum cudaSurfaceBoundaryMode) asm("__surf1Dwrite_ulong4_as_uint4");
  __surf1Dwrite_ulong4_as_uint4(make_uint4((unsigned)val.x, (unsigned)val.y, (unsigned)val.z, (unsigned)val.w), surf, x, mode);
}
#line 1345 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float4") ;
#line 1350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"









extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritec1(    uchar1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritec1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritec2(    uchar2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritec2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritec4(    uchar4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritec4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwrites1(   ushort1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwrites1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwrites2(   ushort2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwrites2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwrites4(   ushort4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwrites4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwriteu1(     uint1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwriteu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwriteu2(     uint2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwriteu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwriteu4(     uint4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwriteu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritel1(ulonglong1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritel1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritel2(ulonglong2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritel2") ;





#line 1376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeTrap ))) :
              (void)0;
#line 1399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline  void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf2Dwrite(val, surf, x, y, (int)sizeof(T), mode);
#line 1407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(signed char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uchar1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uchar2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uchar4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ushort1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ushort2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ushort4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uint1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uint2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uint4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_longlong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ulonglong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(longlong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_longlong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ulonglong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ulonglong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(longlong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_longlong2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ulonglong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ulonglong2") ;

static __declspec(__device__) __forceinline void surf2Dwrite(long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_long_as_int(int, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_long_as_int");
  __surf2Dwrite_long_as_int((int)val, surf, x, y, mode);
}

static __declspec(__device__) __forceinline void surf2Dwrite(unsigned long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_ulong_as_uint(unsigned int, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_ulong_as_uint");
  __surf2Dwrite_ulong_as_uint((unsigned int)val, surf, x, y, mode);
}

static __declspec(__device__) __forceinline void surf2Dwrite(long1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_long1_as_int1(int1, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_long1_as_int1");
  __surf2Dwrite_long1_as_int1(make_int1((int)val.x), surf, x, y, mode);
}

static __declspec(__device__) __forceinline void surf2Dwrite(ulong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_ulong1_as_uint1(uint1, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_ulong1_as_uint1");
  __surf2Dwrite_ulong1_as_uint1(make_uint1((unsigned int)val.x), surf, x, y, mode);
}

static __declspec(__device__) __forceinline void surf2Dwrite(long2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_long2_as_int2(int2, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_long2_as_int2");
  __surf2Dwrite_long2_as_int2(make_int2((int)val.x, (int)val.y), surf, x, y, mode);
}

static __declspec(__device__) __forceinline void surf2Dwrite(ulong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_ulong2_as_uint2(uint2, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_ulong2_as_uint2");
  __surf2Dwrite_ulong2_as_uint2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, mode);
}

static __declspec(__device__) __forceinline void surf2Dwrite(long4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_long4_as_int4(int4, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_long4_as_int4");
  __surf2Dwrite_long4_as_int4(make_int4((int)val.x, (int)val.y, (int)val.z, (int)val.w), surf, x, y, mode);
}

static __declspec(__device__) __forceinline void surf2Dwrite(ulong4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2Dwrite_ulong4_as_uint4(uint4, surface<void, 0x02>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2Dwrite_ulong4_as_uint4");
  __surf2Dwrite_ulong4_as_uint4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, mode);
}
#line 1489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float4") ;
#line 1494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"








extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritec1(    uchar1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritec1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritec2(    uchar2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritec2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritec4(    uchar4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritec4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwrites1(   ushort1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwrites1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwrites2(   ushort2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwrites2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwrites4(   ushort4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwrites4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwriteu1(     uint1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwriteu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwriteu2(     uint2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwriteu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwriteu4(     uint4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwriteu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritel1(ulonglong1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritel1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritel2(ulonglong2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritel2") ;





#line 1519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeTrap ))) :
              (void)0;
#line 1542 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf3Dwrite(val, surf, x, y, z, (int)sizeof(T), mode);
#line 1550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(signed char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uchar1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uchar2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uchar4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ushort1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ushort2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ushort4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uint1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uint2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uint4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_longlong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ulonglong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(longlong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_longlong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ulonglong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ulonglong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(longlong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_longlong2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ulonglong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ulonglong2") ;

static __declspec(__device__) __forceinline void surf3Dwrite(long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_long_as_int(int, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_long_as_int");
  __surf3Dwrite_long_as_int((int)val, surf, x, y, z, mode);
}

static __declspec(__device__) __forceinline void surf3Dwrite(unsigned long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_ulong_as_uint(unsigned int, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_ulong_as_uint");
  __surf3Dwrite_ulong_as_uint((unsigned int)val, surf, x, y, z, mode);
}

static __declspec(__device__) __forceinline void surf3Dwrite(long1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_long1_as_int1(int1, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_long1_as_int1");
  __surf3Dwrite_long1_as_int1(make_int1((int)val.x), surf, x, y, z, mode);
}

static __declspec(__device__) __forceinline void surf3Dwrite(ulong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_ulong1_as_uint1(uint1, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_ulong1_as_uint1");
  __surf3Dwrite_ulong1_as_uint1(make_uint1((unsigned int)val.x), surf, x, y, z, mode);
}

static __declspec(__device__) __forceinline void surf3Dwrite(long2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_long2_as_int2(int2, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_long2_as_int2");
  __surf3Dwrite_long2_as_int2(make_int2((int)val.x, (int)val.y), surf, x, y, z, mode);
}

static __declspec(__device__) __forceinline void surf3Dwrite(ulong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_ulong2_as_uint2(uint2, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_ulong2_as_uint2");
  __surf3Dwrite_ulong2_as_uint2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, z, mode);
}

static __declspec(__device__) __forceinline void surf3Dwrite(long4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_long4_as_int4(int4, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_long4_as_int4");
  __surf3Dwrite_long4_as_int4(make_int4((int)val.x, (int)val.y, (int)val.z, (int)val.w), surf, x, y, z, mode);
}

static __declspec(__device__) __forceinline void surf3Dwrite(ulong4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf3Dwrite_ulong4_as_uint4(uint4, surface<void, 0x03>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf3Dwrite_ulong4_as_uint4");
  __surf3Dwrite_ulong4_as_uint4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, z, mode);
}
#line 1633 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float4") ;
#line 1638 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"









extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritec1(    uchar1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritec1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritec2(    uchar2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritec2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritec4(    uchar4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritec4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwrites1(   ushort1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwrites1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwrites2(   ushort2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwrites2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwrites4(   ushort4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwrites4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwriteu1(     uint1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwriteu1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwriteu2(     uint2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwriteu2") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwriteu4(     uint4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwriteu4") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritel1(ulonglong1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritel1") ;
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritel2(ulonglong2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritel2") ;






#line 1665 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
static __declspec(__device__) __forceinline void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeTrap ))) :
              (void)0;
#line 1688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf1DLayeredwrite(val, surf, x, layer, (int)sizeof(T), mode);
#line 1696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(signed char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uchar1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uchar2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uchar4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ushort1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ushort2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ushort4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uint1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uint2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uint4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_longlong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ulonglong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(longlong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_longlong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ulonglong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ulonglong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(longlong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_longlong2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ulonglong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ulonglong2") ;

static __declspec(__device__) __forceinline void surf1DLayeredwrite(long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_long_as_int(int, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_long_as_int");
  __surf1DLayeredwrite_long_as_int((int)val, surf, x, layer, mode);
}

static __declspec(__device__) __forceinline void surf1DLayeredwrite(unsigned long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_ulong_as_uint(unsigned int, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_ulong_as_uint");
  __surf1DLayeredwrite_ulong_as_uint((unsigned int)val, surf, x, layer, mode);
}

static __declspec(__device__) __forceinline void surf1DLayeredwrite(long1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_long1_as_int1(int1, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_long1_as_int1");
  __surf1DLayeredwrite_long1_as_int1(make_int1((int)val.x), surf, x, layer, mode);
}

static __declspec(__device__) __forceinline void surf1DLayeredwrite(ulong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_ulong1_as_uint1(uint1, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_ulong1_as_uint1");
  __surf1DLayeredwrite_ulong1_as_uint1(make_uint1((unsigned int)val.x), surf, x, layer, mode);
}

static __declspec(__device__) __forceinline void surf1DLayeredwrite(long2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_long2_as_int2(int2, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_long2_as_int2");
  __surf1DLayeredwrite_long2_as_int2(make_int2((int)val.x, (int)val.y), surf, x, layer, mode);
}

static __declspec(__device__) __forceinline void surf1DLayeredwrite(ulong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_ulong2_as_uint2(uint2, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_ulong2_as_uint2");
  __surf1DLayeredwrite_ulong2_as_uint2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, layer, mode);
}

static __declspec(__device__) __forceinline void surf1DLayeredwrite(long4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_long4_as_int4(int4, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_long4_as_int4");
  __surf1DLayeredwrite_long4_as_int4(make_int4((int)val.x, (int)val.y, (int)val.z, (int)val.w), surf, x, layer, mode);
}

static __declspec(__device__) __forceinline void surf1DLayeredwrite(ulong4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf1DLayeredwrite_ulong4_as_uint4(uint4, surface<void, 0xF1>, int, int, enum cudaSurfaceBoundaryMode) asm("__surf1DLayeredwrite_ulong4_as_uint4");
  __surf1DLayeredwrite_ulong4_as_uint4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, layer, mode);
}
#line 1779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float4") ;
#line 1784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"








template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritec1(    uchar1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritec2(    uchar2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritec4(    uchar4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwrites1(   ushort1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwrites2(   ushort2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwrites4(   ushort4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwriteu1(     uint1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwriteu2(     uint2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwriteu4(     uint4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritel1(ulonglong1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;
template <typename T>
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritel2(ulonglong2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)  ;






#line 1821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
 __declspec(__device__) __forceinline void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeTrap ))) :
              (void)0;
#line 1844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf2DLayeredwrite(val, surf, x, y, layer, (int)sizeof(T), mode);
#line 1852 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(signed char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uchar1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uchar2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uchar4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ushort1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ushort2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ushort4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uint1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uint2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uint4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_longlong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ulonglong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(longlong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_longlong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ulonglong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ulonglong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(longlong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_longlong2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ulonglong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ulonglong2") ;

static __declspec(__device__) __forceinline void surf2DLayeredwrite(long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_long_as_int(int, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_long_as_int");
  __surf2DLayeredwrite_long_as_int((int)val, surf, x, y, layer, mode);
}

static __declspec(__device__) __forceinline void surf2DLayeredwrite(unsigned long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_ulong_as_uint(int, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_ulong_as_uint");
  __surf2DLayeredwrite_ulong_as_uint((unsigned int)val, surf, x, y, layer, mode);
}

static __declspec(__device__) __forceinline void surf2DLayeredwrite(long1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_long1_as_int1(int1, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_long1_as_int1");
  __surf2DLayeredwrite_long1_as_int1(make_int1((int)val.x), surf, x, y, layer, mode);
}

static __declspec(__device__) __forceinline void surf2DLayeredwrite(ulong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_ulong1_as_uint1(uint1, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_ulong1_as_uint1");
  __surf2DLayeredwrite_ulong1_as_uint1(make_uint1((unsigned int)val.x), surf, x, y, layer, mode);
}

static __declspec(__device__) __forceinline void surf2DLayeredwrite(long2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_long2_as_int2(int2, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_long2_as_int2");
  __surf2DLayeredwrite_long2_as_int2(make_int2((int)val.x, (int)val.y), surf, x, y, layer, mode);
}

static __declspec(__device__) __forceinline void surf2DLayeredwrite(ulong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_ulong2_as_uint2(uint2, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_ulong2_as_uint2");
  __surf2DLayeredwrite_ulong2_as_uint2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layer, mode);
}

static __declspec(__device__) __forceinline void surf2DLayeredwrite(long4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_long4_as_int4(int4, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_long4_as_int4");
  __surf2DLayeredwrite_long4_as_int4(make_int4((int)val.x, (int)val.y, (int)val.z, (int)val.w), surf, x, y, layer, mode);
}

static __declspec(__device__) __forceinline void surf2DLayeredwrite(ulong4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surf2DLayeredwrite_ulong4_as_uint4(uint4, surface<void, 0xF2>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surf2DLayeredwrite_ulong4_as_uint4");
  __surf2DLayeredwrite_ulong4_as_uint4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layer, mode);
}

#line 1936 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float4") ;
#line 1941 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"















#line 1957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
__declspec(__device__) __forceinline void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeTrap ))) :
              (void)0;
#line 1980 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
__declspec(__device__) __forceinline void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surfCubemapwrite(val, surf, x, y, face, (int)sizeof(T), mode);
#line 1988 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(signed char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uchar1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uchar2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uchar4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ushort1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ushort2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ushort4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uint1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uint2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uint4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_longlong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ulonglong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(longlong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_longlong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ulonglong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ulonglong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(longlong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_longlong2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ulonglong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ulonglong2") ;

static __declspec(__device__) __forceinline void surfCubemapwrite(long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_long_as_int(int, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_long_as_int");
  __surfCubemapwrite_long_as_int((int)val, surf, x, y, face, mode);
}

static __declspec(__device__) __forceinline void surfCubemapwrite(unsigned long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_ulong_as_uint(unsigned int, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_ulong_as_uint");
  __surfCubemapwrite_ulong_as_uint((unsigned int)val, surf, x, y, face, mode);
}

static __declspec(__device__) __forceinline void surfCubemapwrite(long1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_long1_as_int1(int1, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_long1_as_int1");
  __surfCubemapwrite_long1_as_int1(make_int1((int)val.x), surf, x, y, face, mode);
}

static __declspec(__device__) __forceinline void surfCubemapwrite(ulong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_ulong1_as_uint1(uint1, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_ulong1_as_uint1");
  __surfCubemapwrite_ulong1_as_uint1(make_uint1((unsigned int)val.x), surf, x, y, face, mode);
}

static __declspec(__device__) __forceinline void surfCubemapwrite(long2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_long2_as_int2(int2, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_long2_as_int2");
  __surfCubemapwrite_long2_as_int2(make_int2((int)val.x, (int)val.y), surf, x, y, face, mode);
}

static __declspec(__device__) __forceinline void surfCubemapwrite(ulong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_ulong2_as_uint2(uint2, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_ulong2_as_uint2");
  __surfCubemapwrite_ulong2_as_uint2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, face, mode);
}

static __declspec(__device__) __forceinline void surfCubemapwrite(long4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_long4_as_int4(int4, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_long4_as_int4");
  __surfCubemapwrite_long4_as_int4(make_int4((int)val.x, (int)val.y, (int)val.z, (int)val.w), surf, x, y, face, mode);
}

static __declspec(__device__) __forceinline void surfCubemapwrite(ulong4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapwrite_ulong4_as_uint4(uint4, surface<void, 0x0C>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapwrite_ulong4_as_uint4");
  __surfCubemapwrite_ulong4_as_uint4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, face, mode);
}
#line 2071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float4") ;
#line 2076 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"















#line 2092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

template<class T>
static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s ==  2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s ==  4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s ==  8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
              (void)0;
#line 2115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}

template<class T>
static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surfCubemapLayeredwrite(val, surf, x, y, layerFace, (int)sizeof(T), mode);
#line 2123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
}


__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(signed char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uchar1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uchar2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uchar4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ushort1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ushort2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ushort4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uint1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uint2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uint4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_longlong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ulonglong") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(longlong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_longlong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ulonglong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ulonglong1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(longlong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_longlong2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ulonglong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ulonglong2") ;

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_long_as_int(int, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_long_as_int");
  __surfCubemapLayeredwrite_long_as_int((int)val, surf, x, y, layerFace, mode);
}

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(unsigned long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_ulong_as_uint(unsigned int, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_ulong_as_uint");
  __surfCubemapLayeredwrite_ulong_as_uint((unsigned int)val, surf, x, y, layerFace, mode);
}

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(long1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_long1_as_int1(int1, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_long1_as_int1");
  __surfCubemapLayeredwrite_long1_as_int1(make_int1((int)val.x), surf, x, y, layerFace, mode);
}

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(ulong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_ulong1_as_uint1(uint1, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_ulong1_as_uint1");
  __surfCubemapLayeredwrite_ulong1_as_uint1(make_uint1((unsigned int)val.x), surf, x, y, layerFace, mode);
}

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(long2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_long2_as_int2(int2, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_long2_as_int2");
  __surfCubemapLayeredwrite_long2_as_int2(make_int2((int)val.x, (int)val.y), surf, x, y, layerFace, mode);
}

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(ulong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_ulong2_as_uint2(uint2, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_ulong2_as_uint2");
  __surfCubemapLayeredwrite_ulong2_as_uint2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layerFace, mode);
}

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(long4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_long4_as_int4(int4, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_long4_as_int4");
  __surfCubemapLayeredwrite_long4_as_int4(make_int4((int)val.x, (int)val.y, (int)val.z, (int)val.w), surf, x, y, layerFace, mode);
}

static __declspec(__device__) __forceinline void surfCubemapLayeredwrite(ulong4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  __declspec(__device__) __declspec(__cudart_builtin__) void __surfCubemapLayeredwrite_ulong4_as_uint4(uint4, surface<void, 0xFC>, int, int, int, enum cudaSurfaceBoundaryMode) asm("__surfCubemapLayeredwrite_ulong4_as_uint4");
  __surfCubemapLayeredwrite_ulong4_as_uint4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layerFace, mode);
}
#line 2206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float4") ;
#line 2211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"























































































































#line 2331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 2332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"

#line 4526 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"





























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"















































































































#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"


















































































































































































#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"































#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex1Dfetch(texture<char, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char_as_schar") ;
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex1Dfetch(texture<signed char, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex1Dfetch(texture<char1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex1Dfetch(texture<char2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex1Dfetch(texture<char4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex1Dfetch(texture<short, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex1Dfetch(texture<short1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex1Dfetch(texture<short2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex1Dfetch(texture<short4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex1Dfetch(texture<int, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex1Dfetch(texture<unsigned int, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex1Dfetch(texture<int1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex1Dfetch(texture<uint1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex1Dfetch(texture<int2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex1Dfetch(texture<uint2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex1Dfetch(texture<int4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex1Dfetch(texture<uint4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint4") ;

static __declspec(__device__) __forceinline long tex1Dfetch(texture<long, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __tex1Dfetch_long_as_int(texture<long, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_long_as_int");
  return __tex1Dfetch_long_as_int(t, x);
}

static __declspec(__device__) __forceinline unsigned long tex1Dfetch(texture<unsigned long, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned __tex1Dfetch_ulong_as_uint(texture<unsigned long, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_ulong_as_uint");
  return __tex1Dfetch_ulong_as_uint(t, x);
}

static __declspec(__device__) __forceinline long1 tex1Dfetch(texture<long1, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1  __tex1Dfetch_long1_as_int1(texture<long1, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_long1_as_int1");
  int1 v = __tex1Dfetch_long1_as_int1(t, x);
  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex1Dfetch(texture<ulong1, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1  __tex1Dfetch_ulong1_as_uint1(texture<ulong1, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_ulong1_as_uint1");
  uint1 v = __tex1Dfetch_ulong1_as_uint1(t, x);
  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex1Dfetch(texture<long2, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2  __tex1Dfetch_long2_as_int2(texture<long2, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_long2_as_int2");
  int2 v = __tex1Dfetch_long2_as_int2(t, x);
  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex1Dfetch(texture<ulong2, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2  __tex1Dfetch_ulong2_as_uint2(texture<ulong2, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_ulong2_as_uint2");
  uint2 v = __tex1Dfetch_ulong2_as_uint2(t, x);
  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex1Dfetch(texture<long4, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4  __tex1Dfetch_long4_as_int4(texture<long4, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_long4_as_int4");
  int4 v = __tex1Dfetch_long4_as_int4(t, x);
  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex1Dfetch(texture<ulong4, 0x01, cudaReadModeElementType> t, int x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4  __tex1Dfetch_ulong4_as_uint4(texture<ulong4, 0x01, cudaReadModeElementType>, int) asm("__tex1Dfetch_ulong4_as_uint4");
  uint4 v = __tex1Dfetch_ulong4_as_uint4(t, x);
  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1Dfetch(texture<float, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1Dfetch(texture<float1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1Dfetch(texture<float2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1Dfetch(texture<float4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float4") ;




#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1Dfetch(texture<char, 0x01, cudaReadModeNormalizedFloat> t, int x)  asm("__tex1Dfetch_rmnf_char_as_schar") ;
#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1Dfetch(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, int x)  asm("__tex1Dfetch_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, int x)  asm("__tex1Dfetch_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1Dfetch(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, int x)  asm("__tex1Dfetch_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1Dfetch(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1Dfetch(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_char4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1Dfetch(texture<short, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1Dfetch(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1Dfetch(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1Dfetch(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort4") ;
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"











#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex1D(texture<char, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char_as_schar") ;
#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex1D(texture<signed char, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex1D(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex1D(texture<char1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex1D(texture<uchar1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex1D(texture<char2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex1D(texture<uchar2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex1D(texture<char4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex1D(texture<uchar4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex1D(texture<short, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex1D(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex1D(texture<short1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex1D(texture<ushort1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex1D(texture<short2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex1D(texture<ushort2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex1D(texture<short4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex1D(texture<ushort4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort4") ;


__declspec(__device__) __declspec(__cudart_builtin__) int tex1D(texture<int, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex1D(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex1D(texture<int1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex1D(texture<uint1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex1D(texture<int2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex1D(texture<uint2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex1D(texture<int4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex1D(texture<uint4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint4") ;

static __declspec(__device__) __forceinline long tex1D(texture<long, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __tex1D_long_as_int(texture<long, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_long_as_int");
  return __tex1D_long_as_int(t, x);
}

static __declspec(__device__) __forceinline unsigned long tex1D(texture<unsigned long, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned __tex1D_ulong_as_uint(texture<unsigned long, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_ulong_as_uint");
  return __tex1D_ulong_as_uint(t, x);
}

static __declspec(__device__) __forceinline long1 tex1D(texture<long1, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int1 __tex1D_long1_as_int1(texture<long1, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_long1_as_int1");
  int1 v = __tex1D_long1_as_int1(t, x);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex1D(texture<ulong1, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint1 __tex1D_ulong1_as_uint1(texture<ulong1, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_ulong1_as_uint1");
  uint1 v = __tex1D_ulong1_as_uint1(t, x);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex1D(texture<long2, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int2 __tex1D_long2_as_int2(texture<long2, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_long2_as_int2");
  int2 v = __tex1D_long2_as_int2(t, x);
  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex1D(texture<ulong2, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint2 __tex1D_ulong2_as_uint2(texture<ulong2, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_ulong2_as_uint2");
  uint2 v = __tex1D_ulong2_as_uint2(t, x);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex1D(texture<long4, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int4 __tex1D_long4_as_int4(texture<long4, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_long4_as_int4");
  int4 v = __tex1D_long4_as_int4(t, x);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex1D(texture<ulong4, 0x01, cudaReadModeElementType> t, float x)
{
  __declspec(__device__) __declspec(__cudart_builtin__) uint4 __tex1D_ulong4_as_uint4(texture<ulong4, 0x01, cudaReadModeElementType>, float)  asm("__tex1D_ulong4_as_uint4");
  uint4 v = __tex1D_ulong4_as_uint4(t, x);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1D(texture<float, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1D(texture<float1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1D(texture<float2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1D(texture<float4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float4") ;




#line 322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1D(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char_as_schar") ;
#line 324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1D(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1D(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1D(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1D(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1D(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1D(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1D(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1D(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex1D(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1D(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1D(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1D(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1D(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1D(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1D(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1D(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort4") ;
#line 342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"











#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex2D(texture<char, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char_as_schar") ;
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex2D(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex2D(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex2D(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex2D(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex2D(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex2D(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2D(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2D(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex2D(texture<short, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex2D(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex2D(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex2D(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex2D(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex2D(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2D(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2D(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex2D(texture<int, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex2D(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex2D(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex2D(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex2D(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex2D(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2D(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2D(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint4") ;

static __declspec(__device__) __forceinline long tex2D(texture<long, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__) int __tex2D_long_as_int(texture<long, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_long_as_int");
  return __tex2D_long_as_int(t, x, y);
}


static __declspec(__device__) __forceinline unsigned long tex2D(texture<unsigned long, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __tex2D_ulong_as_uint(texture<unsigned long, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_ulong_as_uint");
  return __tex2D_ulong_as_uint(t, x, y);
}

static __declspec(__device__) __forceinline long1 tex2D(texture<long1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex2D_long1_as_int1(texture<long1, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_long1_as_int1");
  int1 v = __tex2D_long1_as_int1(t, x, y);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex2D(texture<ulong1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex2D_ulong1_as_uint1(texture<ulong1, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_ulong1_as_uint1");
  uint1 v = __tex2D_ulong1_as_uint1(t, x, y);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex2D(texture<long2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex2D_long2_as_int2(texture<long2, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_long2_as_int2");
  int2 v = __tex2D_long2_as_int2(t, x, y);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex2D(texture<ulong2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex2D_ulong2_as_uint2(texture<ulong2, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_ulong2_as_uint2");
  uint2 v = __tex2D_ulong2_as_uint2(t, x, y);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex2D(texture<long4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex2D_long4_as_int4(texture<long4, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_long4_as_int4");
  int4 v = __tex2D_long4_as_int4(t, x, y);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex2D(texture<ulong4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex2D_ulong4_as_uint4(texture<ulong4, 0x02, cudaReadModeElementType>, float, float)  asm("__tex2D_ulong4_as_uint4");
  uint4 v = __tex2D_ulong4_as_uint4(t, x, y);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 444 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) float tex2D(texture<float, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2D(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2D(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2D(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float4") ;




#line 454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2D(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char_as_schar") ;
#line 456 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2D(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2D(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2D(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2D(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2D(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2D(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2D(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2D(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2D(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2D(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2D(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2D(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2D(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2D(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2D(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2D(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort4") ;
#line 473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex1DLayered(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char_as_schar") ;
#line 486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex1DLayered(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex1DLayered(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex1DLayered(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex1DLayered(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex1DLayered(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex1DLayered(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex1DLayered(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex1DLayered(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex1DLayered(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex1DLayered(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex1DLayered(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex1DLayered(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex1DLayered(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex1DLayered(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex1DLayered(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex1DLayered(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint4") ;

static __declspec(__device__) __forceinline long tex1DLayered(texture<long, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex1DLayered_long_as_int(texture<long, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_long_as_int");
  return __tex1DLayered_long_as_int(t, x, layer);
}

static __declspec(__device__) __forceinline unsigned long tex1DLayered(texture<unsigned long, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned __tex1DLayered_ulong_as_uint(texture<unsigned long, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_ulong_as_uint");
  return __tex1DLayered_ulong_as_uint(t, x, layer);
}

static __declspec(__device__) __forceinline long1 tex1DLayered(texture<long1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex1DLayered_long1_as_int1(texture<long1, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_long1_as_int1");
  int1 v = __tex1DLayered_long1_as_int1(t, x, layer);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex1DLayered(texture<ulong1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex1DLayered_ulong1_as_uint1(texture<ulong1, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_ulong1_as_uint1");
  uint1 v = __tex1DLayered_ulong1_as_uint1(t, x, layer);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex1DLayered(texture<long2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex1DLayered_long2_as_int2(texture<long2, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_long2_as_int2");
  int2 v = __tex1DLayered_long2_as_int2(t, x, layer);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex1DLayered(texture<ulong2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex1DLayered_ulong2_as_uint2(texture<ulong2, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_ulong2_as_uint2");
  uint2 v = __tex1DLayered_ulong2_as_uint2(t, x, layer);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex1DLayered(texture<long4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex1DLayered_long4_as_int4(texture<long4, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_long4_as_int4");
  int4 v = __tex1DLayered_long4_as_int4(t, x, layer);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex1DLayered(texture<ulong4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex1DLayered_ulong4_as_uint4(texture<ulong4, 0xF1, cudaReadModeElementType>, float, int)  asm("__tex1DLayered_ulong4_as_uint4");
  uint4 v = __tex1DLayered_ulong4_as_uint4(t, x, layer);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 573 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayered(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayered(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayered(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayered(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float4") ;



#line 581 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayered(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char_as_schar") ;
#line 583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayered(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayered(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayered(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayered(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayered(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayered(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayered(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayered(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort4") ;
#line 601 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex2DLayered(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char_as_schar") ;
#line 614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex2DLayered(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex2DLayered(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex2DLayered(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2DLayered(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex2DLayered(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex2DLayered(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex2DLayered(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2DLayered(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex2DLayered(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex2DLayered(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex2DLayered(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex2DLayered(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex2DLayered(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex2DLayered(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2DLayered(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2DLayered(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint4") ;

static __declspec(__device__) __forceinline long tex2DLayered(texture<long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex2DLayered_long_as_int(texture<long, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_long_as_int");

  return __tex2DLayered_long_as_int(t, x, y, layer);
}

static __declspec(__device__) __forceinline unsigned long tex2DLayered(texture<unsigned long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex2DLayered_ulong_as_uint(texture<unsigned long, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_ulong_as_uint");

  return __tex2DLayered_ulong_as_uint(t, x, y, layer);
}

static __declspec(__device__) __forceinline long1 tex2DLayered(texture<long1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex2DLayered_long1_as_int1(texture<long1, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_long1_as_int1");
  int1 v = __tex2DLayered_long1_as_int1(t, x, y, layer);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex2DLayered(texture<ulong1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex2DLayered_ulong1_as_uint1(texture<ulong1, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_ulong1_as_uint1");
  uint1 v = __tex2DLayered_ulong1_as_uint1(t, x, y, layer);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex2DLayered(texture<long2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex2DLayered_long2_as_int2(texture<long2, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_long2_as_int2");
  int2 v = __tex2DLayered_long2_as_int2(t, x, y, layer);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex2DLayered(texture<ulong2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex2DLayered_ulong2_as_uint2(texture<ulong2, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_ulong2_as_uint2");
  uint2 v = __tex2DLayered_ulong2_as_uint2(t, x, y, layer);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex2DLayered(texture<long4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex2DLayered_long4_as_int4(texture<long4, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_long4_as_int4");
  int4 v = __tex2DLayered_long4_as_int4(t, x, y, layer);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex2DLayered(texture<ulong4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex2DLayered_ulong4_as_uint4(texture<ulong4, 0xF2, cudaReadModeElementType>, float, float, int)  asm("__tex2DLayered_ulong4_as_uint4");
  uint4 v = __tex2DLayered_ulong4_as_uint4(t, x, y, layer);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayered(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayered(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayered(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayered(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float4") ;




#line 712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayered(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char_as_schar") ;
#line 714 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayered(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayered(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayered(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayered(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayered(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayered(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayered(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayered(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort4") ;
#line 732 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"











#line 744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex3D(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char_as_schar") ;
#line 746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex3D(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex3D(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex3D(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex3D(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex3D(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex3D(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex3D(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex3D(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex3D(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex3D(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex3D(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex3D(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex3D(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex3D(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex3D(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex3D(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex3D(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex3D(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex3D(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex3D(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex3D(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex3D(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex3D(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex3D(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint4") ;

static __declspec(__device__) __forceinline long tex3D(texture<long, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex3D_long_as_int(texture<long, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_long_as_int");
  return __tex3D_long_as_int(t, x, y, z);
}

static __declspec(__device__) __forceinline unsigned long tex3D(texture<unsigned long, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex3D_ulong_as_uint(texture<unsigned long, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_ulong_as_uint");
  return __tex3D_ulong_as_uint(t, x, y, z);
}

static __declspec(__device__) __forceinline long1 tex3D(texture<long1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex3D_long1_as_int1(texture<long1, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_long1_as_int1");
  int1 v = __tex3D_long1_as_int1(t, x, y, z);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex3D(texture<ulong1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex3D_ulong1_as_uint1(texture<ulong1, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_ulong1_as_uint1");
  uint1 v = __tex3D_ulong1_as_uint1(t, x, y, z);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex3D(texture<long2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex3D_long2_as_int2(texture<long2, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_long2_as_int2");
  int2 v = __tex3D_long2_as_int2(t, x, y, z);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex3D(texture<ulong2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex3D_ulong2_as_uint2(texture<ulong2, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_ulong2_as_uint2");
  uint2 v = __tex3D_ulong2_as_uint2(t, x, y, z);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex3D(texture<long4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex3D_long4_as_int4(texture<long4, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_long4_as_int4");
  int4 v = __tex3D_long4_as_int4(t, x, y, z);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex3D(texture<ulong4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex3D_ulong4_as_uint4(texture<ulong4, 0x03, cudaReadModeElementType>, float, float, float)  asm("__tex3D_ulong4_as_uint4");
  uint4 v = __tex3D_ulong4_as_uint4(t, x, y, z);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 833 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3D(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3D(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3D(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3D(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float4") ;




#line 842 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3D(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char_as_schar") ;
#line 844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3D(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex3D(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3D(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3D(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3D(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3D(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3D(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3D(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex3D(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex3D(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3D(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3D(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3D(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3D(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3D(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3D(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort4") ;
#line 862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char texCubemap(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char_as_schar") ;
#line 875 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char texCubemap(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char texCubemap(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 texCubemap(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 texCubemap(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 texCubemap(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 texCubemap(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 texCubemap(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 texCubemap(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short texCubemap(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short texCubemap(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 texCubemap(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 texCubemap(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 texCubemap(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 texCubemap(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 texCubemap(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 texCubemap(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int texCubemap(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int texCubemap(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 texCubemap(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 texCubemap(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 texCubemap(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 texCubemap(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 texCubemap(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 texCubemap(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint4") ;

static __declspec(__device__) __forceinline long texCubemap(texture<long, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __texCubemap_long_as_int(texture<long, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_long_as_int");
  return __texCubemap_long_as_int(t, x, y, z);
}

static __declspec(__device__) __forceinline unsigned long texCubemap(texture<unsigned long, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __texCubemap_ulong_as_uint(texture<unsigned long, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_ulong_as_uint");
  return __texCubemap_ulong_as_uint(t, x, y, z);
}

static __declspec(__device__) __forceinline long1 texCubemap(texture<long1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __texCubemap_long1_as_int1(texture<long1, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_long1_as_int1");
  int1 v = __texCubemap_long1_as_int1(t, x, y, z);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 texCubemap(texture<ulong1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __texCubemap_ulong1_as_uint1(texture<ulong1, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_ulong1_as_uint1");
  uint1 v = __texCubemap_ulong1_as_uint1(t, x, y, z);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 texCubemap(texture<long2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __texCubemap_long2_as_int2(texture<long2, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_long2_as_int2");
  int2 v = __texCubemap_long2_as_int2(t, x, y, z);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 texCubemap(texture<ulong2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __texCubemap_ulong2_as_uint2(texture<ulong2, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_ulong2_as_uint2");
  uint2 v = __texCubemap_ulong2_as_uint2(t, x, y, z);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 texCubemap(texture<long4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __texCubemap_long4_as_int4(texture<long4, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_long4_as_int4");
  int4 v = __texCubemap_long4_as_int4(t, x, y, z);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 texCubemap(texture<ulong4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __texCubemap_ulong4_as_uint4(texture<ulong4, 0x0C, cudaReadModeElementType>, float, float, float)  asm("__texCubemap_ulong4_as_uint4");
  uint4 v = __texCubemap_ulong4_as_uint4(t, x, y, z);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 962 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemap(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemap(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemap(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemap(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float4") ;



#line 970 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemap(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char_as_schar") ;
#line 972 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemap(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemap(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemap(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemap(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemap(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemap(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemap(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemap(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float texCubemap(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemap(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemap(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemap(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemap(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemap(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemap(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemap(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort4") ;
#line 990 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 1001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char texCubemapLayered(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char_as_schar") ;
#line 1003 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char texCubemapLayered(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short texCubemapLayered(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int texCubemapLayered(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int texCubemapLayered(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 texCubemapLayered(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 texCubemapLayered(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 texCubemapLayered(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 texCubemapLayered(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 texCubemapLayered(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 texCubemapLayered(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint4") ;

static __declspec(__device__) __forceinline long texCubemapLayered(texture<long, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __texCubemapLayered_long_as_int(texture<long, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_long_as_int");
  return __texCubemapLayered_long_as_int(t, x, y, z, layer);
}

static __declspec(__device__) __forceinline unsigned long texCubemapLayered(texture<unsigned long, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned __texCubemapLayered_ulong_as_uint(texture<unsigned long, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_ulong_as_uint");
  return __texCubemapLayered_ulong_as_uint(t, x, y, z, layer);
}

static __declspec(__device__) __forceinline long1 texCubemapLayered(texture<long1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __texCubemapLayered_long1_as_int1(texture<long1, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_long1_as_int1");
  int1 v =  __texCubemapLayered_long1_as_int1(t, x, y, z, layer);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 texCubemapLayered(texture<ulong1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __texCubemapLayered_ulong1_as_uint1(texture<ulong1, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_ulong1_as_uint1");
  uint1 v =  __texCubemapLayered_ulong1_as_uint1(t, x, y, z, layer);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 texCubemapLayered(texture<long2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __texCubemapLayered_long2_as_int2(texture<long2, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_long2_as_int2");
  int2 v =  __texCubemapLayered_long2_as_int2(t, x, y, z, layer);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 texCubemapLayered(texture<ulong2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __texCubemapLayered_ulong2_as_uint2(texture<ulong2, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_ulong2_as_uint2");
  uint2 v =  __texCubemapLayered_ulong2_as_uint2(t, x, y, z, layer);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 texCubemapLayered(texture<long4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __texCubemapLayered_long4_as_int4(texture<long4, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_long4_as_int4");
  int4 v =  __texCubemapLayered_long4_as_int4(t, x, y, z, layer);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 texCubemapLayered(texture<ulong4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __texCubemapLayered_ulong4_as_uint4(texture<ulong4, 0xFC, cudaReadModeElementType>, float, float, float, int)  asm("__texCubemapLayered_ulong4_as_uint4");
  uint4 v =  __texCubemapLayered_ulong4_as_uint4(t, x, y, z, layer);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 1090 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayered(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayered(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayered(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayered(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float4") ;



#line 1098 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayered(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char_as_schar") ;
#line 1100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayered(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayered(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort4") ;
#line 1118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"




















































__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2Dgather(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2Dgather(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2Dgather(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2Dgather(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2Dgather(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2Dgather(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2Dgather(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2Dgather(texture<char3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char3") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2Dgather(texture<uchar3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar3") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2Dgather(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2Dgather(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2Dgather(texture<signed short, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2Dgather(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2Dgather(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2Dgather(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2Dgather(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2Dgather(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2Dgather(texture<short3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short3") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2Dgather(texture<ushort3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort3") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2Dgather(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2Dgather(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort4") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2Dgather(texture<signed int, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2Dgather(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2Dgather(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2Dgather(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2Dgather(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2Dgather(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2Dgather(texture<int3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int3") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2Dgather(texture<uint3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint3") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2Dgather(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2Dgather(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<float3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float3") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float4") ;


__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<char3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char3") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<uchar3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar3") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<signed short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<short3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short3") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<ushort3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort3") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2Dgather(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort4") ;
#line 1230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 1241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex1DLod(texture<char, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char_as_schar") ;
#line 1243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex1DLod(texture<signed char, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex1DLod(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex1DLod(texture<char1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex1DLod(texture<uchar1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex1DLod(texture<char2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex1DLod(texture<uchar2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex1DLod(texture<char4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex1DLod(texture<uchar4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex1DLod(texture<short, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex1DLod(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex1DLod(texture<short1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex1DLod(texture<ushort1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex1DLod(texture<short2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex1DLod(texture<ushort2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex1DLod(texture<short4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex1DLod(texture<ushort4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex1DLod(texture<int, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex1DLod(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex1DLod(texture<int1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex1DLod(texture<uint1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex1DLod(texture<int2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex1DLod(texture<uint2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex1DLod(texture<int4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex1DLod(texture<uint4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint4") ;

static __declspec(__device__) __forceinline long tex1DLod(texture<long, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex1DLod_long_as_int(texture<long, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_long_as_int");
  return __tex1DLod_long_as_int(t, x, level);
}

static __declspec(__device__) __forceinline unsigned long tex1DLod(texture<unsigned long, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned __tex1DLod_ulong_as_uint(texture<unsigned long, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_ulong_as_uint");
  return __tex1DLod_ulong_as_uint(t, x, level);
}

static __declspec(__device__) __forceinline long1 tex1DLod(texture<long1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex1DLod_long1_as_int1(texture<long1, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_long1_as_int1");
  int1 v = __tex1DLod_long1_as_int1(t, x, level);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex1DLod(texture<ulong1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex1DLod_ulong1_as_uint1(texture<ulong1, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_ulong1_as_uint1");
  uint1 v = __tex1DLod_ulong1_as_uint1(t, x, level);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex1DLod(texture<long2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex1DLod_long2_as_int2(texture<long2, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_long2_as_int2");
  int2 v = __tex1DLod_long2_as_int2(t, x, level);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex1DLod(texture<ulong2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex1DLod_ulong2_as_uint2(texture<ulong2, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_ulong2_as_uint2");
  uint2 v = __tex1DLod_ulong2_as_uint2(t, x, level);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex1DLod(texture<long4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex1DLod_long4_as_int4(texture<long4, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_long4_as_int4");
  int4 v = __tex1DLod_long4_as_int4(t, x, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex1DLod(texture<ulong4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex1DLod_ulong4_as_uint4(texture<ulong4, 0x01, cudaReadModeElementType>, float, float)  asm("__tex1DLod_ulong4_as_uint4");
  uint4 v = __tex1DLod_ulong4_as_uint4(t, x, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 1330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLod(texture<float, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLod(texture<float1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLod(texture<float2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLod(texture<float4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float4") ;




#line 1339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLod(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char_as_schar") ;
#line 1341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLod(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLod(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLod(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLod(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLod(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLod(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLod(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLod(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLod(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLod(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLod(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLod(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLod(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLod(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLod(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLod(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort4") ;
#line 1358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 1369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex2DLod(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char_as_schar") ;
#line 1371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex2DLod(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex2DLod(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex2DLod(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex2DLod(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex2DLod(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex2DLod(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2DLod(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2DLod(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex2DLod(texture<short, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex2DLod(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex2DLod(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex2DLod(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex2DLod(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex2DLod(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2DLod(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2DLod(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex2DLod(texture<int, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex2DLod(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex2DLod(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex2DLod(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex2DLod(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex2DLod(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2DLod(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2DLod(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint4") ;

static __declspec(__device__) __forceinline long tex2DLod(texture<long, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex2DLod_long_as_int(texture<long, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_long_as_int");
  return __tex2DLod_long_as_int(t, x, y, level);
}

static __declspec(__device__) __forceinline unsigned long tex2DLod(texture<unsigned long, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex2DLod_ulong_as_uint(texture<unsigned long, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_ulong_as_uint");
  return __tex2DLod_ulong_as_uint(t, x, y, level);
}

static __declspec(__device__) __forceinline long1 tex2DLod(texture<long1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex2DLod_long1_as_int1(texture<long1, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_long1_as_int1");
  int1 v = __tex2DLod_long1_as_int1(t, x, y, level);
  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex2DLod(texture<ulong1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex2DLod_ulong1_as_uint1(texture<ulong1, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_ulong1_as_uint1");
  uint1 v = __tex2DLod_ulong1_as_uint1(t, x, y, level);
  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex2DLod(texture<long2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex2DLod_long2_as_int2(texture<long2, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_long2_as_int2");
  int2 v = __tex2DLod_long2_as_int2(t, x, y, level);
  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex2DLod(texture<ulong2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex2DLod_ulong2_as_uint2(texture<ulong2, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_ulong2_as_uint2");
  uint2 v = __tex2DLod_ulong2_as_uint2(t, x, y, level);
  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex2DLod(texture<long4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex2DLod_long4_as_int4(texture<long4, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_long4_as_int4");
  int4 v = __tex2DLod_long4_as_int4(t, x, y, level);
  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex2DLod(texture<ulong4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex2DLod_ulong4_as_uint4(texture<ulong4, 0x02, cudaReadModeElementType>, float, float, float)  asm("__tex2DLod_ulong4_as_uint4");
  uint4 v = __tex2DLod_ulong4_as_uint4(t, x, y, level);
  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 1452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLod(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLod(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLod(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLod(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float4") ;




#line 1462 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLod(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char_as_schar") ;
#line 1464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLod(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLod(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLod(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLod(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLod(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLod(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLod(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLod(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLod(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLod(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLod(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLod(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLod(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLod(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLod(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLod(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort4") ;
#line 1481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"











#line 1493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex1DLayeredLod(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char_as_schar") ;
#line 1495 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex1DLayeredLod(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex1DLayeredLod(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex1DLayeredLod(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex1DLayeredLod(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex1DLayeredLod(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex1DLayeredLod(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex1DLayeredLod(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex1DLayeredLod(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex1DLayeredLod(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex1DLayeredLod(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex1DLayeredLod(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex1DLayeredLod(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex1DLayeredLod(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex1DLayeredLod(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex1DLayeredLod(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex1DLayeredLod(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex1DLayeredLod(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex1DLayeredLod(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex1DLayeredLod(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex1DLayeredLod(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex1DLayeredLod(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex1DLayeredLod(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex1DLayeredLod(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex1DLayeredLod(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint4") ;

static __declspec(__device__) __forceinline long tex1DLayeredLod(texture<long, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex1DLayeredLod_long_as_int(texture<long, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_long_as_int");
  return __tex1DLayeredLod_long_as_int(t, x, layer, level);
}

static __declspec(__device__) __forceinline unsigned long tex1DLayeredLod(texture<unsigned long, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex1DLayeredLod_ulong_as_uint(texture<unsigned long, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_ulong_as_uint");
  return __tex1DLayeredLod_ulong_as_uint(t, x, layer, level);
}

static __declspec(__device__) __forceinline long1 tex1DLayeredLod(texture<long1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex1DLayeredLod_long1_as_int1(texture<long1, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_long1_as_int1");
  int1 v = __tex1DLayeredLod_long1_as_int1(t, x, layer, level);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex1DLayeredLod(texture<ulong1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex1DLayeredLod_ulong1_as_uint1(texture<ulong1, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_ulong1_as_uint1");
  uint1 v = __tex1DLayeredLod_ulong1_as_uint1(t, x, layer, level);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex1DLayeredLod(texture<long2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex1DLayeredLod_long2_as_int2(texture<long2, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_long2_as_int2");
  int2 v = __tex1DLayeredLod_long2_as_int2(t, x, layer, level);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex1DLayeredLod(texture<ulong2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex1DLayeredLod_ulong2_as_uint2(texture<ulong2, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_ulong2_as_uint2");
  uint2 v = __tex1DLayeredLod_ulong2_as_uint2(t, x, layer, level);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex1DLayeredLod(texture<long4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex1DLayeredLod_long4_as_int4(texture<long4, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_long4_as_int4");
  int4 v = __tex1DLayeredLod_long4_as_int4(t, x, layer, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex1DLayeredLod(texture<ulong4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex1DLayeredLod_ulong4_as_uint4(texture<ulong4, 0xF1, cudaReadModeElementType>, float, int, float)  asm("__tex1DLayeredLod_ulong4_as_uint4");
  uint4 v = __tex1DLayeredLod_ulong4_as_uint4(t, x, layer, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 1582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredLod(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredLod(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredLod(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredLod(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float4") ;



#line 1590 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredLod(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char_as_schar") ;
#line 1592 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredLod(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredLod(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredLod(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredLod(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredLod(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredLod(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredLod(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredLod(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredLod(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredLod(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredLod(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredLod(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredLod(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredLod(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredLod(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredLod(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort4") ;
#line 1610 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 1621 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex2DLayeredLod(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char_as_schar") ;
#line 1623 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex2DLayeredLod(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex2DLayeredLod(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex2DLayeredLod(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex2DLayeredLod(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex2DLayeredLod(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex2DLayeredLod(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2DLayeredLod(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2DLayeredLod(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex2DLayeredLod(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex2DLayeredLod(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex2DLayeredLod(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex2DLayeredLod(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex2DLayeredLod(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex2DLayeredLod(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2DLayeredLod(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2DLayeredLod(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex2DLayeredLod(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex2DLayeredLod(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex2DLayeredLod(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex2DLayeredLod(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex2DLayeredLod(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex2DLayeredLod(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2DLayeredLod(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2DLayeredLod(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint4") ;

static __declspec(__device__) __forceinline long tex2DLayeredLod(texture<long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex2DLayeredLod_long_as_int(texture<long, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_long_as_int");
  return __tex2DLayeredLod_long_as_int(t, x, y, layer, level);
}

static __declspec(__device__) __forceinline unsigned long tex2DLayeredLod(texture<unsigned long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex2DLayeredLod_ulong_as_uint(texture<unsigned long, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_ulong_as_uint");
  return __tex2DLayeredLod_ulong_as_uint(t, x, y, layer, level);
}

static __declspec(__device__) __forceinline long1 tex2DLayeredLod(texture<long1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex2DLayeredLod_long1_as_int1(texture<long1, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_long1_as_int1");
  int1 v = __tex2DLayeredLod_long1_as_int1(t, x, y, layer, level);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex2DLayeredLod(texture<ulong1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex2DLayeredLod_ulong1_as_uint1(texture<ulong1, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_ulong1_as_uint1");
  uint1 v = __tex2DLayeredLod_ulong1_as_uint1(t, x, y, layer, level);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex2DLayeredLod(texture<long2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex2DLayeredLod_long2_as_int2(texture<long2, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_long2_as_int2");
  int2 v = __tex2DLayeredLod_long2_as_int2(t, x, y, layer, level);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex2DLayeredLod(texture<ulong2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex2DLayeredLod_ulong2_as_uint2(texture<ulong2, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_ulong2_as_uint2");
  uint2 v = __tex2DLayeredLod_ulong2_as_uint2(t, x, y, layer, level);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex2DLayeredLod(texture<long4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex2DLayeredLod_long4_as_int4(texture<long4, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_long4_as_int4");
  int4 v = __tex2DLayeredLod_long4_as_int4(t, x, y, layer, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex2DLayeredLod(texture<ulong4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex2DLayeredLod_ulong4_as_uint4(texture<ulong4, 0xF2, cudaReadModeElementType>, float, float, int, float)  asm("__tex2DLayeredLod_ulong4_as_uint4");
  uint4 v = __tex2DLayeredLod_ulong4_as_uint4(t, x, y, layer, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 1710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredLod(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredLod(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredLod(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredLod(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float4") ;



#line 1718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredLod(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char_as_schar") ;
#line 1720 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredLod(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredLod(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredLod(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredLod(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredLod(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredLod(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredLod(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredLod(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredLod(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredLod(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredLod(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredLod(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredLod(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredLod(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredLod(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredLod(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort4") ;
#line 1738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 1749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex3DLod(texture<char, 0x03,  cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char_as_schar") ;
#line 1751 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex3DLod(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex3DLod(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex3DLod(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex3DLod(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex3DLod(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex3DLod(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex3DLod(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex3DLod(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex3DLod(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex3DLod(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex3DLod(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex3DLod(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex3DLod(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex3DLod(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex3DLod(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex3DLod(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex3DLod(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex3DLod(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex3DLod(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex3DLod(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex3DLod(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex3DLod(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex3DLod(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex3DLod(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint4") ;

static __declspec(__device__) __forceinline long tex3DLod(texture<long, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex3DLod_long_as_int(texture<long, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_long_as_int");
  return __tex3DLod_long_as_int(t, x, y, z, level);
}

static __declspec(__device__) __forceinline unsigned long tex3DLod(texture<unsigned long, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex3DLod_ulong_as_uint(texture<unsigned long, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_ulong_as_uint");
  return __tex3DLod_ulong_as_uint(t, x, y, z, level);
}

static __declspec(__device__) __forceinline long1 tex3DLod(texture<long1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex3DLod_long1_as_int1(texture<long1, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_long1_as_int1");
  int1 v = __tex3DLod_long1_as_int1(t, x, y, z, level);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex3DLod(texture<ulong1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex3DLod_ulong1_as_uint1(texture<ulong1, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_ulong1_as_uint1");
  uint1 v = __tex3DLod_ulong1_as_uint1(t, x, y, z, level);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex3DLod(texture<long2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex3DLod_long2_as_int2(texture<long2, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_long2_as_int2");
  int2 v = __tex3DLod_long2_as_int2(t, x, y, z, level);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex3DLod(texture<ulong2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex3DLod_ulong2_as_uint2(texture<ulong2, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_ulong2_as_uint2");
  uint2 v = __tex3DLod_ulong2_as_uint2(t, x, y, z, level);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex3DLod(texture<long4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex3DLod_long4_as_int4(texture<long4, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_long4_as_int4");
  int4 v = __tex3DLod_long4_as_int4(t, x, y, z, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex3DLod(texture<ulong4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex3DLod_ulong4_as_uint4(texture<ulong4, 0x03, cudaReadModeElementType>, float, float, float, float)  asm("__tex3DLod_ulong4_as_uint4");
  uint4 v = __tex3DLod_ulong4_as_uint4(t, x, y, z, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 1838 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DLod(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DLod(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DLod(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DLod(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float4") ;



#line 1846 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DLod(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char_as_schar") ;
#line 1848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DLod(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DLod(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DLod(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DLod(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DLod(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DLod(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DLod(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DLod(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex3DLod(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DLod(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DLod(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DLod(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DLod(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DLod(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DLod(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DLod(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort4") ;
#line 1866 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 1877 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char texCubemapLod(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char_as_schar") ;
#line 1879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char texCubemapLod(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char texCubemapLod(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 texCubemapLod(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 texCubemapLod(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 texCubemapLod(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 texCubemapLod(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 texCubemapLod(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 texCubemapLod(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short texCubemapLod(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short texCubemapLod(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 texCubemapLod(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 texCubemapLod(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 texCubemapLod(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 texCubemapLod(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 texCubemapLod(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 texCubemapLod(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int texCubemapLod(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int texCubemapLod(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 texCubemapLod(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 texCubemapLod(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 texCubemapLod(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 texCubemapLod(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 texCubemapLod(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 texCubemapLod(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint4") ;

static __declspec(__device__) __forceinline long texCubemapLod(texture<long, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __texCubemapLod_long_as_int(texture<long, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_long_as_int");
  return __texCubemapLod_long_as_int(t, x, y, z, level);
}

static __declspec(__device__) __forceinline unsigned long texCubemapLod(texture<unsigned long, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __texCubemapLod_ulong_as_uint(texture<unsigned long, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_ulong_as_uint");
  return __texCubemapLod_ulong_as_uint(t, x, y, z, level);
}

static __declspec(__device__) __forceinline long1 texCubemapLod(texture<long1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __texCubemapLod_long1_as_int1(texture<long1, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_long1_as_int1");
  int1 v = __texCubemapLod_long1_as_int1(t, x, y, z, level);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 texCubemapLod(texture<ulong1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __texCubemapLod_ulong1_as_uint1(texture<ulong1, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_ulong1_as_uint1");
  uint1 v = __texCubemapLod_ulong1_as_uint1(t, x, y, z, level);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 texCubemapLod(texture<long2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __texCubemapLod_long2_as_int2(texture<long2, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_long2_as_int2");
  int2 v = __texCubemapLod_long2_as_int2(t, x, y, z, level);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 texCubemapLod(texture<ulong2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __texCubemapLod_ulong2_as_uint2(texture<ulong2, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_ulong2_as_uint2");
  uint2 v = __texCubemapLod_ulong2_as_uint2(t, x, y, z, level);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 texCubemapLod(texture<long4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __texCubemapLod_long4_as_int4(texture<long4, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_long4_as_int4");
  int4 v = __texCubemapLod_long4_as_int4(t, x, y, z, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 texCubemapLod(texture<ulong4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __texCubemapLod_ulong4_as_uint4(texture<ulong4, 0x0C, cudaReadModeElementType>, float, float, float, float)  asm("__texCubemapLod_ulong4_as_uint4");
  uint4 v = __texCubemapLod_ulong4_as_uint4(t, x, y, z, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 1966 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLod(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLod(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLod(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLod(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float4") ;



#line 1974 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLod(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char_as_schar") ;
#line 1976 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLod(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLod(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLod(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLod(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLod(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLod(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLod(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLod(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLod(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLod(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLod(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLod(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLod(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLod(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLod(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLod(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort4") ;
#line 1994 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 2005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char texCubemapLayeredLod(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char_as_schar") ;
#line 2007 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char texCubemapLayeredLod(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char texCubemapLayeredLod(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 texCubemapLayeredLod(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 texCubemapLayeredLod(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 texCubemapLayeredLod(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 texCubemapLayeredLod(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 texCubemapLayeredLod(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 texCubemapLayeredLod(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short texCubemapLayeredLod(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short texCubemapLayeredLod(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 texCubemapLayeredLod(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 texCubemapLayeredLod(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 texCubemapLayeredLod(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 texCubemapLayeredLod(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 texCubemapLayeredLod(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 texCubemapLayeredLod(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int texCubemapLayeredLod(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int texCubemapLayeredLod(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 texCubemapLayeredLod(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 texCubemapLayeredLod(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 texCubemapLayeredLod(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 texCubemapLayeredLod(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 texCubemapLayeredLod(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 texCubemapLayeredLod(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint4") ;

static __declspec(__device__) __forceinline long texCubemapLayeredLod(texture<long, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __texCubemapLayeredLod_long_as_int(texture<long, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_long_as_int");
  return  __texCubemapLayeredLod_long_as_int(t, x, y, z, layer, level);
}

static __declspec(__device__) __forceinline unsigned long texCubemapLayeredLod(texture<unsigned long, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __texCubemapLayeredLod_ulong_as_uint(texture<unsigned long, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_ulong_as_uint");
  return  __texCubemapLayeredLod_ulong_as_uint(t, x, y, z, layer, level);
}

static __declspec(__device__) __forceinline long1 texCubemapLayeredLod(texture<long1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __texCubemapLayeredLod_long1_as_int1(texture<long1, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_long1_as_int1");
  int1 v = __texCubemapLayeredLod_long1_as_int1(t, x, y, z, layer, level);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 texCubemapLayeredLod(texture<ulong1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __texCubemapLayeredLod_ulong1_as_uint1(texture<ulong1, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_ulong1_as_uint1");
  uint1 v = __texCubemapLayeredLod_ulong1_as_uint1(t, x, y, z, layer, level);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 texCubemapLayeredLod(texture<long2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __texCubemapLayeredLod_long2_as_int2(texture<long2, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_long2_as_int2");
  int2 v = __texCubemapLayeredLod_long2_as_int2(t, x, y, z, layer, level);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 texCubemapLayeredLod(texture<ulong2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __texCubemapLayeredLod_ulong2_as_uint2(texture<ulong2, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_ulong2_as_uint2");
  uint2 v = __texCubemapLayeredLod_ulong2_as_uint2(t, x, y, z, layer, level);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 texCubemapLayeredLod(texture<long4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __texCubemapLayeredLod_long4_as_int4(texture<long4, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_long4_as_int4");
  int4 v = __texCubemapLayeredLod_long4_as_int4(t, x, y, z, layer, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 texCubemapLayeredLod(texture<ulong4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __texCubemapLayeredLod_ulong4_as_uint4(texture<ulong4, 0xFC, cudaReadModeElementType>, float, float, float, int, float)  asm("__texCubemapLayeredLod_ulong4_as_uint4");
  uint4 v = __texCubemapLayeredLod_ulong4_as_uint4(t, x, y, z, layer, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 2094 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayeredLod(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayeredLod(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayeredLod(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayeredLod(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float4") ;



#line 2102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayeredLod(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char_as_schar") ;
#line 2104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayeredLod(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayeredLod(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayeredLod(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayeredLod(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayeredLod(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayeredLod(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayeredLod(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayeredLod(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayeredLod(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float texCubemapLayeredLod(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayeredLod(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 texCubemapLayeredLod(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayeredLod(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 texCubemapLayeredLod(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayeredLod(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 texCubemapLayeredLod(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort4") ;
#line 2122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 2133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex1DGrad(texture<char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char_as_schar") ;
#line 2135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex1DGrad(texture<signed char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex1DGrad(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex1DGrad(texture<char1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex1DGrad(texture<uchar1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex1DGrad(texture<char2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex1DGrad(texture<uchar2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex1DGrad(texture<char4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex1DGrad(texture<uchar4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex1DGrad(texture<short, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex1DGrad(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex1DGrad(texture<short1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex1DGrad(texture<ushort1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex1DGrad(texture<short2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex1DGrad(texture<ushort2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex1DGrad(texture<short4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex1DGrad(texture<ushort4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex1DGrad(texture<int, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex1DGrad(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex1DGrad(texture<int1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex1DGrad(texture<uint1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex1DGrad(texture<int2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex1DGrad(texture<uint2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex1DGrad(texture<int4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex1DGrad(texture<uint4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint4") ;

static __declspec(__device__) __forceinline long tex1DGrad(texture<long, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex1DGrad_long_as_int(texture<long, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_long_as_int");
  return __tex1DGrad_long_as_int(t, x, dPdx, dPdy);
}

static __declspec(__device__) __forceinline unsigned long tex1DGrad(texture<unsigned long, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned __tex1DGrad_ulong_as_uint(texture<unsigned long, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_ulong_as_uint");
  return __tex1DGrad_ulong_as_uint(t, x, dPdx, dPdy);
}

static __declspec(__device__) __forceinline long1 tex1DGrad(texture<long1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex1DGrad_long1_as_int1(texture<long1, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_long1_as_int1");
  int1 v = __tex1DGrad_long1_as_int1(t, x, dPdx, dPdy);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex1DGrad(texture<ulong1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex1DGrad_ulong1_as_uint1(texture<ulong1, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_ulong1_as_uint1");
  uint1 v = __tex1DGrad_ulong1_as_uint1(t, x, dPdx, dPdy);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex1DGrad(texture<long2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex1DGrad_long2_as_int2(texture<long2, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_long2_as_int2");
  int2 v = __tex1DGrad_long2_as_int2(t, x, dPdx, dPdy);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex1DGrad(texture<ulong2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex1DGrad_ulong2_as_uint2(texture<ulong2, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_ulong2_as_uint2");
  uint2 v = __tex1DGrad_ulong2_as_uint2(t, x, dPdx, dPdy);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex1DGrad(texture<long4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex1DGrad_long4_as_int4(texture<long4, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_long4_as_int4");
  int4 v = __tex1DGrad_long4_as_int4(t, x, dPdx, dPdy);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex1DGrad(texture<ulong4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex1DGrad_ulong4_as_uint4(texture<ulong4, 0x01, cudaReadModeElementType>, float, float, float)  asm("__tex1DGrad_ulong4_as_uint4");
  uint4 v = __tex1DGrad_ulong4_as_uint4(t, x, dPdx, dPdy);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 2222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DGrad(texture<float, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DGrad(texture<float1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DGrad(texture<float2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DGrad(texture<float4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float4") ;



#line 2230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DGrad(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char_as_schar") ;
#line 2232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DGrad(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DGrad(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DGrad(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DGrad(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DGrad(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DGrad(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DGrad(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DGrad(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex1DGrad(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DGrad(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DGrad(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DGrad(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DGrad(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DGrad(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DGrad(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DGrad(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort4") ;
#line 2250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 2261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex2DGrad(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char_as_schar") ;
#line 2263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex2DGrad(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex2DGrad(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex2DGrad(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex2DGrad(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex2DGrad(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex2DGrad(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2DGrad(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2DGrad(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex2DGrad(texture<short, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex2DGrad(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex2DGrad(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex2DGrad(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex2DGrad(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex2DGrad(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2DGrad(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2DGrad(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex2DGrad(texture<int, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex2DGrad(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex2DGrad(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex2DGrad(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex2DGrad(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex2DGrad(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2DGrad(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2DGrad(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint4") ;

static __declspec(__device__) __forceinline long tex2DGrad(texture<long, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex2DGrad_long_as_int(texture<long, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_long_as_int");
  return __tex2DGrad_long_as_int(t, x, y, dPdx, dPdy);
}

static __declspec(__device__) __forceinline unsigned long tex2DGrad(texture<unsigned long, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__) unsigned int __tex2DGrad_ulong_as_uint(texture<unsigned long, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_ulong_as_uint");
  return __tex2DGrad_ulong_as_uint(t, x, y, dPdx, dPdy);
}

static __declspec(__device__) __forceinline long1 tex2DGrad(texture<long1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex2DGrad_long1_as_int1(texture<long1, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_long1_as_int1");
  int1 v = __tex2DGrad_long1_as_int1(t, x, y, dPdx, dPdy);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex2DGrad(texture<ulong1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex2DGrad_ulong1_as_uint1(texture<ulong1, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_ulong1_as_uint1");
  uint1 v = __tex2DGrad_ulong1_as_uint1(t, x, y, dPdx, dPdy);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex2DGrad(texture<long2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex2DGrad_long2_as_int2(texture<long2, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_long2_as_int2");
  int2 v = __tex2DGrad_long2_as_int2(t, x, y, dPdx, dPdy);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex2DGrad(texture<ulong2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex2DGrad_ulong2_as_uint2(texture<ulong2, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_ulong2_as_uint2");
  uint2 v = __tex2DGrad_ulong2_as_uint2(t, x, y, dPdx, dPdy);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex2DGrad(texture<long4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex2DGrad_long4_as_int4(texture<long4, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_long4_as_int4");
  int4 v = __tex2DGrad_long4_as_int4(t, x, y, dPdx, dPdy);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex2DGrad(texture<ulong4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex2DGrad_ulong4_as_uint4(texture<ulong4, 0x02, cudaReadModeElementType>, float, float, float2, float2)  asm("__tex2DGrad_ulong4_as_uint4");
  uint4 v = __tex2DGrad_ulong4_as_uint4(t, x, y, dPdx, dPdy);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 2350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DGrad(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DGrad(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DGrad(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DGrad(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float4") ;



#line 2358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DGrad(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char_as_schar") ;
#line 2360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DGrad(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DGrad(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DGrad(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DGrad(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DGrad(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DGrad(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DGrad(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DGrad(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex2DGrad(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DGrad(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DGrad(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DGrad(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DGrad(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DGrad(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DGrad(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DGrad(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort4") ;
#line 2378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 2389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex1DLayeredGrad(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char_as_schar") ;
#line 2391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex1DLayeredGrad(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex1DLayeredGrad(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex1DLayeredGrad(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex1DLayeredGrad(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex1DLayeredGrad(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex1DLayeredGrad(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex1DLayeredGrad(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex1DLayeredGrad(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex1DLayeredGrad(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex1DLayeredGrad(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex1DLayeredGrad(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex1DLayeredGrad(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex1DLayeredGrad(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex1DLayeredGrad(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex1DLayeredGrad(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex1DLayeredGrad(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex1DLayeredGrad(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex1DLayeredGrad(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex1DLayeredGrad(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex1DLayeredGrad(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex1DLayeredGrad(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex1DLayeredGrad(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex1DLayeredGrad(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex1DLayeredGrad(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint4") ;

static __declspec(__device__) __forceinline long tex1DLayeredGrad(texture<long, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex1DLayeredGrad_long_as_int(texture<long, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_long_as_int");
  return __tex1DLayeredGrad_long_as_int(t, x, layer, dPdx, dPdy);
}

static __declspec(__device__) __forceinline unsigned long tex1DLayeredGrad(texture<unsigned long, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex1DLayeredGrad_ulong_as_uint(texture<unsigned long, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_ulong_as_uint");
  return __tex1DLayeredGrad_ulong_as_uint(t, x, layer, dPdx, dPdy);
}

static __declspec(__device__) __forceinline long1 tex1DLayeredGrad(texture<long1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex1DLayeredGrad_long1_as_int1(texture<long1, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_long1_as_int1");
  int1 v = __tex1DLayeredGrad_long1_as_int1(t, x, layer, dPdx, dPdy);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex1DLayeredGrad(texture<ulong1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex1DLayeredGrad_ulong1_as_uint1(texture<ulong1, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_ulong1_as_uint1");
  uint1 v = __tex1DLayeredGrad_ulong1_as_uint1(t, x, layer, dPdx, dPdy);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex1DLayeredGrad(texture<long2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex1DLayeredGrad_long2_as_int2(texture<long2, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_long2_as_int2");
  int2 v = __tex1DLayeredGrad_long2_as_int2(t, x, layer, dPdx, dPdy);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex1DLayeredGrad(texture<ulong2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex1DLayeredGrad_ulong2_as_uint2(texture<ulong2, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_ulong2_as_uint2");
  uint2 v = __tex1DLayeredGrad_ulong2_as_uint2(t, x, layer, dPdx, dPdy);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex1DLayeredGrad(texture<long4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex1DLayeredGrad_long4_as_int4(texture<long4, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_long4_as_int4");
  int4 v = __tex1DLayeredGrad_long4_as_int4(t, x, layer, dPdx, dPdy);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex1DLayeredGrad(texture<ulong4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex1DLayeredGrad_ulong4_as_uint4(texture<ulong4, 0xF1, cudaReadModeElementType>, float, int, float, float)  asm("__tex1DLayeredGrad_ulong4_as_uint4");
  uint4 v = __tex1DLayeredGrad_ulong4_as_uint4(t, x, layer, dPdx, dPdy);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 2478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredGrad(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredGrad(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredGrad(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredGrad(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float4") ;




#line 2487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredGrad(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char_as_schar") ;
#line 2489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredGrad(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredGrad(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredGrad(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredGrad(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredGrad(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredGrad(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredGrad(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredGrad(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredGrad(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex1DLayeredGrad(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredGrad(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex1DLayeredGrad(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredGrad(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex1DLayeredGrad(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredGrad(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex1DLayeredGrad(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort4") ;
#line 2507 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 2518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex2DLayeredGrad(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char_as_schar") ;
#line 2520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex2DLayeredGrad(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex2DLayeredGrad(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex2DLayeredGrad(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex2DLayeredGrad(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex2DLayeredGrad(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex2DLayeredGrad(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex2DLayeredGrad(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex2DLayeredGrad(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex2DLayeredGrad(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex2DLayeredGrad(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex2DLayeredGrad(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex2DLayeredGrad(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex2DLayeredGrad(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex2DLayeredGrad(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex2DLayeredGrad(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex2DLayeredGrad(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex2DLayeredGrad(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex2DLayeredGrad(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex2DLayeredGrad(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex2DLayeredGrad(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex2DLayeredGrad(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex2DLayeredGrad(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex2DLayeredGrad(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex2DLayeredGrad(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint4") ;

static __declspec(__device__) __forceinline long tex2DLayeredGrad(texture<long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex2DLayeredGrad_long_as_int(texture<long, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_long_as_int");
  return  __tex2DLayeredGrad_long_as_int(t, x, y, layer, dPdx, dPdy);
}

static __declspec(__device__) __forceinline unsigned long tex2DLayeredGrad(texture<unsigned long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex2DLayeredGrad_ulong_as_uint(texture<unsigned long, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_ulong_as_uint");
  return  __tex2DLayeredGrad_ulong_as_uint(t, x, y, layer, dPdx, dPdy);
}

static __declspec(__device__) __forceinline long1 tex2DLayeredGrad(texture<long1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex2DLayeredGrad_long1_as_int1(texture<long1, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_long1_as_int1");
  int1 v = __tex2DLayeredGrad_long1_as_int1(t, x, y, layer, dPdx, dPdy);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex2DLayeredGrad(texture<ulong1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex2DLayeredGrad_ulong1_as_uint1(texture<ulong1, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_ulong1_as_uint1");
  uint1 v = __tex2DLayeredGrad_ulong1_as_uint1(t, x, y, layer, dPdx, dPdy);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex2DLayeredGrad(texture<long2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex2DLayeredGrad_long2_as_int2(texture<long2, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_long2_as_int2");
  int2 v = __tex2DLayeredGrad_long2_as_int2(t, x, y, layer, dPdx, dPdy);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex2DLayeredGrad(texture<ulong2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex2DLayeredGrad_ulong2_as_uint2(texture<ulong2, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_ulong2_as_uint2");
  uint2 v = __tex2DLayeredGrad_ulong2_as_uint2(t, x, y, layer, dPdx, dPdy);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex2DLayeredGrad(texture<long4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex2DLayeredGrad_long4_as_int4(texture<long4, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_long4_as_int4");
  int4 v = __tex2DLayeredGrad_long4_as_int4(t, x, y, layer, dPdx, dPdy);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex2DLayeredGrad(texture<ulong4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex2DLayeredGrad_ulong4_as_uint4(texture<ulong4, 0xF2, cudaReadModeElementType>, float, float, int, float2, float2)  asm("__tex2DLayeredGrad_ulong4_as_uint4");
  uint4 v = __tex2DLayeredGrad_ulong4_as_uint4(t, x, y, layer, dPdx, dPdy);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 2607 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredGrad(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredGrad(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredGrad(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredGrad(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float4") ;



#line 2615 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredGrad(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char_as_schar") ;
#line 2617 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredGrad(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredGrad(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredGrad(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredGrad(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredGrad(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredGrad(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredGrad(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredGrad(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredGrad(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex2DLayeredGrad(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredGrad(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex2DLayeredGrad(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredGrad(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex2DLayeredGrad(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredGrad(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex2DLayeredGrad(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort4") ;
#line 2635 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"










#line 2646 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) char tex3DGrad(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char_as_schar") ;
#line 2648 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) signed char tex3DGrad(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned char tex3DGrad(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) char1 tex3DGrad(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar1 tex3DGrad(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) char2 tex3DGrad(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar2 tex3DGrad(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) char4 tex3DGrad(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uchar4 tex3DGrad(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) short tex3DGrad(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned short tex3DGrad(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) short1 tex3DGrad(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort1 tex3DGrad(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) short2 tex3DGrad(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort2 tex3DGrad(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) short4 tex3DGrad(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) ushort4 tex3DGrad(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort4") ;

__declspec(__device__) __declspec(__cudart_builtin__) int tex3DGrad(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int") ;
__declspec(__device__) __declspec(__cudart_builtin__) unsigned int tex3DGrad(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint") ;
__declspec(__device__) __declspec(__cudart_builtin__) int1 tex3DGrad(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int1") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint1 tex3DGrad(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint1") ;
__declspec(__device__) __declspec(__cudart_builtin__) int2 tex3DGrad(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int2") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint2 tex3DGrad(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint2") ;
__declspec(__device__) __declspec(__cudart_builtin__) int4 tex3DGrad(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int4") ;
__declspec(__device__) __declspec(__cudart_builtin__) uint4 tex3DGrad(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint4") ;

static __declspec(__device__) __forceinline long tex3DGrad(texture<long, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int __tex3DGrad_long_as_int(texture<long, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_long_as_int");
  return __tex3DGrad_long_as_int(t, x, y, z, dPdx, dPdy);
}

static __declspec(__device__) __forceinline unsigned long tex3DGrad(texture<unsigned long, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  unsigned int __tex3DGrad_ulong_as_uint(texture<unsigned long, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_ulong_as_uint");
  return __tex3DGrad_ulong_as_uint(t, x, y, z, dPdx, dPdy);

}

static __declspec(__device__) __forceinline long1 tex3DGrad(texture<long1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int1 __tex3DGrad_long1_as_int1(texture<long1, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_long1_as_int1");
  int1 v = __tex3DGrad_long1_as_int1(t, x, y, z, dPdx, dPdy);

  return make_long1(v.x);
}

static __declspec(__device__) __forceinline ulong1 tex3DGrad(texture<ulong1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint1 __tex3DGrad_ulong1_as_uint1(texture<ulong1, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_ulong1_as_uint1");
  uint1 v = __tex3DGrad_ulong1_as_uint1(t, x, y, z, dPdx, dPdy);

  return make_ulong1(v.x);
}

static __declspec(__device__) __forceinline long2 tex3DGrad(texture<long2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int2 __tex3DGrad_long2_as_int2(texture<long2, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_long2_as_int2");
  int2 v = __tex3DGrad_long2_as_int2(t, x, y, z, dPdx, dPdy);

  return make_long2(v.x, v.y);
}

static __declspec(__device__) __forceinline ulong2 tex3DGrad(texture<ulong2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint2 __tex3DGrad_ulong2_as_uint2(texture<ulong2, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_ulong2_as_uint2");
  uint2 v = __tex3DGrad_ulong2_as_uint2(t, x, y, z, dPdx, dPdy);

  return make_ulong2(v.x, v.y);
}

static __declspec(__device__) __forceinline long4 tex3DGrad(texture<long4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  int4 __tex3DGrad_long4_as_int4(texture<long4, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_long4_as_int4");
  int4 v = __tex3DGrad_long4_as_int4(t, x, y, z, dPdx, dPdy);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __declspec(__device__) __forceinline ulong4 tex3DGrad(texture<ulong4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  __declspec(__device__) __declspec(__cudart_builtin__)  uint4 __tex3DGrad_ulong4_as_uint4(texture<ulong4, 0x03, cudaReadModeElementType>, float, float, float, float4, float4)  asm("__tex3DGrad_ulong4_as_uint4");
  uint4 v = __tex3DGrad_ulong4_as_uint4(t, x, y, z, dPdx, dPdy);

  return make_ulong4(v.x, v.y, v.z, v.w);
}
#line 2736 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DGrad(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DGrad(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DGrad(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DGrad(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float4") ;



#line 2744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DGrad(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char_as_schar") ;
#line 2746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DGrad(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_schar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DGrad(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DGrad(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DGrad(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DGrad(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DGrad(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DGrad(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DGrad(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar4") ;

__declspec(__device__) __declspec(__cudart_builtin__) float tex3DGrad(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short") ;
__declspec(__device__) __declspec(__cudart_builtin__) float tex3DGrad(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DGrad(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float1 tex3DGrad(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort1") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DGrad(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float2 tex3DGrad(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort2") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DGrad(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short4") ;
__declspec(__device__) __declspec(__cudart_builtin__) float4 tex3DGrad(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort4") ;
#line 2764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"

#line 2766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"

#line 2768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"


#line 4527 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"


















































































































































































#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"













#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(char *, cudaTextureObject_t, int) asm("__itex1Dfetch_char_as_schar");
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(signed char *, cudaTextureObject_t, int) asm("__itex1Dfetch_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(char1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(char2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(char4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(unsigned char *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(uchar1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(uchar2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(uchar4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(short *, cudaTextureObject_t, int) asm("__itex1Dfetch_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(short1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(short2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(short4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(unsigned short *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(ushort1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(ushort2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(ushort4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(int *, cudaTextureObject_t, int) asm("__itex1Dfetch_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(int1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(int2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(int4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(unsigned int *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(uint1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(uint2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(uint4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(long *, cudaTextureObject_t, int) asm("__itex1Dfetch_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(long1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(long2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(long4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(unsigned long *, cudaTextureObject_t, int) asm("__itex1Dfetch_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(ulong1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(ulong2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(ulong4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ulong4");
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(float *, cudaTextureObject_t, int) asm("__itex1Dfetch_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(float1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(float2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1Dfetch(float4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float4");
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"


template <class T>
static __declspec(__device__) T tex1Dfetch(cudaTextureObject_t texObject, int x)
{
  T ret;
  tex1Dfetch(&ret, texObject, x);
  return ret;
}













#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(char *, cudaTextureObject_t, float) asm("__itex1D_char_as_schar");
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(signed char *, cudaTextureObject_t, float) asm("__itex1D_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(char1 *, cudaTextureObject_t, float) asm("__itex1D_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(char2 *, cudaTextureObject_t, float) asm("__itex1D_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(char4 *, cudaTextureObject_t, float) asm("__itex1D_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(unsigned char *, cudaTextureObject_t, float) asm("__itex1D_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(uchar1 *, cudaTextureObject_t, float) asm("__itex1D_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(uchar2 *, cudaTextureObject_t, float) asm("__itex1D_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(uchar4 *, cudaTextureObject_t, float) asm("__itex1D_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(short *, cudaTextureObject_t, float) asm("__itex1D_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(short1 *, cudaTextureObject_t, float) asm("__itex1D_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(short2 *, cudaTextureObject_t, float) asm("__itex1D_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(short4 *, cudaTextureObject_t, float) asm("__itex1D_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(unsigned short *, cudaTextureObject_t, float) asm("__itex1D_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(ushort1 *, cudaTextureObject_t, float) asm("__itex1D_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(ushort2 *, cudaTextureObject_t, float) asm("__itex1D_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(ushort4 *, cudaTextureObject_t, float) asm("__itex1D_ushort4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(int *, cudaTextureObject_t, float) asm("__itex1D_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(int1 *, cudaTextureObject_t, float) asm("__itex1D_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(int2 *, cudaTextureObject_t, float) asm("__itex1D_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(int4 *, cudaTextureObject_t, float) asm("__itex1D_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(unsigned int *, cudaTextureObject_t, float) asm("__itex1D_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(uint1 *, cudaTextureObject_t, float) asm("__itex1D_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(uint2 *, cudaTextureObject_t, float) asm("__itex1D_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(uint4 *, cudaTextureObject_t, float) asm("__itex1D_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(long *, cudaTextureObject_t, float) asm("__itex1D_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(long1 *, cudaTextureObject_t, float) asm("__itex1D_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(long2 *, cudaTextureObject_t, float) asm("__itex1D_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(long4 *, cudaTextureObject_t, float) asm("__itex1D_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(unsigned long *, cudaTextureObject_t, float) asm("__itex1D_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(ulong1 *, cudaTextureObject_t, float) asm("__itex1D_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(ulong2 *, cudaTextureObject_t, float) asm("__itex1D_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(ulong4 *, cudaTextureObject_t, float) asm("__itex1D_ulong4");
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(float *, cudaTextureObject_t, float) asm("__itex1D_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(float1 *, cudaTextureObject_t, float) asm("__itex1D_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(float2 *, cudaTextureObject_t, float) asm("__itex1D_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1D(float4 *, cudaTextureObject_t, float) asm("__itex1D_float4");
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex1D(cudaTextureObject_t texObject, float x)
{
  T ret;
  tex1D(&ret, texObject, x);
  return ret;
}














#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(char *, cudaTextureObject_t, float, float) asm("__itex2D_char_as_schar");
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(signed char *, cudaTextureObject_t, float, float) asm("__itex2D_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(char1 *, cudaTextureObject_t, float, float) asm("__itex2D_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(char2 *, cudaTextureObject_t, float, float) asm("__itex2D_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(char4 *, cudaTextureObject_t, float, float) asm("__itex2D_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(unsigned char *, cudaTextureObject_t, float, float) asm("__itex2D_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(uchar1 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(uchar2 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(uchar4 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(short *, cudaTextureObject_t, float, float) asm("__itex2D_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(short1 *, cudaTextureObject_t, float, float) asm("__itex2D_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(short2 *, cudaTextureObject_t, float, float) asm("__itex2D_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(short4 *, cudaTextureObject_t, float, float) asm("__itex2D_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(unsigned short *, cudaTextureObject_t, float, float) asm("__itex2D_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(ushort1 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(ushort2 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(ushort4 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(int *, cudaTextureObject_t, float, float) asm("__itex2D_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(int1 *, cudaTextureObject_t, float, float) asm("__itex2D_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(int2 *, cudaTextureObject_t, float, float) asm("__itex2D_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(int4 *, cudaTextureObject_t, float, float) asm("__itex2D_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(unsigned int *, cudaTextureObject_t, float, float) asm("__itex2D_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(uint1 *, cudaTextureObject_t, float, float) asm("__itex2D_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(uint2 *, cudaTextureObject_t, float, float) asm("__itex2D_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(uint4 *, cudaTextureObject_t, float, float) asm("__itex2D_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(long *, cudaTextureObject_t, float, float) asm("__itex2D_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(long1 *, cudaTextureObject_t, float, float) asm("__itex2D_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(long2 *, cudaTextureObject_t, float, float) asm("__itex2D_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(long4 *, cudaTextureObject_t, float, float) asm("__itex2D_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(unsigned long *, cudaTextureObject_t, float, float) asm("__itex2D_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(ulong1 *, cudaTextureObject_t, float, float) asm("__itex2D_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(ulong2 *, cudaTextureObject_t, float, float) asm("__itex2D_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(ulong4 *, cudaTextureObject_t, float, float) asm("__itex2D_ulong4");
#line 251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(float *, cudaTextureObject_t, float, float) asm("__itex2D_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(float1 *, cudaTextureObject_t, float, float) asm("__itex2D_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(float2 *, cudaTextureObject_t, float, float) asm("__itex2D_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2D(float4 *, cudaTextureObject_t, float, float) asm("__itex2D_float4");
#line 257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex2D(cudaTextureObject_t texObject, float x, float y)
{
  T ret;
  tex2D(&ret, texObject, x, y);
  return ret;
}













#line 279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(char *, cudaTextureObject_t, float, float, float) asm("__itex3D_char_as_schar");
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(signed char *, cudaTextureObject_t, float, float, float) asm("__itex3D_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(char1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(char2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(char4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(short *, cudaTextureObject_t, float, float, float) asm("__itex3D_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(short1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(short2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(short4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(int *, cudaTextureObject_t, float, float, float) asm("__itex3D_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(int1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(int2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(int4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(long *, cudaTextureObject_t, float, float, float) asm("__itex3D_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(long1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(long2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(long4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(unsigned long *, cudaTextureObject_t, float, float, float) asm("__itex3D_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(ulong1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(ulong2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(ulong4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ulong4");
#line 318 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(float *, cudaTextureObject_t, float, float, float) asm("__itex3D_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(float1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(float2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3D(float4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float4");
#line 324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex3D(cudaTextureObject_t texObject, float x, float y, float z)
{
  T ret;
  tex3D(&ret, texObject, x, y, z);
  return ret;
}














#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char_as_schar");
#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(signed char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(char1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(char2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(char4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(unsigned char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(uchar1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(uchar2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(uchar4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(short *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(short1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(short2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(short4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(unsigned short *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(ushort1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(ushort2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(ushort4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(int *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(int1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(int2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(int4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(unsigned int *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(uint1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(uint2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(uint4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(long *, cudaTextureObject_t, float, int) asm("__itex1DLayered_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(long1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(long2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(long4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(unsigned long *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(ulong1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(ulong2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(ulong4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ulong4");
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(float *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(float1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(float2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayered(float4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float4");
#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex1DLayered(cudaTextureObject_t texObject, float x, int layer)
{
  T ret;
  tex1DLayered(&ret, texObject, x, layer);
  return ret;
}














#line 415 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char_as_schar");
#line 417 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(signed char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(char1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(char2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(char4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(unsigned char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(uchar1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(uchar2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(uchar4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(short *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(short1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(short2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(short4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(unsigned short *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(ushort1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(ushort2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(ushort4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(int *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(int1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(int2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(int4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(unsigned int *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(uint1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(uint2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(uint4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(long *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(long1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(long2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(long4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(unsigned long *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(ulong1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(ulong2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(ulong4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ulong4");
#line 454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(float *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(float1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(float2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayered(float4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float4");
#line 460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer)
{
  T ret;
  tex2DLayered(&ret, texObject, x, y, layer);
  return ret;
}














#line 483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char_as_schar");
#line 485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(signed char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(char1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(char2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(char4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(short *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(short1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(short2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(short4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(int *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(int1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(int2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(int4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(uint1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(uint2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(uint4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(long *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_long");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(long1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(long2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(long4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(unsigned long *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(ulong1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(ulong2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(ulong4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ulong4");
#line 522 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(float *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(float1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(float2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemap(float4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float4");
#line 528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T texCubemap(cudaTextureObject_t texObject, float x, float y, float z)
{
  T ret;
  texCubemap(&ret, texObject, x, y, z);
  return ret;
}














#line 551 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char_as_schar");
#line 553 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(signed char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(char1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(char2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(char4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(unsigned char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(uchar1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(uchar2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(uchar4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(short *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(short1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(short2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(short4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(unsigned short *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(ushort1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(ushort2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(ushort4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(int *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(int1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(int2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(int4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(unsigned int *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(uint1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(uint2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(uint4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(long *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_long");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(long1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(long2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(long4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(unsigned long *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(ulong1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(ulong2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(ulong4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ulong4");
#line 591 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(float *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(float1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(float2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayered(float4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float4");

#line 598 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template <class T>
static __declspec(__device__) T texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  T ret;
  texCubemapLayered(&ret, texObject, x, y, z, layer);
  return ret;
}












__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(signed char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(char1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(char2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(char4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(unsigned char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(uchar1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(uchar2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(uchar4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(short *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(short1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(short2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(short4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(unsigned short *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(ushort1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(ushort2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(ushort4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(int *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(int1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(int2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(int4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(unsigned int *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(uint1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(uint2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(uint4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(long *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(long1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(long2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(long4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(unsigned long *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(ulong1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(ulong2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(ulong4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ulong4");
#line 654 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(float *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(float1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(float2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2Dgather(float4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float4");

#line 660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template <class T>
static __declspec(__device__) T tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0)
{
  T ret;
  tex2Dgather(&ret, to, x, y, comp);
  return ret;
}














#line 682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(char *, cudaTextureObject_t, float, float) asm("__itex1DLod_char_as_schar");
#line 684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(signed char *, cudaTextureObject_t, float, float) asm("__itex1DLod_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(char1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(char2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(char4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(unsigned char *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(uchar1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(uchar2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(uchar4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(short *, cudaTextureObject_t, float, float) asm("__itex1DLod_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(short1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(short2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(short4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(unsigned short *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(ushort1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(ushort2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(ushort4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(int *, cudaTextureObject_t, float, float) asm("__itex1DLod_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(int1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(int2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(int4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(unsigned int *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(uint1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(uint2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(uint4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(long *, cudaTextureObject_t, float, float) asm("__itex1DLod_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(long1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(long2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(long4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(unsigned long *, cudaTextureObject_t, float, float) asm("__itex1DLod_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(ulong1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(ulong2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(ulong4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ulong4");
#line 721 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(float *, cudaTextureObject_t, float, float) asm("__itex1DLod_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(float1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(float2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLod(float4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float4");
#line 727 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex1DLod(cudaTextureObject_t texObject, float x, float level)
{
  T ret;
  tex1DLod(&ret, texObject, x, level);
  return ret;
}














#line 750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char_as_schar");
#line 752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(signed char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(char1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(char2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(char4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(short *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(short1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(short2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(short4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(int *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(int1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(int2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(int4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(long *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(long1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(long2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(long4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(unsigned long *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(ulong1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(ulong2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(ulong4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ulong4");
#line 790 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(float *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(float1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(float2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLod(float4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float4");
#line 796 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level)
{
  T ret;
  tex2DLod(&ret, texObject, x, y, level);
  return ret;
}














#line 819 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char_as_schar");
#line 821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(signed char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(char1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(char2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(char4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(unsigned char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(uchar1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(uchar2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(uchar4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(short *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(short1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(short2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(short4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(unsigned short *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(ushort1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(ushort2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(ushort4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(int *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(int1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(int2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(int4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(unsigned int *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(uint1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(uint2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(uint4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(long *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(long1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(long2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(long4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(unsigned long *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(ulong1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(ulong2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(ulong4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ulong4");
#line 858 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(float *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(float1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(float2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DLod(float4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float4");
#line 864 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  T ret;
  tex3DLod(&ret, texObject, x, y, z, level);
  return ret;
}













#line 886 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char_as_schar");
#line 888 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(signed char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(char1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(char2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(char4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(unsigned char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(uchar1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(uchar2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(uchar4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(short *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(short1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(short2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(short4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(unsigned short *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(ushort1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(ushort2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(ushort4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(int *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(int1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(int2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(int4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(unsigned int *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(uint1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(uint2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(uint4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(long *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(long1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(long2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(long4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(unsigned long *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(ulong1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(ulong2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(ulong4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ulong4");
#line 925 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(float *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(float1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(float2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredLod(float4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float4");
#line 931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level)
{
  T ret;
  tex1DLayeredLod(&ret, texObject, x, layer, level);
  return ret;
}














#line 954 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char_as_schar");
#line 956 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(signed char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(char1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(char2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(char4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(unsigned char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(uchar1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(uchar2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(uchar4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(short *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(short1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(short2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(short4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(unsigned short *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(ushort1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(ushort2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(ushort4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(int *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(int1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(int2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(int4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(unsigned int *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(uint1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(uint2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(uint4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(long *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(long1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(long2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(long4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(unsigned long *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(ulong1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(ulong2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(ulong4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ulong4");
#line 993 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(float *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(float1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(float2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredLod(float4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float4");
#line 999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  T ret;
  tex2DLayeredLod(&ret, texObject, x, y, layer, level);
  return ret;
}













#line 1021 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char_as_schar");
#line 1023 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(signed char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(char1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(char2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(char4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(unsigned char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(uchar1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(uchar2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(uchar4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(short *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(short1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(short2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(short4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(unsigned short *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(ushort1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(ushort2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(ushort4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(int *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(int1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(int2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(int4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(unsigned int *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(uint1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(uint2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(uint4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(long *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_long");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(long1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(long2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(long4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(unsigned long *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(ulong1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(ulong2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(ulong4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ulong4");
#line 1060 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(float *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(float1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(float2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLod(float4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float4");
#line 1066 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  T ret;
  texCubemapLod(&ret, texObject, x, y, z, level);
  return ret;
}













#line 1088 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char_as_schar");
#line 1090 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(signed char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(char1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(char2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(char4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(unsigned char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(uchar1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(uchar2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(uchar4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(short *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(short1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(short2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(short4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(unsigned short *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(ushort1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(ushort2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(ushort4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(int *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(int1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(int2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(int4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(unsigned int *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(uint1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(uint2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(uint4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(long *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_long");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(long1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(long2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(long4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(unsigned long *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(ulong1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(ulong2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(ulong4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ulong4");
#line 1127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(float *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(float1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(float2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void texCubemapLayeredLod(float4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float4");
#line 1133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  T ret;
  texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level);
  return ret;
}













#line 1155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char_as_schar");
#line 1157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(signed char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(char1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(char2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(char4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(short *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(short1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(short2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(short4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(int *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(int1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(int2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(int4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(long *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(long1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(long2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(long4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(unsigned long *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(ulong1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(ulong2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(ulong4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ulong4");
#line 1195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(float *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(float1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(float2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DGrad(float4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float4");
#line 1201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  T ret;
  tex1DGrad(&ret, texObject, x, dPdx, dPdy);
  return ret;
}













#line 1223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char_as_schar");
#line 1225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(signed char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(char1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(char2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(char4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(unsigned char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(uchar1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(uchar2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(uchar4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(short *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(short1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(short2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(short4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(unsigned short *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(ushort1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(ushort2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(ushort4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(int *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(int1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(int2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(int4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(unsigned int *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(uint1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(uint2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(uint4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(long *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(long1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(long2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(long4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(unsigned long *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(ulong1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(ulong2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(ulong4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ulong4");
#line 1262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(float *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(float1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(float2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DGrad(float4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float4");
#line 1268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  T ret;
  tex2DGrad(&ret, texObject, x, y, dPdx, dPdy);
  return ret;
}













#line 1290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char_as_schar");
#line 1292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(signed char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(char1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(char2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(char4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(unsigned char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(uchar1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(uchar2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(uchar4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(short *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(short1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(short2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(short4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(unsigned short *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(ushort1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(ushort2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(ushort4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(int *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(int1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(int2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(int4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(unsigned int *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(uint1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(uint2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(uint4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(long *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(long1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(long2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(long4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(unsigned long *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(ulong1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(ulong2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(ulong4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ulong4");
#line 1329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(float *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(float1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(float2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex3DGrad(float4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float4");
#line 1335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  T ret;
  tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy);
  return ret;
}













#line 1357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char_as_schar");
#line 1359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(signed char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(char1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(char2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(char4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(unsigned char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(uchar1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(uchar2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(uchar4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(short *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(short1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(short2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(short4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(unsigned short *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(ushort1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(ushort2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(ushort4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(int *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(int1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(int2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(int4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(unsigned int *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(uint1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(uint2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(uint4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(long *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(long1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(long2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(long4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(unsigned long *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(ulong1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(ulong2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(ulong4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ulong4");
#line 1397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(float *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(float1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(float2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex1DLayeredGrad(float4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float4");
#line 1403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  T ret;
  tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy);
  return ret;
}













#line 1425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char_as_schar");
#line 1427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(signed char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(char1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(char2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(char4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(unsigned char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(uchar1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(uchar2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(uchar4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(short *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(short1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(short2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(short4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(unsigned short *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(ushort1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(ushort2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(ushort4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort4");

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(int *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(int1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(int2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(int4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(unsigned int *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(uint1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(uint2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(uint4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint4");


__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(long *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_long");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(long1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_long1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(long2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_long2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(long4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_long4");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(unsigned long *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ulong");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(ulong1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ulong1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(ulong2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ulong2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(ulong4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ulong4");
#line 1464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(float *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(float1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float1");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(float2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float2");
__declspec(__device__) __declspec(__cudart_builtin__) void tex2DLayeredGrad(float4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float4");
#line 1470 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

template <class T>
static __declspec(__device__) T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  T ret;
  tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy);
  return ret;
}
#line 1479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"

#line 4528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"


















































































































































































#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"











__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(char *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(signed char *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(char1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(unsigned char *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(uchar1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(short *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(short1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(unsigned short *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(ushort1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(int *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(int1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(unsigned int *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(uint1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(long long *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(longlong1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(unsigned long long *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(ulonglong1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(float *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(float1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(char2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(uchar2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(short2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(ushort2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(int2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(uint2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(longlong2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(ulonglong2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(float2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(char4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(uchar4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(short4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(ushort4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(int4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(uint4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dread(float4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float4");

#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

template <class T>
static __declspec(__device__) T surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf1Dread(&ret, surfObject, x, boundaryMode);
   return ret;
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
}











__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(signed char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(char1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(unsigned char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(uchar1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(short1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(unsigned short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(ushort1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(int1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(unsigned int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(uint1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(longlong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(unsigned long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(ulonglong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(float *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(float1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(char2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(uchar2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(short2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(ushort2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(int2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(uint2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(longlong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(ulonglong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(float2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(char4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(uchar4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(short4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(ushort4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(int4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(uint4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dread(float4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float4");

#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

template <class T>
static __declspec(__device__) T surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf2Dread(&ret, surfObject, x, y, boundaryMode);
   return ret;
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
}











__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float4");
#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

template <class T>
static __declspec(__device__) T surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf3Dread(&ret, surfObject, x, y, z, boundaryMode);
   return ret;
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
}










__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(signed char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(char1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(unsigned char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(uchar1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(short1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(unsigned short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(ushort1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(int1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(unsigned int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(uint1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(longlong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(unsigned long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(ulonglong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(float *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(float1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(char2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(uchar2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(short2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(ushort2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(int2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(uint2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(longlong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(ulonglong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(float2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float2");


__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(char4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(uchar4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(short4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(ushort4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(int4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(uint4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredread(float4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float4");
#line 289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

template <class T>
static __declspec(__device__) T surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode);
   return ret;
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
}










__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float4");
#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

template <class T>
static __declspec(__device__) T surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode);
   return ret;
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
}










__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float4");
#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

template <class T>
static __declspec(__device__) T surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surfCubemapread(&ret, surfObject, face, x, y, boundaryMode);
   return ret;
#line 414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
}










__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float4");
#line 463 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

template <class T>
static __declspec(__device__) T surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surfCubemapLayeredread(&ret, surfObject, x, y, layerface, boundaryMode);
   return ret;
#line 472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
}










__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(signed char, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned char, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uchar1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned short, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ushort1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned int, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uint1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(long long, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(longlong1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(unsigned long long, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ulonglong1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uchar2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ushort2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uint2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(longlong2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ulonglong2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(char4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uchar4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(short4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(ushort4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(int4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(uint4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1Dwrite(float4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1Dwrite_float4");
#line 521 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"










__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(signed char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uchar1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ushort1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uint1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(longlong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(unsigned long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ulonglong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uchar2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ushort2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uint2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(longlong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ulonglong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(char4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uchar4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(short4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(ushort4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(int4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(uint4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2Dwrite(float4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf2Dwrite_float4");
#line 569 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"










__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_float1");


__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf3Dwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf3Dwrite_float4");
#line 618 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"












__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(signed char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uchar1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ushort1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uint1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(longlong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(unsigned long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ulonglong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uchar2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ushort2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uint2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(longlong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ulonglong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(char4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uchar4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(short4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(ushort4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(int4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(uint4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf1DLayeredwrite(float4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurf1DLayeredwrite_float4");
#line 668 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"










__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surf2DLayeredwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float4");
#line 716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"










__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapwrite_float4");
#line 764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"










__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_char");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_schar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_char1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uchar");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uchar1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_short");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_short1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_ushort");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_ushort1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_int");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_int1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uint");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uint1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_longlong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_longlong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_ulonglong");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_ulonglong1");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_float");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_float1");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_char2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uchar2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_short2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_ushort2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_int2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uint2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_longlong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_ulonglong2");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_float2");

__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_char4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uchar4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_short4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_ushort4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_int4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_uint4");
__declspec(__device__) __declspec(__cudart_builtin__) void surfCubemapLayeredwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap)  asm("__isurfCubemapLayeredwrite_float4");
#line 812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

#line 814 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"

#line 816 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"



#line 4529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"

#line 4531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"

#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"






#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"


#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"

#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"


extern "C" {
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"

uint3 __declspec(__device_builtin__) extern const threadIdx;
uint3 __declspec(__device_builtin__) extern const blockIdx;
dim3 __declspec(__device_builtin__) extern const blockDim;
dim3 __declspec(__device_builtin__) extern const gridDim;
int __declspec(__device_builtin__) extern const warpSize;




}
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"






#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"






#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"






#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"






#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"






#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"

#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
#line 121 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"





#line 127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"


#line 130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"



















































template<class T>
static __inline __declspec(__host__) cudaError_t cudaLaunchKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}


























template<class T>
static __inline __declspec(__host__) cudaError_t cudaSetupArgument(
  T      arg,
  size_t offset
)
{
  return ::cudaSetupArgument((const void*)&arg, sizeof(T), offset);
}































static __inline __declspec(__host__) cudaError_t cudaEventCreate(
  cudaEvent_t  *event,
  unsigned int  flags
)
{
  return ::cudaEventCreateWithFlags(event, flags);
}
























































static __inline __declspec(__host__) cudaError_t cudaMallocHost(
  void         **ptr,
  size_t         size,
  unsigned int   flags
)
{
  return ::cudaHostAlloc(ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaHostAlloc(
  T            **ptr,
  size_t         size,
  unsigned int   flags
)
{
  return ::cudaHostAlloc((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaHostGetDevicePointer(
  T            **pDevice,
  void          *pHost,
  unsigned int   flags
)
{
  return ::cudaHostGetDevicePointer((void**)(void*)pDevice, pHost, flags);
}


































































































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocManaged(
  T            **devPtr,
  size_t         size,
  unsigned int   flags = 0x01
)
{
  return ::cudaMallocManaged((void**)(void*)devPtr, size, flags);
}






































































template<class T>
static __inline __declspec(__host__) cudaError_t cudaStreamAttachMemAsync(
  cudaStream_t   stream,
  T              *devPtr,
  size_t         length = 0,
  unsigned int   flags  = 0x04
)
{
  return ::cudaStreamAttachMemAsync(stream, (void*)devPtr, length, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMalloc(
  T      **devPtr,
  size_t   size
)
{
  return ::cudaMalloc((void**)(void*)devPtr, size);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocHost(
  T            **ptr,
  size_t         size,
  unsigned int   flags = 0
)
{
  return cudaMallocHost((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaMallocPitch(
  T      **devPtr,
  size_t  *pitch,
  size_t   width,
  size_t   height
)
{
  return ::cudaMallocPitch((void**)(void*)devPtr, pitch, width, height);
}




































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyToSymbol(
  const T                   &symbol,
  const void                *src,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyHostToDevice
)
{
  return ::cudaMemcpyToSymbol((const void*)&symbol, src, count, offset, kind);
}









































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyToSymbolAsync(
  const T                   &symbol,
  const void                *src,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyHostToDevice,
        cudaStream_t         stream = 0
)
{
  return ::cudaMemcpyToSymbolAsync((const void*)&symbol, src, count, offset, kind, stream);
}


































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyFromSymbol(
        void                *dst,
  const T                   &symbol,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyDeviceToHost
)
{
  return ::cudaMemcpyFromSymbol(dst, (const void*)&symbol, count, offset, kind);
}









































template<class T>
static __inline __declspec(__host__) cudaError_t cudaMemcpyFromSymbolAsync(
        void                *dst,
  const T                   &symbol,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyDeviceToHost,
        cudaStream_t         stream = 0
)
{
  return ::cudaMemcpyFromSymbolAsync(dst, (const void*)&symbol, count, offset, kind, stream);
}





















template<class T>
static __inline __declspec(__host__) cudaError_t cudaGetSymbolAddress(
        void **devPtr,
  const T     &symbol
)
{
  return ::cudaGetSymbolAddress(devPtr, (const void*)&symbol);
}





















template<class T>
static __inline __declspec(__host__) cudaError_t cudaGetSymbolSize(
        size_t *size,
  const T      &symbol
)
{
  return ::cudaGetSymbolSize(size, (const void*)&symbol);
}



































template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTexture(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  const struct cudaChannelFormatDesc     &desc,
        size_t                            size = 0xffffffff
)
{
  return ::cudaBindTexture(offset, &tex, devPtr, &desc, size);
}


































template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTexture(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
        size_t                            size = 0xffffffff
)
{
  return cudaBindTexture(offset, tex, devPtr, tex.channelDesc, size);
}














































template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTexture2D(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  const struct cudaChannelFormatDesc     &desc,
  size_t                                  width,
  size_t                                  height,
  size_t                                  pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
}













































template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTexture2D(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  size_t                                  width,
  size_t                                  height,
  size_t                                  pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &tex.channelDesc, width, height, pitch);
}






























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t                       array,
  const struct cudaChannelFormatDesc     &desc
)
{
  return ::cudaBindTextureToArray(&tex, array, &desc);
}





























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t                       array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t                  err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindTextureToArray(tex, array, desc) : err;
}






























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t              mipmappedArray,
  const struct cudaChannelFormatDesc     &desc
)
{
  return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc);
}





























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t              mipmappedArray
)
{
  struct cudaChannelFormatDesc desc;
  cudaArray_t                  levelArray;
  cudaError_t                  err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0);
  
  if (err != cudaSuccess) {
      return err;
  }
  err = ::cudaGetChannelDesc(&desc, levelArray);

  return err == cudaSuccess ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err;
}






















template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaUnbindTexture(
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaUnbindTexture(&tex);
}



























template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline __declspec(__host__) cudaError_t cudaGetTextureAlignmentOffset(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaGetTextureAlignmentOffset(offset, &tex);
}












































template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncSetCacheConfig(
  T                  *func,
  enum cudaFuncCache  cacheConfig
)
{
  return ::cudaFuncSetCacheConfig((const void*)func, cacheConfig);
}

template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncSetSharedMemConfig(
  T                        *func,
  enum cudaSharedMemConfig  config
)
{
  return ::cudaFuncSetSharedMemConfig((const void*)func, config);
}




























template<class T>
static __inline __declspec(__host__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(
    int   *numBlocks,
    T      func,
    int    blockSize,
    size_t dynamicSMemSize)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, 0x00);
}










































template<class T>
static __inline __declspec(__host__) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
    int         *numBlocks,
    T            func,
    int          blockSize,
    size_t       dynamicSMemSize,
    unsigned int flags)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, flags);
}




class __cudaOccupancyB2DHelper {
  size_t n;
public:
  inline __declspec(__host__)  __cudaOccupancyB2DHelper(size_t n_) : n(n_) {}
  inline __declspec(__host__)  size_t operator()(int)
  {
      return n;
  }
};














































template<typename UnaryFunction, class T>
static __inline __declspec(__host__)  cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(
    int           *minGridSize,
    int           *blockSize,
    T              func,
    UnaryFunction  blockSizeToDynamicSMemSize,
    int            blockSizeLimit = 0,
    unsigned int   flags = 0)
{
    cudaError_t status;

    
    int                       device;
    struct cudaFuncAttributes attr;

    
    int maxThreadsPerMultiProcessor;
    int warpSize;
    int devMaxThreadsPerBlock;
    int multiProcessorCount;
    int funcMaxThreadsPerBlock;
    int occupancyLimit;
    int granularity;

    
    int maxBlockSize = 0;
    int numBlocks    = 0;
    int maxOccupancy = 0;

    
    int blockSizeToTryAligned;
    int blockSizeToTry;
    int blockSizeLimitAligned;
    int occupancyInBlocks;
    int occupancyInThreads;
    size_t dynamicSMemSize;

    
    
    

    if (!minGridSize || !blockSize || !func) {
        return cudaErrorInvalidValue;
    }

    
    
    

    status = ::cudaGetDevice(&device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &maxThreadsPerMultiProcessor,
        cudaDevAttrMaxThreadsPerMultiProcessor,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &warpSize,
        cudaDevAttrWarpSize,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &devMaxThreadsPerBlock,
        cudaDevAttrMaxThreadsPerBlock,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &multiProcessorCount,
        cudaDevAttrMultiProcessorCount,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaFuncGetAttributes(&attr, func);
    if (status != cudaSuccess) {
        return status;
    }
    
    funcMaxThreadsPerBlock = attr.maxThreadsPerBlock;

    
    
    

    occupancyLimit = maxThreadsPerMultiProcessor;
    granularity    = warpSize;

    if (blockSizeLimit == 0) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (devMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (funcMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = funcMaxThreadsPerBlock;
    }

    blockSizeLimitAligned = ((blockSizeLimit + (granularity - 1)) / granularity) * granularity;

    for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) {
        
        
        
        if (blockSizeLimit < blockSizeToTryAligned) {
            blockSizeToTry = blockSizeLimit;
        } else {
            blockSizeToTry = blockSizeToTryAligned;
        }
        
        dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry);

        status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
            &occupancyInBlocks,
            func,
            blockSizeToTry,
            dynamicSMemSize,
            flags);

        if (status != cudaSuccess) {
            return status;
        }

        occupancyInThreads = blockSizeToTry * occupancyInBlocks;

        if (occupancyInThreads > maxOccupancy) {
            maxBlockSize = blockSizeToTry;
            numBlocks    = occupancyInBlocks;
            maxOccupancy = occupancyInThreads;
        }

        
        
        if (occupancyLimit == maxOccupancy) {
            break;
        }
    }

    
    
    

    
    
    *minGridSize = numBlocks * multiProcessorCount;
    *blockSize = maxBlockSize;

    return status;
}
































template<typename UnaryFunction, class T>
static __inline __declspec(__host__)  cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMem(
    int           *minGridSize,
    int           *blockSize,
    T              func,
    UnaryFunction  blockSizeToDynamicSMemSize,
    int            blockSizeLimit = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0x00);
}



































template<class T>
static __inline __declspec(__host__)  cudaError_t cudaOccupancyMaxPotentialBlockSize(
    int    *minGridSize,
    int    *blockSize,
    T       func,
    size_t  dynamicSMemSize = 0,
    int     blockSizeLimit = 0)
{
  return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, 0x00);
}

















































template<class T>
static __inline __declspec(__host__)  cudaError_t cudaOccupancyMaxPotentialBlockSizeWithFlags(
    int    *minGridSize,
    int    *blockSize,
    T      func,
    size_t dynamicSMemSize = 0,
    int    blockSizeLimit = 0,
    unsigned int flags = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, flags);
}





































template<class T>
static __inline __declspec(__host__) cudaError_t cudaLaunch(
  T *func
)
{
  return ::cudaLaunch((const void*)func);
}






























template<class T>
static __inline __declspec(__host__) cudaError_t cudaFuncGetAttributes(
  struct cudaFuncAttributes *attr,
  T                         *entry
)
{
  return ::cudaFuncGetAttributes(attr, (const void*)entry);
}





















template<class T, int dim>
static __inline __declspec(__host__) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim>       &surf,
  cudaArray_const_t                   array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindSurfaceToArray(&surf, array, &desc);
}




















template<class T, int dim>
static __inline __declspec(__host__) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t             array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t                  err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindSurfaceToArray(surf, array, desc) : err;
}

#line 1922 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

 

#line 1926 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"






#line 1933 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#pragma warning(pop)
#line 1935 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1936 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 1938 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 1 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1938 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 2 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"


__declspec(__global__) void kernel(int a, int b, int *c)
{
	*c = (a + b)*(a + b);
}

int main()
{
	return 0;
}
