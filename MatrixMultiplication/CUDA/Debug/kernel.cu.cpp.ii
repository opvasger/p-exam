#line 1 "Debug/kernel.cudafe1.cpp"
#line 1 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"
#pragma section("__nv_managed_data__")
#line 1 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
#line 1 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"



#line 1 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"
#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 708 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#pragma region Input Buffer SAL 1 compatibility macros
#line 1472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#pragma endregion Input Buffer SAL 1 compatibility macros
#line 2361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
extern "C" {
#line 2967 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
}
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
extern "C" {
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
}
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#pragma pack ( push, 8 )
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
extern "C" {
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
typedef unsigned uintptr_t; 
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
typedef char *va_list; 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
extern "C++" {
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
template< class _Ty> 
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
struct __vcrt_va_list_is_reference { 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
enum: bool { __the_value}; 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}; 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
template< class _Ty> 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
struct __vcrt_va_list_is_reference< _Ty &>  { 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
enum: bool { __the_value = '\001'}; 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}; 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
template< class _Ty> 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
struct __vcrt_va_list_is_reference< _Ty &&>  { 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
enum: bool { __the_value = '\001'}; 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}; 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
template < typename _Ty >
        void __vcrt_va_start_verify_argument_type ( ) throw ( )
        {
            static_assert ( ! __vcrt_va_list_is_reference < _Ty > :: __the_value, "va_start argument must not have reference type and must not be parenthesized" );
        }
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
}
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#pragma pack ( pop )
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
typedef unsigned size_t; 
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"


































































#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"


























































































#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"










#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








































#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"



#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"













#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"






#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"



#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"













        














#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
























#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"


#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"







enum  cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};

#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"



























































































#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"










enum  cudaError
{
    




    cudaSuccess                           =      0,
  
    



    cudaErrorMissingConfiguration         =      1,
  
    



    cudaErrorMemoryAllocation             =      2,
  
    



    cudaErrorInitializationError          =      3,
  
    







    cudaErrorLaunchFailure                =      4,
  
    






    cudaErrorPriorLaunchFailure           =      5,
  
    







    cudaErrorLaunchTimeout                =      6,
  
    






    cudaErrorLaunchOutOfResources         =      7,
  
    



    cudaErrorInvalidDeviceFunction        =      8,
  
    






    cudaErrorInvalidConfiguration         =      9,
  
    



    cudaErrorInvalidDevice                =     10,
  
    



    cudaErrorInvalidValue                 =     11,
  
    



    cudaErrorInvalidPitchValue            =     12,
  
    



    cudaErrorInvalidSymbol                =     13,
  
    


    cudaErrorMapBufferObjectFailed        =     14,
  
    


    cudaErrorUnmapBufferObjectFailed      =     15,
  
    



    cudaErrorInvalidHostPointer           =     16,
  
    



    cudaErrorInvalidDevicePointer         =     17,
  
    



    cudaErrorInvalidTexture               =     18,
  
    



    cudaErrorInvalidTextureBinding        =     19,
  
    




    cudaErrorInvalidChannelDescriptor     =     20,
  
    



    cudaErrorInvalidMemcpyDirection       =     21,
  
    







    cudaErrorAddressOfConstant            =     22,
  
    






    cudaErrorTextureFetchFailed           =     23,
  
    






    cudaErrorTextureNotBound              =     24,
  
    






    cudaErrorSynchronizationError         =     25,
  
    



    cudaErrorInvalidFilterSetting         =     26,
  
    



    cudaErrorInvalidNormSetting           =     27,
  
    





    cudaErrorMixedDeviceExecution         =     28,
  
    




    cudaErrorCudartUnloading              =     29,
  
    


    cudaErrorUnknown                      =     30,

    





    cudaErrorNotYetImplemented            =     31,
  
    






    cudaErrorMemoryValueTooLarge          =     32,
  
    




    cudaErrorInvalidResourceHandle        =     33,
  
    





    cudaErrorNotReady                     =     34,
  
    




    cudaErrorInsufficientDriver           =     35,
  
    










    cudaErrorSetOnActiveProcess           =     36,
  
    



    cudaErrorInvalidSurface               =     37,
  
    



    cudaErrorNoDevice                     =     38,
  
    



    cudaErrorECCUncorrectable             =     39,
  
    


    cudaErrorSharedObjectSymbolNotFound   =     40,
  
    


    cudaErrorSharedObjectInitFailed       =     41,
  
    



    cudaErrorUnsupportedLimit             =     42,
  
    



    cudaErrorDuplicateVariableName        =     43,
  
    



    cudaErrorDuplicateTextureName         =     44,
  
    



    cudaErrorDuplicateSurfaceName         =     45,
  
    







    cudaErrorDevicesUnavailable           =     46,
  
    


    cudaErrorInvalidKernelImage           =     47,
  
    





    cudaErrorNoKernelImageForDevice       =     48,
  
    










    cudaErrorIncompatibleDriverContext    =     49,
      
    




    cudaErrorPeerAccessAlreadyEnabled     =     50,
    
    




    cudaErrorPeerAccessNotEnabled         =     51,
    
    



    cudaErrorDeviceAlreadyInUse           =     54,

    




    cudaErrorProfilerDisabled             =     55,

    





    cudaErrorProfilerNotInitialized       =     56,

    




    cudaErrorProfilerAlreadyStarted       =     57,

    




     cudaErrorProfilerAlreadyStopped       =    58,

    





    cudaErrorAssert                        =    59,
  
    




    cudaErrorTooManyPeers                 =     60,
  
    



    cudaErrorHostMemoryAlreadyRegistered  =     61,
        
    



    cudaErrorHostMemoryNotRegistered      =     62,

    


    cudaErrorOperatingSystem              =     63,

    



    cudaErrorPeerAccessUnsupported        =     64,

    




    cudaErrorLaunchMaxDepthExceeded       =     65,

    





    cudaErrorLaunchFileScopedTex          =     66,

    





    cudaErrorLaunchFileScopedSurf         =     67,

    












    cudaErrorSyncDepthExceeded            =     68,

    









    cudaErrorLaunchPendingCountExceeded   =     69,
    
    


    cudaErrorNotPermitted                 =     70,

    



    cudaErrorNotSupported                 =     71,

    






    cudaErrorHardwareStackError           =     72,

    





    cudaErrorIllegalInstruction           =     73,

    






    cudaErrorMisalignedAddress            =     74,

    








    cudaErrorInvalidAddressSpace          =     75,

    





    cudaErrorInvalidPc                    =     76,

    





    cudaErrorIllegalAddress               =     77,

    



    cudaErrorInvalidPtx                   =     78,

    


    cudaErrorInvalidGraphicsContext       =     79,

    



    cudaErrorNvlinkUncorrectable          =     80,

    


    cudaErrorStartupFailure               =   0x7f,

    





    cudaErrorApiFailureBase               =  10000
};




enum  cudaChannelFormatKind
{
    cudaChannelFormatKindSigned           =   0,      
    cudaChannelFormatKindUnsigned         =   1,      
    cudaChannelFormatKindFloat            =   2,      
    cudaChannelFormatKindNone             =   3       
};




struct  cudaChannelFormatDesc
{
    int                        x; 
    int                        y; 
    int                        z; 
    int                        w; 
    enum cudaChannelFormatKind f; 
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum  cudaMemoryType
{
    cudaMemoryTypeHost   = 1, 
    cudaMemoryTypeDevice = 2  
};




enum  cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,      
    cudaMemcpyHostToDevice        =   1,      
    cudaMemcpyDeviceToHost        =   2,      
    cudaMemcpyDeviceToDevice      =   3,      
    cudaMemcpyDefault             =   4       
};






struct  cudaPitchedPtr
{
    void   *ptr;      
    size_t  pitch;    
    size_t  xsize;    
    size_t  ysize;    
};






struct  cudaExtent
{
    size_t width;     
    size_t height;    
    size_t depth;     
};






struct  cudaPos
{
    size_t x;     
    size_t y;     
    size_t z;     
};




struct  cudaMemcpy3DParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
  
    struct cudaExtent      extent;    
    enum cudaMemcpyKind    kind;      
};




struct  cudaMemcpy3DPeerParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
    int                    srcDevice; 
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
    int                    dstDevice; 
  
    struct cudaExtent      extent;    
};




struct cudaGraphicsResource;




enum  cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,  
    cudaGraphicsRegisterFlagsReadOnly         = 1,   
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  
    cudaGraphicsRegisterFlagsTextureGather    = 8   
};




enum  cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,  
    cudaGraphicsMapFlagsReadOnly     = 1,  
    cudaGraphicsMapFlagsWriteDiscard = 2   
};




enum  cudaGraphicsCubeFace 
{
    cudaGraphicsCubeFacePositiveX = 0x00, 
    cudaGraphicsCubeFaceNegativeX = 0x01, 
    cudaGraphicsCubeFacePositiveY = 0x02, 
    cudaGraphicsCubeFaceNegativeY = 0x03, 
    cudaGraphicsCubeFacePositiveZ = 0x04, 
    cudaGraphicsCubeFaceNegativeZ = 0x05  
};




enum  cudaResourceType
{
    cudaResourceTypeArray          = 0x00, 
    cudaResourceTypeMipmappedArray = 0x01, 
    cudaResourceTypeLinear         = 0x02, 
    cudaResourceTypePitch2D        = 0x03  
};




enum  cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
};




struct  cudaResourceDesc {
	enum cudaResourceType resType;             
	
	union {
		struct {
			cudaArray_t array;                 
		} array;
        struct {
            cudaMipmappedArray_t mipmap;       
        } mipmap;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t sizeInBytes;                
		} linear;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t width;                      
			size_t height;                     
			size_t pitchInBytes;               
		} pitch2D;
	} res;
};




struct  cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;           
    size_t                      width;            
    size_t                      height;           
    size_t                      depth;            
    unsigned int                firstMipmapLevel; 
    unsigned int                lastMipmapLevel;  
    unsigned int                firstLayer;       
    unsigned int                lastLayer;        
};




struct  cudaPointerAttributes
{
    



    enum cudaMemoryType memoryType;

    








    int device;

    



    void *devicePointer;

    



    void *hostPointer;

    


    int isManaged;
};




struct  cudaFuncAttributes
{
   




   size_t sharedSizeBytes;

   



   size_t constSizeBytes;

   


   size_t localSizeBytes;

   




   int maxThreadsPerBlock;

   


   int numRegs;

   




   int ptxVersion;

   




   int binaryVersion;

   



   int cacheModeCA;
};




enum  cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,    
    cudaFuncCachePreferShared = 1,    
    cudaFuncCachePreferL1     = 2,    
    cudaFuncCachePreferEqual  = 3     
};





enum  cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum  cudaComputeMode
{
    cudaComputeModeDefault          = 0,  
    cudaComputeModeExclusive        = 1,  
    cudaComputeModeProhibited       = 2,  
    cudaComputeModeExclusiveProcess = 3   
};




enum  cudaLimit
{
    cudaLimitStackSize                    = 0x00, 
    cudaLimitPrintfFifoSize               = 0x01, 
    cudaLimitMallocHeapSize               = 0x02, 
    cudaLimitDevRuntimeSyncDepth          = 0x03, 
    cudaLimitDevRuntimePendingLaunchCount = 0x04  
};




enum  cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly          = 1, 
    cudaMemAdviseUnsetReadMostly        = 2, 
    cudaMemAdviseSetPreferredLocation   = 3, 
    cudaMemAdviseUnsetPreferredLocation = 4, 
    cudaMemAdviseSetAccessedBy          = 5, 
    cudaMemAdviseUnsetAccessedBy        = 6  
};




enum  cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly           = 1, 
    cudaMemRangeAttributePreferredLocation    = 2, 
    cudaMemRangeAttributeAccessedBy           = 3, 
    cudaMemRangeAttributeLastPrefetchLocation = 4  
};




enum  cudaOutputMode
{
    cudaKeyValuePair    = 0x00, 
    cudaCSV             = 0x01  
};




enum  cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41,     
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75,  
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78, 
    cudaDevAttrGlobalL1CacheSupported         = 79, 
    cudaDevAttrLocalL1CacheSupported          = 80, 
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81, 
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, 
    cudaDevAttrManagedMemory                  = 83, 
    cudaDevAttrIsMultiGpuBoard                = 84, 
    cudaDevAttrMultiGpuBoardGroupID           = 85, 
    cudaDevAttrHostNativeAtomicSupported      = 86, 
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87, 
    cudaDevAttrPageableMemoryAccess           = 88, 
    cudaDevAttrConcurrentManagedAccess        = 89, 
    cudaDevAttrComputePreemptionSupported     = 90, 
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91 
};





enum  cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank              = 1, 
    cudaDevP2PAttrAccessSupported              = 2, 
    cudaDevP2PAttrNativeAtomicSupported        = 3  
};



struct  cudaDeviceProp
{
    char   name[256];                  
    size_t totalGlobalMem;             
    size_t sharedMemPerBlock;          
    int    regsPerBlock;               
    int    warpSize;                   
    size_t memPitch;                   
    int    maxThreadsPerBlock;         
    int    maxThreadsDim[3];           
    int    maxGridSize[3];             
    int    clockRate;                  
    size_t totalConstMem;              
    int    major;                      
    int    minor;                      
    size_t textureAlignment;           
    size_t texturePitchAlignment;      
    int    deviceOverlap;              
    int    multiProcessorCount;        
    int    kernelExecTimeoutEnabled;   
    int    integrated;                 
    int    canMapHostMemory;           
    int    computeMode;                
    int    maxTexture1D;               
    int    maxTexture1DMipmap;         
    int    maxTexture1DLinear;         
    int    maxTexture2D[2];            
    int    maxTexture2DMipmap[2];      
    int    maxTexture2DLinear[3];      
    int    maxTexture2DGather[2];      
    int    maxTexture3D[3];            
    int    maxTexture3DAlt[3];         
    int    maxTextureCubemap;          
    int    maxTexture1DLayered[2];     
    int    maxTexture2DLayered[3];     
    int    maxTextureCubemapLayered[2];
    int    maxSurface1D;               
    int    maxSurface2D[2];            
    int    maxSurface3D[3];            
    int    maxSurface1DLayered[2];     
    int    maxSurface2DLayered[3];     
    int    maxSurfaceCubemap;          
    int    maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;           
    int    concurrentKernels;          
    int    ECCEnabled;                 
    int    pciBusID;                   
    int    pciDeviceID;                
    int    pciDomainID;                
    int    tccDriver;                  
    int    asyncEngineCount;           
    int    unifiedAddressing;          
    int    memoryClockRate;            
    int    memoryBusWidth;             
    int    l2CacheSize;                
    int    maxThreadsPerMultiProcessor;
    int    streamPrioritiesSupported;  
    int    globalL1CacheSupported;     
    int    localL1CacheSupported;      
    size_t sharedMemPerMultiprocessor; 
    int    regsPerMultiprocessor;      
    int    managedMemory;              
    int    isMultiGpuBoard;            
    int    multiGpuBoardGroupID;       
    int    hostNativeAtomicSupported;  
    int    singleToDoublePrecisionPerfRatio; 
    int    pageableMemoryAccess;       
    int    concurrentManagedAccess;    
};















































































typedef  struct  cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef  struct  cudaIpcMemHandle_st 
{
    char reserved[64];
}cudaIpcMemHandle_t;










typedef  enum cudaError cudaError_t;




typedef  struct CUstream_st *cudaStream_t;




typedef  struct CUevent_st *cudaEvent_t;




typedef  struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef  struct CUuuid_st cudaUUID_t;




typedef  enum cudaOutputMode cudaOutputMode_t;


 

#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"

#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
























enum  cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,    
    cudaBoundaryModeClamp = 1,    
    cudaBoundaryModeTrap  = 2     
};




enum   cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,     
    cudaFormatModeAuto = 1        
};




struct  surfaceReference
{
    


    struct cudaChannelFormatDesc channelDesc;
};




typedef  unsigned long long cudaSurfaceObject_t;


 

#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























enum  cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,    
    cudaAddressModeClamp  = 1,    
    cudaAddressModeMirror = 2,    
    cudaAddressModeBorder = 3     
};




enum  cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,     
    cudaFilterModeLinear = 1      
};




enum  cudaTextureReadMode
{
    cudaReadModeElementType     = 0,  
    cudaReadModeNormalizedFloat = 1   
};




struct  textureReference
{
    


    int                          normalized;
    


    enum cudaTextureFilterMode   filterMode;
    


    enum cudaTextureAddressMode  addressMode[3];
    


    struct cudaChannelFormatDesc channelDesc;
    


    int                          sRGB;
    


    unsigned int                 maxAnisotropy;
    


    enum cudaTextureFilterMode   mipmapFilterMode;
    


    float                        mipmapLevelBias;
    


    float                        minMipmapLevelClamp;
    


    float                        maxMipmapLevelClamp;
    int                          __cudaReserved[15];
};




struct  cudaTextureDesc
{
    


    enum cudaTextureAddressMode addressMode[3];
    


    enum cudaTextureFilterMode  filterMode;
    


    enum cudaTextureReadMode    readMode;
    


    int                         sRGB;
    


    float                       borderColor[4];
    


    int                         normalizedCoords;
    


    unsigned int                maxAnisotropy;
    


    enum cudaTextureFilterMode  mipmapFilterMode;
    


    float                       mipmapLevelBias;
    


    float                       minMipmapLevelClamp;
    


    float                       maxMipmapLevelClamp;
};




typedef  unsigned long long cudaTextureObject_t;


 

#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"









#pragma warning(push)
#pragma warning(disable: 4201 4408)



















#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct  char1
{
    signed char x;
};

struct  uchar1
{
    unsigned char x;
};


struct  __declspec(align(2)) char2
{
    signed char x, y;
};

struct  __declspec(align(2)) uchar2
{
    unsigned char x, y;
};

struct  char3
{
    signed char x, y, z;
};

struct  uchar3
{
    unsigned char x, y, z;
};

struct  __declspec(align(4)) char4
{
    signed char x, y, z, w;
};

struct  __declspec(align(4)) uchar4
{
    unsigned char x, y, z, w;
};

struct  short1
{
    short x;
};

struct  ushort1
{
    unsigned short x;
};

struct  __declspec(align(4)) short2
{
    short x, y;
};

struct  __declspec(align(4)) ushort2
{
    unsigned short x, y;
};

struct  short3
{
    short x, y, z;
};

struct  ushort3
{
    unsigned short x, y, z;
};

struct  short4 { union { struct { short x; short y; short z; short w; }; struct { long long int :1,:0; }; }; };
struct  ushort4 { union { struct { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; struct { long long int :1,:0; }; }; };

struct  int1
{
    int x;
};

struct  uint1
{
    unsigned int x;
};

struct  int2 { union { struct { int x; int y; }; struct { long long int :1,:0; }; }; };
struct  uint2 { union { struct { unsigned int x; unsigned int y; }; struct { long long int :1,:0; }; }; };

struct  int3
{
    int x, y, z;
};

struct  uint3
{
    unsigned int x, y, z;
};

struct   int4
{
    int x, y, z, w;
};

struct   uint4
{
    unsigned int x, y, z, w;
};

struct  long1
{
    long int x;
};

struct  ulong1
{
    unsigned long x;
};


struct  long2 { union { struct { long int x; long int y; }; struct { long long int :1,:0; }; }; };
struct  ulong2 { union { struct { unsigned long int x; unsigned long int y; }; struct { long long int :1,:0; }; }; };












#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct  long3
{
    long int x, y, z;
};

struct  ulong3
{
    unsigned long int x, y, z;
};

struct   long4
{
    long int x, y, z, w;
};

struct   ulong4
{
    unsigned long int x, y, z, w;
};

struct  float1
{
    float x;
};















#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct  float2 { union { struct { float x; float y; }; struct { long long int :1,:0; }; }; };

#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"


struct  float3
{
    float x, y, z;
};

struct   float4
{
    float x, y, z, w;
};

struct  longlong1
{
    long long int x;
};

struct  ulonglong1
{
    unsigned long long int x;
};

struct   longlong2
{
    long long int x, y;
};

struct   ulonglong2
{
    unsigned long long int x, y;
};

struct  longlong3
{
    long long int x, y, z;
};

struct  ulonglong3
{
    unsigned long long int x, y, z;
};

struct   longlong4
{
    long long int x, y, z ,w;
};

struct   ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct  double1
{
    double x;
};

struct   double2
{
    double x, y;
};

struct  double3
{
    double x, y, z;
};

struct   double4
{
    double x, y, z, w;
};



#pragma warning(pop)

#line 355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







typedef  struct char1 char1;
typedef  struct uchar1 uchar1;
typedef  struct char2 char2;
typedef  struct uchar2 uchar2;
typedef  struct char3 char3;
typedef  struct uchar3 uchar3;
typedef  struct char4 char4;
typedef  struct uchar4 uchar4;
typedef  struct short1 short1;
typedef  struct ushort1 ushort1;
typedef  struct short2 short2;
typedef  struct ushort2 ushort2;
typedef  struct short3 short3;
typedef  struct ushort3 ushort3;
typedef  struct short4 short4;
typedef  struct ushort4 ushort4;
typedef  struct int1 int1;
typedef  struct uint1 uint1;
typedef  struct int2 int2;
typedef  struct uint2 uint2;
typedef  struct int3 int3;
typedef  struct uint3 uint3;
typedef  struct int4 int4;
typedef  struct uint4 uint4;
typedef  struct long1 long1;
typedef  struct ulong1 ulong1;
typedef  struct long2 long2;
typedef  struct ulong2 ulong2;
typedef  struct long3 long3;
typedef  struct ulong3 ulong3;
typedef  struct long4 long4;
typedef  struct ulong4 ulong4;
typedef  struct float1 float1;
typedef  struct float2 float2;
typedef  struct float3 float3;
typedef  struct float4 float4;
typedef  struct longlong1 longlong1;
typedef  struct ulonglong1 ulonglong1;
typedef  struct longlong2 longlong2;
typedef  struct ulonglong2 ulonglong2;
typedef  struct longlong3 longlong3;
typedef  struct ulonglong3 ulonglong3;
typedef  struct longlong4 longlong4;
typedef  struct ulonglong4 ulonglong4;
typedef  struct double1 double1;
typedef  struct double2 double2;
typedef  struct double3 double3;
typedef  struct double4 double4;







struct  dim3
{
    unsigned int x, y, z;

      dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
      dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
      operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
};

typedef  struct dim3 dim3;



#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"










































#line 44 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"






#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 55 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"

#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\crt\\storage_class.h"
#line 71 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"







































































































































































































#line 271 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
typedef int ptrdiff_t; 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
typedef int intptr_t; 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
typedef bool __vcrt_bool; 
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
extern "C++" {
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
template< class _CountofType, size_t _SizeOfArray> char (*__countof_helper(_CountofType (& _Array)[_SizeOfArray]))[_SizeOfArray]; 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
}
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
void __cdecl __security_init_cookie(); 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
void __fastcall __security_check_cookie(uintptr_t _StackCookie); 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
__declspec(noreturn) void __cdecl __report_gsfailure(); 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
extern uintptr_t __security_cookie; 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
}__pragma(pack ( pop )) 
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
extern "C++" {
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
template< bool _Enable, class _Ty> struct _CrtEnableIf; 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
template< class _Ty> 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct _CrtEnableIf< true, _Ty>  { 
#line 127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef _Ty _Type; 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
}; 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
}
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef bool __crt_bool; 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(dllimport) void __cdecl _invalid_parameter(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(); 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(); 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(noreturn) 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
__declspec(dllimport) void __cdecl _invoke_watson(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef int errno_t; 
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef unsigned short wint_t; 
#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef unsigned short wctype_t; 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef long __time32_t; 
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef __int64 __time64_t; 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef 
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct __crt_locale_data_public { 
#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
const unsigned short *_locale_pctype; 
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
int _locale_mb_cur_max; 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
unsigned _locale_lc_codepage; 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
} __crt_locale_data_public; 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef 
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct __crt_locale_pointers { 
#line 463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct __crt_locale_data *locinfo; 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct __crt_multibyte_data *mbcinfo; 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
} __crt_locale_pointers; 
#line 467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef __crt_locale_pointers *_locale_t; 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
struct _Mbstatet { 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
unsigned long _Wchar; 
#line 472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
unsigned short _Byte, _State; 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
} _Mbstatet; 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef _Mbstatet mbstate_t; 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef __time64_t time_t; 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
typedef size_t rsize_t; 
#line 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt.h"
}__pragma(pack ( pop )) 
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"













#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
namespace std { 
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
typedef decltype((__nullptr)) nullptr_t; 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
}
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
using std::nullptr_t;
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) int *__cdecl _errno(); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) extern unsigned long __cdecl __threadid(); 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stddef.h"
}__pragma(pack ( pop )) 
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"







































































































































































#line 324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 751 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 765 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 762 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 778 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 774 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
typedef struct cudaArray *cudaArray_t; 
#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
typedef const cudaArray *cudaArray_const_t; 
#line 781 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
struct cudaArray; 
#line 786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
#line 791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
#line 793 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
struct cudaMipmappedArray; 
#line 798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"









#line 808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 807 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 823 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 835 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 846 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 846 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 858 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 856 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"





















#line 878 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"























#line 897 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 891 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
struct cudaGraphicsResource; 
#line 896 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 912 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 908 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 918 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

















#line 936 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











































































#line 1018 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















































#line 1032 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1012 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"





















#line 1034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1027 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 1043 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1067 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"





















#line 1089 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 1137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 1147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 1159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"















#line 1172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

















#line 1186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













#line 1195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"









#line 1202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

























































































































































































#line 1387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"











#line 1311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"









































































































































#line 1445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"








#line 1467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"








#line 1475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1477 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1502 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 1502 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




#line 1507 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"











#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"









#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"







#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"




#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"













#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"









#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"









#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"



























#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"



























#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"




#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"



#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 287 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 302 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 304 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 309 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 396 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 396 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 417 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
typedef 
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
enum cudaDataType_t { 
#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_16F = 2, 
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_16F = 6, 
#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_32F = 0, 
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_32F = 4, 
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_64F = 1, 
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_64F = 5, 
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_8I = 3, 
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_8I = 7, 
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_8U, 
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_8U, 
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_32I, 
#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_32I, 
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_R_32U, 
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
CUDA_C_32U
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
} cudaDataType; 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
typedef 
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
enum libraryPropertyType_t { 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
MAJOR_VERSION, 
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
MINOR_VERSION, 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
PATCH_LEVEL
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
} libraryPropertyType; 
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern "C" {
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSynchronize(); 
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGetLastError(); 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaPeekAtLastError(); 
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern const char *__stdcall cudaGetErrorString(cudaError_t error); 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern const char *__stdcall cudaGetErrorName(cudaError_t error); 
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceCount(int * count); 
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaGetDevice(int * device); 
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); 
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream); 
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); 
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaFree(void * devPtr); 
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); 
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); 
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern void *__stdcall cudaGetParameterBuffer(size_t alignment, size_t size); 
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern void *__stdcall cudaGetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
}
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern "C" {
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceReset(); 
#line 269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSynchronize(); 
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetLimit(cudaLimit limit, size_t value); 
#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
#line 510 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
#line 575 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
#line 602 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
#line 644 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
#line 679 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
#line 717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
#line 767 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
#line 797 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaIpcCloseMemHandle(void * devPtr); 
#line 837 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadExit(); 
#line 861 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadSynchronize(); 
#line 908 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadSetLimit(cudaLimit limit, size_t value); 
#line 939 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
#line 974 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 1020 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
#line 1074 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetLastError(); 
#line 1115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaPeekAtLastError(); 
#line 1130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern const char *__stdcall cudaGetErrorName(cudaError_t error); 
#line 1145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern const char *__stdcall cudaGetErrorString(cudaError_t error); 
#line 1175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceCount(int * count); 
#line 1421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceProperties(cudaDeviceProp * prop, int device); 
#line 1593 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 1628 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
#line 1647 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
#line 1681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDevice(int device); 
#line 1698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDevice(int * device); 
#line 1727 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetValidDevices(int * device_arr, int len); 
#line 1789 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDeviceFlags(unsigned flags); 
#line 1830 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetDeviceFlags(unsigned * flags); 
#line 1867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreate(cudaStream_t * pStream); 
#line 1896 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 1939 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
#line 1963 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
#line 1984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
#line 2005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); 
#line 2037 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 2051 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
#line 2108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
#line 2128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream); 
#line 2149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream); 
#line 2220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
#line 2256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventCreate(cudaEvent_t * event); 
#line 2290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 2321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
#line 2353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventQuery(cudaEvent_t event); 
#line 2385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event); 
#line 2410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); 
#line 2451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
#line 2510 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
#line 2560 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
#line 2614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
#line 2648 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 2671 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDoubleForDevice(double * d); 
#line 2694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetDoubleForHost(double * d); 
#line 2750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
#line 2794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
#line 2845 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0); 
#line 2874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaSetupArgument(const void * arg, size_t size, size_t offset); 
#line 2912 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaLaunch(const void * func); 
#line 3030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
#line 3056 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); 
#line 3085 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocHost(void ** ptr, size_t size); 
#line 3124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
#line 3166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
#line 3193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFree(void * devPtr); 
#line 3213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeHost(void * ptr); 
#line 3235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeArray(cudaArray_t array); 
#line 3257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
#line 3316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
#line 3393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostRegister(void * ptr, size_t size, unsigned flags); 
#line 3412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostUnregister(void * ptr); 
#line 3454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
#line 3473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaHostGetFlags(unsigned * pFlags, void * pHost); 
#line 3508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
#line 3643 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
#line 3764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
#line 3790 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
#line 3890 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3D(const cudaMemcpy3DParms * p); 
#line 3918 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
#line 4029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
#line 4052 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
#line 4071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemGetInfo(size_t * free, size_t * total); 
#line 4092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
#line 4130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 4162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
#line 4200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
#line 4237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
#line 4275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 4320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 4366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 4412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
#line 4455 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 4493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
#line 4531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
#line 4582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
#line 4660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4705 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4765 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4820 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4966 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 4992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset(void * devPtr, int value, size_t count); 
#line 5022 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
#line 5065 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
#line 5097 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
#line 5134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
#line 5184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
#line 5207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
#line 5229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSymbolSize(size_t * size, const void * symbol); 
#line 5296 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
#line 5382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
#line 5438 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
#line 5474 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
#line 5627 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
#line 5665 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
#line 5704 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
#line 5723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice); 
#line 5783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
#line 5815 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
#line 5851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 5883 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 5912 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
#line 5946 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
#line 5971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
#line 6011 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
#line 6046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
#line 6093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTexture(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t size = 4294967295U); 
#line 6144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTexture2D(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t width, size_t height, size_t pitch); 
#line 6172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTextureToArray(const textureReference * texref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
#line 6200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindTextureToMipmappedArray(const textureReference * texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc * desc); 
#line 6221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaUnbindTexture(const textureReference * texref); 
#line 6246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureAlignmentOffset(size_t * offset, const textureReference * texref); 
#line 6271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureReference(const textureReference ** texref, const void * symbol); 
#line 6311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaBindSurfaceToArray(const surfaceReference * surfref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
#line 6330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSurfaceReference(const surfaceReference ** surfref, const void * symbol); 
#line 6556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
#line 6571 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject); 
#line 6587 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
#line 6603 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
#line 6620 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
#line 6659 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
#line 6674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
#line 6689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
#line 6716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDriverGetVersion(int * driverVersion); 
#line 6733 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); 
#line 6738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
#line 6964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
}
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template< class T> __inline ::cudaChannelFormatDesc cudaCreateChannelDesc() 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(char)) * 8); 
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8); 
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
#line 201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8); 
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
#line 243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
#line 250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(short)) * 8); 
#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
#line 257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8); 
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
#line 264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 282 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
#line 285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 293 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 296 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
#line 299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 302 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 303 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
#line 306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(int)) * 8); 
#line 309 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8); 
#line 316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long> () 
#line 322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 323 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned long> () 
#line 329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long1> () 
#line 336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong1> () 
#line 343 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long2> () 
#line 350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong2> () 
#line 357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long4> () 
#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(long)) * 8); 
#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong4> () 
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8); 
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
{ 
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
int e = (((int)sizeof(float)) * 8); 
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
} 
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
static __inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
{ 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
cudaPitchedPtr s; 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(s.ptr) = d; 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(s.pitch) = p; 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(s.xsize) = xsz; 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(s.ysize) = ysz; 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
return s; 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
} 
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
static __inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
{ 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
cudaPos p; 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(p.x) = x; 
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(p.y) = y; 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(p.z) = z; 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
return p; 
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
} 
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
static __inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
{ 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
cudaExtent e; 
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(e.width) = w; 
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(e.height) = h; 
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
(e.depth) = d; 
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
return e; 
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
} 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline char1 make_char1(signed char x) 
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
char1 t; (t.x) = x; return t; 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uchar1 make_uchar1(unsigned char x) 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uchar1 t; (t.x) = x; return t; 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline char2 make_char2(signed char x, signed char y) 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
char2 t; (t.x) = x; (t.y) = y; return t; 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uchar2 t; (t.x) = x; (t.y) = y; return t; 
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline char3 make_char3(signed char x, signed char y, signed char z) 
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline short1 make_short1(short x) 
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
short1 t; (t.x) = x; return t; 
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ushort1 make_ushort1(unsigned short x) 
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ushort1 t; (t.x) = x; return t; 
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline short2 make_short2(short x, short y) 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
short2 t; (t.x) = x; (t.y) = y; return t; 
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ushort2 t; (t.x) = x; (t.y) = y; return t; 
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline short3 make_short3(short x, short y, short z) 
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline short4 make_short4(short x, short y, short z, short w) 
#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline int1 make_int1(int x) 
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
int1 t; (t.x) = x; return t; 
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uint1 make_uint1(unsigned x) 
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uint1 t; (t.x) = x; return t; 
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline int2 make_int2(int x, int y) 
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
int2 t; (t.x) = x; (t.y) = y; return t; 
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uint2 make_uint2(unsigned x, unsigned y) 
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uint2 t; (t.x) = x; (t.y) = y; return t; 
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline int3 make_int3(int x, int y, int z) 
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline int4 make_int4(int x, int y, int z, int w) 
#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline long1 make_long1(long x) 
#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
long1 t; (t.x) = x; return t; 
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulong1 make_ulong1(unsigned long x) 
#line 201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulong1 t; (t.x) = x; return t; 
#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline long2 make_long2(long x, long y) 
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
long2 t; (t.x) = x; (t.y) = y; return t; 
#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulong2 t; (t.x) = x; (t.y) = y; return t; 
#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline long3 make_long3(long x, long y, long z) 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline long4 make_long4(long x, long y, long z, long w) 
#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline float1 make_float1(float x) 
#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
float1 t; (t.x) = x; return t; 
#line 238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline float2 make_float2(float x, float y) 
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
float2 t; (t.x) = x; (t.y) = y; return t; 
#line 243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline float3 make_float3(float x, float y, float z) 
#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline float4 make_float4(float x, float y, float z, float w) 
#line 251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline longlong1 make_longlong1(__int64 x) 
#line 256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
longlong1 t; (t.x) = x; return t; 
#line 258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulonglong1 make_ulonglong1(unsigned __int64 x) 
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulonglong1 t; (t.x) = x; return t; 
#line 263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline longlong2 make_longlong2(__int64 x, __int64 y) 
#line 266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
longlong2 t; (t.x) = x; (t.y) = y; return t; 
#line 268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y) 
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline longlong3 make_longlong3(__int64 x, __int64 y, __int64 z) 
#line 276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 280 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulonglong3 make_ulonglong3(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z) 
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 282 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline longlong4 make_longlong4(__int64 x, __int64 y, __int64 z, __int64 w) 
#line 286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 287 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline ulonglong4 make_ulonglong4(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z, unsigned __int64 w) 
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 293 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline double1 make_double1(double x) 
#line 296 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
double1 t; (t.x) = x; return t; 
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline double2 make_double2(double x, double y) 
#line 301 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 302 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
double2 t; (t.x) = x; (t.y) = y; return t; 
#line 303 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline double3 make_double3(double x, double y, double z) 
#line 306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
static __inline double4 make_double4(double x, double y, double z, double w) 
#line 311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
{ 
#line 312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
} 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) extern int *__cdecl _errno(); 
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) unsigned long *__cdecl __doserrno(); 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
__declspec(dllimport) errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\errno.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const void *__cdecl memchr(const void * _Buf, int _Val, size_t _MaxCount); 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
int __cdecl memcmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void *__cdecl memcpy(void * _Dst, const void * _Src, size_t _Size); 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) void *__cdecl memmove(void * _Dst, const void * _Src, size_t _Size); 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void *__cdecl memset(void * _Dst, int _Val, size_t _Size); 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const char *__cdecl strchr(const char * _Str, int _Val); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const char *__cdecl strrchr(const char * _Str, int _Ch); 
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const char *__cdecl strstr(const char * _Str, const char * _SubStr); 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const __wchar_t *__cdecl wcschr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const __wchar_t *__cdecl wcsrchr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
__declspec(dllimport) const __wchar_t *__cdecl wcsstr(const __wchar_t * _Str, const __wchar_t * _SubStr); 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
static __inline errno_t __cdecl memcpy_s(void *const 
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_Destination, const rsize_t 
#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_DestinationSize, const void *const 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_Source, const rsize_t 
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_SourceSize) 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
if (_SourceSize == (0)) 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
if ((_Source == (0)) || (_DestinationSize < _SourceSize)) 
#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
memset(_Destination, 0, _DestinationSize); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 22; 
#line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
memcpy(_Destination, _Source, _SourceSize); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
} 
#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
static __inline errno_t __cdecl memmove_s(void *const 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_Destination, const rsize_t 
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_DestinationSize, const void *const 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_Source, const rsize_t 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
_SourceSize) 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
if (_SourceSize == (0)) 
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
}  
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
memmove(_Destination, _Source, _SourceSize); 
#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
return 0; 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
} 
#line 88 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memcpy_s.h"
}__pragma(pack ( pop )) 
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) int __cdecl _memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) int __cdecl _memicmp_l(const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) void *__cdecl memccpy(void * _Dst, const void * _Src, int _Val, size_t _Size); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) int __cdecl memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
extern "C++" inline void *__cdecl memchr(void *
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
_Pv, int 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
_C, size_t 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
_N) 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
{ 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
const void *const _Pvc = _Pv; 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
return const_cast< void *>(memchr(_Pvc, _C, _N)); 
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
} 
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_memory.h"
}__pragma(pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl wcscat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl wcscpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl wcsncat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl wcsncpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcstok_s(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wcsdup(const __wchar_t * _String); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcscat_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcscat(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcscmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcscpy_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcscpy(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcscspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcslen(const __wchar_t * _String); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsnlen(const __wchar_t * _Source, size_t _MaxCount); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
static __inline size_t __cdecl wcsnlen_s(const __wchar_t *
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_Source, size_t 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_MaxCount) 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return (_Source == (0)) ? 0 : wcsnlen(_Source, _MaxCount); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcsncat_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source, ::size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsncat(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsncmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcsncpy_s(__wchar_t (&_Destination)[_Size], const __wchar_t *_Source, ::size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsncpy(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) const __wchar_t *__cdecl wcspbrk(const __wchar_t * _String, const __wchar_t * _Control); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcstok(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#pragma warning(push)
#pragma warning(disable: 4141 4996)
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
static __inline __wchar_t *__cdecl _wcstok(__wchar_t *const 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_String, const __wchar_t *const 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_Delimiter) 
#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return wcstok(_String, _Delimiter, 0); 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(deprecated("wcstok has been changed to conform with the ISO C standard, adding an extra context parameter. To use the legacy Microsoft wcsto" "k, define _CRT_NON_CONFORMING_WCSTOK.")) inline __wchar_t *__cdecl 
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
wcstok(__wchar_t *
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_String, const __wchar_t *
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
_Delimiter) throw() 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return wcstok(_String, _Delimiter, 0); 
#line 260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)
#line 271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcserror(int _ErrorNumber); 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, int _ErrorNumber); 
#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcserror_s(__wchar_t (&_Buffer)[_Size], int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl __wcserror(const __wchar_t * _String); 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl __wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _ErrorMessage); 
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl __wcserror_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsnicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsnset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value, size_t _MaxCount); 
#line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsnset_s(__wchar_t (&_Destination)[_Size], __wchar_t _Value, ::size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsrev(__wchar_t * _String); 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value); 
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsset_s(__wchar_t (&_String)[_Size], __wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcslwr_s(__wchar_t * _String, size_t _SizeInWords); 
#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcslwr_s(__wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcslwr(__wchar_t * _String); 
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(__wchar_t * _String, size_t _SizeInWords, _locale_t _Locale); 
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcslwr_s_l(__wchar_t (&_String)[_Size], ::_locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcslwr_l(__wchar_t * _String, _locale_t _Locale); 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsupr_s(__wchar_t * _String, size_t _Size); 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsupr_s(__wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsupr(__wchar_t * _String); 
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(__wchar_t * _String, size_t _Size, _locale_t _Locale); 
#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcsupr_s_l(__wchar_t (&_String)[_Size], ::_locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsupr_l(__wchar_t * _String, _locale_t _Locale); 
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsxfrm(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount); 
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl _wcsxfrm_l(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcscoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcscoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsncoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsncoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsnicoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsnicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
extern "C++" {
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcschr(__wchar_t *_String, __wchar_t _C) 
#line 533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcschr(static_cast< const __wchar_t *>(_String), _C)); 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcspbrk(__wchar_t *_String, const __wchar_t *_Control) 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcspbrk(static_cast< const __wchar_t *>(_String), _Control)); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcsrchr(__wchar_t *_String, __wchar_t _C) 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcsrchr(static_cast< const __wchar_t *>(_String), _C)); 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
inline __wchar_t *__cdecl wcsstr(__wchar_t *_String, const __wchar_t *_SubStr) 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
{ 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
return const_cast< __wchar_t *>(wcsstr(static_cast< const __wchar_t *>(_String), _SubStr)); 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
} 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
}
#line 573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsdup(const __wchar_t * _String); 
#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsrev(__wchar_t * _String); 
#line 613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcslwr(__wchar_t * _String); 
#line 626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsupr(__wchar_t * _String); 
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstring.h"
}__pragma(pack ( pop )) 
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strcpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strcat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strerror_s(char * _Buffer, size_t _SizeInBytes, int _ErrorNumber); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strncat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl strncpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 63 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strtok_s(char * _String, const char * _Delimiter, char ** _Context); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) void *__cdecl _memccpy(void * _Dst, const void * _Src, int _Val, size_t _MaxCount); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strcat_s(char (&_Destination)[_Size], const char *_Source) throw() { return strcat_s(_Destination, _Size, _Source); } }
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl strcat(char * _Destination, const char * _Source); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
int __cdecl strcmp(const char * _Str1, const char * _Str2); 
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strcmpi(const char * _String1, const char * _String2); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strcoll(const char * _String1, const char * _String2); 
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strcoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl strcpy(char * _Dest, const char * _Source); 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strcpy_s(char (&_Destination)[_Size], const char *_Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl strcpy(char * _Destination, const char * _Source); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strcspn(const char * _Str, const char * _Control); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _strdup(const char * _Source); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strerror(const char * _ErrorMessage); 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strerror_s(char * _Buffer, size_t _SizeInBytes, const char * _ErrorMessage); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strerror_s(char (&_Buffer)[_Size], const char *_ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strerror(int _ErrorMessage); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strerror_s(char (&_Buffer)[_Size], int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricmp(const char * _String1, const char * _String2); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricoll(const char * _String1, const char * _String2); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricmp_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
size_t __cdecl strlen(const char * _Str); 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strlwr_s(char * _String, size_t _Size); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strlwr_s(char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strlwr(char * _String); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strlwr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strlwr_s_l(char (&_String)[_Size], ::_locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strlwr_l(char * _String, _locale_t _Locale); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncat(char * _Dest, const char * _Source, size_t _Count); 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strncat_s(char (&_Destination)[_Size], const char *_Source, ::size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncat(char * _Destination, const char * _Source, size_t _Count); 
#line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strncmp(const char * _Str1, const char * _Str2, size_t _MaxCount); 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strnicmp_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strnicoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strnicoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strncoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _strncoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl __strncnt(const char * _String, size_t _Count); 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl strncpy_s(char (&_Destination)[_Size], const char *_Source, ::size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }
#line 340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncpy(char * _Destination, const char * _Source, size_t _Count); 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strnlen(const char * _String, size_t _MaxCount); 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
static __inline size_t __cdecl strnlen_s(const char *
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
_String, size_t 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
_MaxCount) 
#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return (_String == (0)) ? 0 : strnlen(_String, _MaxCount); 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strnset(char * _Dest, int _Val, size_t _Count); 
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strnset_s(char * _String, size_t _SizeInBytes, int _Value, size_t _MaxCount); 
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strnset_s(char (&_Destination)[_Size], int _Value, ::size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strnset(char * _Destination, int _Value, size_t _Count); 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) const char *__cdecl strpbrk(const char * _Str, const char * _Control); 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strrev(char * _Str); 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strset_s(char * _Destination, size_t _DestinationSize, int _Value); 
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strset_s(char (&_Destination)[_Size], int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl _strset(char * _Destination, int _Value); 
#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl _strset(char * _Dest, int _Value); 
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strspn(const char * _Str, const char * _Control); 
#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strtok(char * _String, const char * _Delimiter); 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strupr_s(char * _String, size_t _Size); 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strupr_s(char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strupr(char * _String); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strupr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strupr_s_l(char (&_String)[_Size], ::_locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strupr_l(char * _String, _locale_t _Locale); 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strxfrm(char * _Destination, const char * _Source, size_t _MaxCount); 
#line 504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl _strxfrm_l(char * _Destination, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 514 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
extern "C++" {
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
inline char *__cdecl strchr(char *const _String, const int _Ch) 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return const_cast< char *>(strchr(static_cast< const char *>(_String), _Ch)); 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
inline char *__cdecl strpbrk(char *const _String, const char *const _Control) 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return const_cast< char *>(strpbrk(static_cast< const char *>(_String), _Control)); 
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
inline char *__cdecl strrchr(char *const _String, const int _Ch) 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return const_cast< char *>(strrchr(static_cast< const char *>(_String), _Ch)); 
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
inline char *__cdecl strstr(char *const _String, const char *const _SubString) 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
{ 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
return const_cast< char *>(strstr(static_cast< const char *>(_String), _SubString)); 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
} 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
}
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strdup(const char * _String); 
#line 562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strcmpi(const char * _String1, const char * _String2); 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl stricmp(const char * _String1, const char * _String2); 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strlwr(char * _String); 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strnset(char * _String, int _Value, size_t _MaxCount); 
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strrev(char * _String); 
#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
char *__cdecl strset(char * _String, int _Value); 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strupr(char * _String); 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\string.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
struct tm { 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_sec; 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_min; 
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_hour; 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_mday; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_mon; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_year; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_wday; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_yday; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
int tm_isdst; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
}; 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wasctime(const tm * _Tm); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wasctime_s(__wchar_t * _Buffer, size_t _SizeInWords, const tm * _Tm); 
#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wasctime_s(__wchar_t (&_Buffer)[_Size], const ::tm *_Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) size_t __cdecl wcsftime(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) size_t __cdecl _wcsftime_l(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm, _locale_t _Locale); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wctime32(const __time32_t * _Time); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wctime32_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time32_t * _Time); 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wctime32_s(__wchar_t (&_Buffer)[_Size], const ::__time32_t *_Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wctime64(const __time64_t * _Time); 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wctime64_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time64_t * _Time); 
#line 114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wctime64_s(__wchar_t (&_Buffer)[_Size], const ::__time64_t *_Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wstrdate_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wstrdate_s(__wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wstrdate(__wchar_t * _Buffer); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wstrtime_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wstrtime_s(__wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wstrtime(__wchar_t * _Buffer); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
#pragma warning(push)
#pragma warning(disable: 4996)
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
static __inline __wchar_t *__cdecl _wctime(const time_t *const 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
_Time) 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
{ 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
return _wctime64(_Time); 
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
} 
#line 192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
static __inline errno_t __cdecl _wctime_s(__wchar_t *const 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
_Buffer, const size_t 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
_SizeInWords, const time_t *const 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
_Time) 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
{ 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
return _wctime64_s(_Buffer, _SizeInWords, _Time); 
#line 199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
} 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
}
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
#pragma warning(pop)
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wtime.h"
__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
typedef long clock_t; 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
struct _timespec32 { 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__time32_t tv_sec; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
long tv_nsec; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
}; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
struct _timespec64 { 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__time64_t tv_sec; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
long tv_nsec; 
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
}; 
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
struct timespec { 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
time_t tv_sec; 
#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
long tv_nsec; 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
}; 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) int *__cdecl __daylight(); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) long *__cdecl __dstbias(); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) long *__cdecl __timezone(); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char **__cdecl __tzname(); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _get_daylight(int * _Daylight); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _get_dstbias(long * _DaylightSavingsBias); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _get_timezone(long * _TimeZone); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _get_tzname(size_t * _ReturnValue, char * _Buffer, size_t _SizeInBytes, int _Index); 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl asctime(const tm * _Tm); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl asctime_s(char * _Buffer, size_t _SizeInBytes, const tm * _Tm); 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl asctime_s(char (&_Buffer)[_Size], const ::tm *_Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) clock_t __cdecl clock(); 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _ctime32(const __time32_t * _Time); 
#line 147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _ctime32_s(char * _Buffer, size_t _SizeInBytes, const __time32_t * _Time); 
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ctime32_s(char (&_Buffer)[_Size], const ::__time32_t *_Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _ctime64(const __time64_t * _Time); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _ctime64_s(char * _Buffer, size_t _SizeInBytes, const __time64_t * _Time); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ctime64_s(char (&_Buffer)[_Size], const ::__time64_t *_Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) double __cdecl _difftime32(__time32_t _Time1, __time32_t _Time2); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) double __cdecl _difftime64(__time64_t _Time1, __time64_t _Time2); 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) tm *__cdecl _gmtime32(const __time32_t * _Time); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _gmtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) tm *__cdecl _gmtime64(const __time64_t * _Time); 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _gmtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) tm *__cdecl _localtime32(const __time32_t * _Time); 
#line 222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _localtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) tm *__cdecl _localtime64(const __time64_t * _Time); 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _localtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time32_t __cdecl _mkgmtime32(tm * _Tm); 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time64_t __cdecl _mkgmtime64(tm * _Tm); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time32_t __cdecl _mktime32(tm * _Tm); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time64_t __cdecl _mktime64(tm * _Tm); 
#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) size_t __cdecl strftime(char * _Buffer, size_t _SizeInBytes, const char * _Format, const tm * _Tm); 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) size_t __cdecl _strftime_l(char * _Buffer, size_t _MaxSize, const char * _Format, const tm * _Tm, _locale_t _Locale); 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _strdate_s(char * _Buffer, size_t _SizeInBytes); 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strdate_s(char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _strdate(char * _Buffer); 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _strtime_s(char * _Buffer, size_t _SizeInBytes); 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _strtime_s(char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _strtime(char * _Buffer); 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time32_t __cdecl _time32(__time32_t * _Time); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) __time64_t __cdecl _time64(__time64_t * _Time); 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) int __cdecl _timespec32_get(_timespec32 * _Ts, int _Base); 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) int __cdecl _timespec64_get(_timespec64 * _Ts, int _Base); 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) void __cdecl _tzset(); 
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using GetLocalTime in" "stead. See online help for details.")) 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) unsigned __cdecl _getsystime(tm * _Tm); 
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetLocalTime in" "stead. See online help for details.")) 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) unsigned __cdecl _setsystime(tm * _Tm, unsigned _Milliseconds); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline char *__cdecl ctime(const time_t *const 
#line 476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _ctime64(_Time); 
#pragma warning(pop)
} 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline double __cdecl difftime(const time_t 
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time1, const time_t 
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time2) 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _difftime64(_Time1, _Time2); 
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline tm *__cdecl gmtime(const time_t *const 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _gmtime64(_Time); 
#pragma warning(pop)
} 
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline tm *__cdecl localtime(const time_t *const 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _localtime64(_Time); 
#pragma warning(pop)
} 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline time_t __cdecl _mkgmtime(tm *const 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Tm) 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _mkgmtime64(_Tm); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline time_t __cdecl mktime(tm *const 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Tm) 
#line 527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _mktime64(_Tm); 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline time_t __cdecl time(time_t *const 
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _time64(_Time); 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline int __cdecl timespec_get(timespec *const 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Ts, const int 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Base) 
#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _timespec64_get((_timespec64 *)_Ts, _Base); 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline errno_t __cdecl ctime_s(char *const 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Buffer, const size_t 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_SizeInBytes, const time_t *const 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _ctime64_s(_Buffer, _SizeInBytes, _Time); 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline errno_t __cdecl gmtime_s(tm *const 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Tm, const time_t *const 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _gmtime64_s(_Tm, _Time); 
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
static __inline errno_t __cdecl localtime_s(tm *const 
#line 569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Tm, const time_t *const 
#line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
_Time) 
#line 572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
{ 
#line 573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
return _localtime64_s(_Tm, _Time); 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
} 
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
__declspec(dllimport) void __cdecl tzset(); 
#line 600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\time.h"
}__pragma(pack ( pop )) 
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
extern "C" {
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
__declspec(dllimport) extern clock_t __cdecl clock(); 
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
extern void *__cdecl memset(void *, int, size_t); 
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
extern void *__cdecl memcpy(void *, const void *, size_t); 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\common_functions.h"
}
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" {
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __cdecl abs(int); 
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern long __cdecl labs(long); 
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __int64 llabs(__int64); 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl fabs(double x); 
#line 257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float fabsf(float x); 
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline int min(int, int); 
#line 263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline unsigned umin(unsigned, unsigned); 
#line 264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 llmin(__int64, __int64); 
#line 265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline unsigned __int64 ullmin(unsigned __int64, unsigned __int64); 
#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fminf(float x, float y); 
#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fmin(double x, double y); 
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline int max(int, int); 
#line 315 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline unsigned umax(unsigned, unsigned); 
#line 316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 llmax(__int64, __int64); 
#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline unsigned __int64 ullmax(unsigned __int64, unsigned __int64); 
#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fmaxf(float x, float y); 
#line 360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fmax(double, double); 
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl sin(double x); 
#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl cos(double x); 
#line 454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern void sincos(double x, double * sptr, double * cptr); 
#line 470 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern void sincosf(float x, float * sptr, float * cptr); 
#line 515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl tan(double x); 
#line 584 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl sqrt(double x); 
#line 656 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rsqrt(double x); 
#line 726 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rsqrtf(float x); 
#line 784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl log2(double x); 
#line 809 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl exp2(double x); 
#line 834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl exp2f(float x); 
#line 859 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double exp10(double x); 
#line 882 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float exp10f(float x); 
#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl expm1(double x); 
#line 975 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl expm1f(float x); 
#line 1030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl log2f(float x); 
#line 1082 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl log10(double x); 
#line 1153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl log(double x); 
#line 1249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl log1p(double x); 
#line 1346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl log1pf(float x); 
#line 1419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl floor(double x); 
#line 1458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl exp(double x); 
#line 1489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl cosh(double x); 
#line 1519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl sinh(double x); 
#line 1549 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl tanh(double x); 
#line 1586 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl acosh(double x); 
#line 1624 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl acoshf(float x); 
#line 1640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl asinh(double x); 
#line 1656 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl asinhf(float x); 
#line 1710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl atanh(double x); 
#line 1764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl atanhf(float x); 
#line 1821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl ldexp(double x, int exp); 
#line 1877 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float ldexpf(float x, int exp); 
#line 1931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl logb(double x); 
#line 1986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl logbf(float x); 
#line 2016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern int __cdecl ilogb(double x); 
#line 2046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern int __cdecl ilogbf(float x); 
#line 2122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl scalbn(double x, int n); 
#line 2198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl scalbnf(float x, int n); 
#line 2274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl scalbln(double x, long n); 
#line 2350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl scalblnf(float x, long n); 
#line 2426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl frexp(double x, int * nptr); 
#line 2501 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float frexpf(float x, int * nptr); 
#line 2517 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl round(double x); 
#line 2534 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl roundf(float x); 
#line 2552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lround(double x); 
#line 2570 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lroundf(float x); 
#line 2588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llround(double x); 
#line 2606 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llroundf(float x); 
#line 2658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl rintf(float x); 
#line 2674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lrint(double x); 
#line 2690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern long __cdecl lrintf(float x); 
#line 2706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llrint(double x); 
#line 2722 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llrintf(float x); 
#line 2775 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl nearbyint(double x); 
#line 2828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl nearbyintf(float x); 
#line 2888 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl ceil(double x); 
#line 2902 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl trunc(double x); 
#line 2917 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl truncf(float x); 
#line 2943 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fdim(double x, double y); 
#line 2969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fdimf(float x, float y); 
#line 3003 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl atan2(double y, double x); 
#line 3034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl atan(double x); 
#line 3057 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl acos(double x); 
#line 3089 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl asin(double x); 
#line 3132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl hypot(double x, double y); 
#line 3187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rhypot(double x, double y); 
#line 3231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline float __cdecl hypotf(float x, float y); 
#line 3285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rhypotf(float x, float y); 
#line 3332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl norm3d(double a, double b, double c); 
#line 3383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rnorm3d(double a, double b, double c); 
#line 3432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl norm4d(double a, double b, double c, double d); 
#line 3488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rnorm4d(double a, double b, double c, double d); 
#line 3533 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double norm(int dim, const double * t); 
#line 3584 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rnorm(int dim, const double * t); 
#line 3636 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rnormf(int dim, const float * a); 
#line 3680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float normf(int dim, const float * a); 
#line 3725 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float norm3df(float a, float b, float c); 
#line 3776 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rnorm3df(float a, float b, float c); 
#line 3825 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float norm4df(float a, float b, float c, float d); 
#line 3881 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rnorm4df(float a, float b, float c, float d); 
#line 3967 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl cbrt(double x); 
#line 4053 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl cbrtf(float x); 
#line 4106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double rcbrt(double x); 
#line 4156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float rcbrtf(float x); 
#line 4216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double sinpi(double x); 
#line 4276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float sinpif(float x); 
#line 4328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double cospi(double x); 
#line 4380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float cospif(float x); 
#line 4410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern void sincospi(double x, double * sptr, double * cptr); 
#line 4440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern void sincospif(float x, float * sptr, float * cptr); 
#line 4752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl pow(double x, double y); 
#line 4808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl modf(double x, double * iptr); 
#line 4867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double __cdecl fmod(double x, double y); 
#line 4955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl remainder(double x, double y); 
#line 5045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl remainderf(float x, float y); 
#line 5099 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl remquo(double x, double y, int * quo); 
#line 5153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl remquof(float x, float y, int * quo); 
#line 5192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl j0(double x); 
#line 5234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float j0f(float x); 
#line 5295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl j1(double x); 
#line 5356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float j1f(float x); 
#line 5399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl jn(int n, double x); 
#line 5442 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float jnf(int n, float x); 
#line 5494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl y0(double x); 
#line 5546 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float y0f(float x); 
#line 5598 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl y1(double x); 
#line 5650 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float y1f(float x); 
#line 5703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl yn(int n, double x); 
#line 5756 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float ynf(int n, float x); 
#line 5783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl cyl_bessel_i0(double x); 
#line 5809 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float cyl_bessel_i0f(float x); 
#line 5836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl cyl_bessel_i1(double x); 
#line 5862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float cyl_bessel_i1f(float x); 
#line 5947 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl erf(double x); 
#line 6029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl erff(float x); 
#line 6091 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double erfinv(double y); 
#line 6148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float erfinvf(float y); 
#line 6189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl erfc(double x); 
#line 6227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl erfcf(float x); 
#line 6355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl lgamma(double x); 
#line 6416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double erfcinv(double y); 
#line 6472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float erfcinvf(float y); 
#line 6530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double normcdfinv(double y); 
#line 6588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float normcdfinvf(float y); 
#line 6631 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double normcdf(double y); 
#line 6674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float normcdff(float y); 
#line 6749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern double erfcx(double x); 
#line 6824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float erfcxf(float x); 
#line 6960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl lgammaf(float x); 
#line 7069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl tgamma(double x); 
#line 7178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl tgammaf(float x); 
#line 7191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl copysign(double x, double y); 
#line 7204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl copysignf(float x, float y); 
#line 7241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl nextafter(double x, double y); 
#line 7278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl nextafterf(float x, float y); 
#line 7294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl nan(const char * tagp); 
#line 7310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl nanf(const char * tagp); 
#line 7315 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isinff(float); 
#line 7316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isnanf(float); 
#line 7326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __finite(double); 
#line 7327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __finitef(float); 
#line 7328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __signbit(double); 
#line 7329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isnan(double); 
#line 7330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isinf(double); 
#line 7333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __signbitf(float); 
#line 7494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern double __cdecl fma(double x, double y, double z); 
#line 7652 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
__declspec(dllimport) extern float __cdecl fmaf(float x, float y, float z); 
#line 7661 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __signbitl(long double); 
#line 7667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __finitel(long double); 
#line 7668 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isinfl(long double); 
#line 7669 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern int __isnanl(long double); 
#line 7719 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float acosf(float x); 
#line 7759 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float asinf(float x); 
#line 7799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float atanf(float x); 
#line 7832 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float atan2f(float y, float x); 
#line 7856 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float cosf(float x); 
#line 7898 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float sinf(float x); 
#line 7940 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float tanf(float x); 
#line 7964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float coshf(float x); 
#line 8005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float sinhf(float x); 
#line 8035 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float tanhf(float x); 
#line 8086 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float logf(float x); 
#line 8136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float expf(float x); 
#line 8187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float log10f(float x); 
#line 8242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float modff(float x, float * iptr); 
#line 8550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float powf(float x, float y); 
#line 8619 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float sqrtf(float x); 
#line 8678 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float ceilf(float x); 
#line 8750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float floorf(float x); 
#line 8809 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern __inline float fmodf(float x, float y); 
#line 8823 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
}
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#pragma warning(push)
#pragma warning(disable:4738)
#pragma warning(disable:4820)
#line 26 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
struct _exception { 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
int type; 
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
char *name; 
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double arg1; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double arg2; 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double retval; 
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
struct _complex { 
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double x, y; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef float float_t; 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double double_t; 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const double _HUGE; 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
void __cdecl _fperrraise(int _Except); 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dclass(double _X); 
#line 162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldclass(long double _X); 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdclass(float _X); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _dsign(double _X); 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _ldsign(long double _X); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _fdsign(float _X); 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _dpcomp(double _X, double _Y); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _ldpcomp(long double _X, long double _Y); 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _fdpcomp(float _X, float _Y); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dtest(double * _Px); 
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldtest(long double * _Px); 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdtest(float * _Px); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _d_int(double * _Px, short _Xexp); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ld_int(long double * _Px, short _Xexp); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fd_int(float * _Px, short _Xexp); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dscale(double * _Px, long _Lexp); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldscale(long double * _Px, long _Lexp); 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdscale(float * _Px, long _Lexp); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dunscale(short * _Pex, double * _Px); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldunscale(short * _Pex, long double * _Px); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdunscale(short * _Pex, float * _Px); 
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dexp(double * _Px, double _Y, long _Eoff); 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _ldexp(long double * _Px, long double _Y, long _Eoff); 
#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdexp(float * _Px, float _Y, long _Eoff); 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _dnorm(unsigned short * _Ps); 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) short __cdecl _fdnorm(unsigned short * _Ps); 
#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _dpoly(double _X, const double * _Tab, int _N); 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl _ldpoly(long double _X, const long double * _Tab, int _N); 
#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _fdpoly(float _X, const float * _Tab, int _N); 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _dlog(double _X, int _Baseflag); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl _ldlog(long double _X, int _Baseflag); 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _fdlog(float _X, int _Baseflag); 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _dsin(double _X, unsigned _Qoff); 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl _ldsin(long double _X, unsigned _Qoff); 
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _fdsin(float _X, unsigned _Qoff); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef 
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
union { 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
unsigned short _Sh[4]; 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double _Val; 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} _double_val; 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
union { 
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
unsigned short _Sh[2]; 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
float _Val; 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} _float_val; 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
union { 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
unsigned short _Sh[4]; 
#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
long double _Val; 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} _ldouble_val; 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
union { 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
unsigned short _Word[4]; 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
float _Float; 
#line 233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double _Double; 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
long double _Long_double; 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} _float_const; 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C; 
#line 238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C; 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C; 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _Eps_C, _Rteps_C; 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _FEps_C, _FRteps_C; 
#line 243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const _float_const _LEps_C, _LRteps_C; 
#line 245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const double _Zero_C, _Xbig_C; 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const float _FZero_C, _FXbig_C; 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern const long double _LZero_C, _LXbig_C; 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern "C++" {
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int fpclassify(float _X) throw() 
#line 279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fdtest(&_X); 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int fpclassify(double _X) throw() 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _dtest(&_X); 
#line 286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int fpclassify(long double _X) throw() 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _ldtest(&_X); 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline bool signbit(float _X) throw() 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fdsign(_X) != 0; 
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline bool signbit(double _X) throw() 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _dsign(_X) != 0; 
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline bool signbit(long double _X) throw() 
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _ldsign(_X) != 0; 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int _fpcomp(float _X, float _Y) throw() 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fdpcomp(_X, _Y); 
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int _fpcomp(double _X, double _Y) throw() 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _dpcomp(_X, _Y); 
#line 316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
inline int _fpcomp(long double _X, long double _Y) throw() 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _ldpcomp(_X, _Y); 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Trc, class _Tre> struct _Combined_type { 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef float _Type; 
#line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Combined_type< float, double>  { 
#line 330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Combined_type< float, long double>  { 
#line 335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef long double _Type; 
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty, class _T2> struct _Real_widened { 
#line 340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef long double _Type; 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_widened< float, float>  { 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef float _Type; 
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_widened< float, double>  { 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_widened< double, float>  { 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_widened< double, double>  { 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> struct _Real_type { 
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef double _Type; 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_type< float>  { 
#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef float _Type; 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template<> struct _Real_type< long double>  { 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef long double _Type; 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}; 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _T1, class _T2> inline int 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
_fpcomp(_T1 _X, _T2 _Y) throw() 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
typedef typename _Combined_type< float, typename _Real_widened< typename _Real_type< _T1> ::_Type, typename _Real_type< _T2> ::_Type> ::_Type> ::_Type _Tw; 
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fpcomp((_Tw)_X, (_Tw)_Y); 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> inline bool 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isfinite(_Ty _X) throw() 
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fpclassify(_X) <= 0; 
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> inline bool 
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isinf(_Ty _X) throw() 
#line 396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fpclassify(_X) == 1; 
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> inline bool 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isnan(_Ty _X) throw() 
#line 402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fpclassify(_X) == 2; 
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty> inline bool 
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isnormal(_Ty _X) throw() 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fpclassify(_X) == (-1); 
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isgreater(_Ty1 _X, _Ty2 _Y) throw() 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & 4) != 0; 
#line 416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isgreaterequal(_Ty1 _X, _Ty2 _Y) throw() 
#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & (2 | 4)) != 0; 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isless(_Ty1 _X, _Ty2 _Y) throw() 
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & 1) != 0; 
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
islessequal(_Ty1 _X, _Ty2 _Y) throw() 
#line 432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & (1 | 2)) != 0; 
#line 434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
islessgreater(_Ty1 _X, _Ty2 _Y) throw() 
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (_fpcomp(_X, _Y) & (1 | 4)) != 0; 
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
template< class _Ty1, class _Ty2> inline bool 
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
isunordered(_Ty1 _X, _Ty2 _Y) throw() 
#line 444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _fpcomp(_X, _Y) == 0; 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
int __cdecl abs(int _X); 
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
long __cdecl labs(long _X); 
#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__int64 __cdecl llabs(__int64 _X); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl acos(double _X); 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl asin(double _X); 
#line 460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl atan(double _X); 
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl atan2(double _Y, double _X); 
#line 463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl cos(double _X); 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl cosh(double _X); 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl exp(double _X); 
#line 466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl fabs(double _X); 
#line 467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl fmod(double _X, double _Y); 
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl log(double _X); 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl log10(double _X); 
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl pow(double _X, double _Y); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl sin(double _X); 
#line 472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl sinh(double _X); 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl sqrt(double _X); 
#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl tan(double _X); 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double __cdecl tanh(double _X); 
#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl acosh(double _X); 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl asinh(double _X); 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl atanh(double _X); 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl atof(const char * _String); 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _cabs(_complex _Complex_value); 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl cbrt(double _X); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl ceil(double _X); 
#line 485 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _chgsign(double _X); 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl copysign(double _Number, double _Sign); 
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _copysign(double _Number, double _Sign); 
#line 488 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl erf(double _X); 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl erfc(double _X); 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl exp2(double _X); 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl expm1(double _X); 
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl fdim(double _X, double _Y); 
#line 493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl floor(double _X); 
#line 494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl fma(double _X, double _Y, double _Z); 
#line 495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl fmax(double _X, double _Y); 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl fmin(double _X, double _Y); 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl frexp(double _X, int * _Y); 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl hypot(double _X, double _Y); 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _hypot(double _X, double _Y); 
#line 500 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl ilogb(double _X); 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl ldexp(double _X, int _Y); 
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl lgamma(double _X); 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llrint(double _X); 
#line 504 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llround(double _X); 
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl log1p(double _X); 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl log2(double _X); 
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl logb(double _X); 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lrint(double _X); 
#line 509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lround(double _X); 
#line 511 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
int __cdecl _matherr(_exception * _Except); 
#line 513 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl modf(double _X, double * _Y); 
#line 514 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl nan(const char *); 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl nearbyint(double _X); 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl nextafter(double _X, double _Y); 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl nexttoward(double _X, long double _Y); 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl remainder(double _X, double _Y); 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl remquo(double _X, double _Y, int * _Z); 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl rint(double _X); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl round(double _X); 
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl scalbln(double _X, long _Y); 
#line 523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl scalbn(double _X, int _Y); 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl tgamma(double _X); 
#line 525 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl trunc(double _X); 
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _j0(double _X); 
#line 527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _j1(double _X); 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _jn(int _X, double _Y); 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _y0(double _X); 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _y1(double _X); 
#line 531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl _yn(int _X, double _Y); 
#line 533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl acoshf(float _X); 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl asinhf(float _X); 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl atanhf(float _X); 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl cbrtf(float _X); 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _chgsignf(float _X); 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl copysignf(float _Number, float _Sign); 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _copysignf(float _Number, float _Sign); 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl erff(float _X); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl erfcf(float _X); 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl expm1f(float _X); 
#line 543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl exp2f(float _X); 
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl fdimf(float _X, float _Y); 
#line 545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl fmaf(float _X, float _Y, float _Z); 
#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl fmaxf(float _X, float _Y); 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl fminf(float _X, float _Y); 
#line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl _hypotf(float _X, float _Y); 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl ilogbf(float _X); 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl lgammaf(float _X); 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llrintf(float _X); 
#line 552 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llroundf(float _X); 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl log1pf(float _X); 
#line 554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl log2f(float _X); 
#line 555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl logbf(float _X); 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lrintf(float _X); 
#line 557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lroundf(float _X); 
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl nanf(const char *); 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl nearbyintf(float _X); 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl nextafterf(float _X, float _Y); 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl nexttowardf(float _X, long double _Y); 
#line 562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl remainderf(float _X, float _Y); 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl remquof(float _X, float _Y, int * _Z); 
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl rintf(float _X); 
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl roundf(float _X); 
#line 566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl scalblnf(float _X, long _Y); 
#line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl scalbnf(float _X, int _Y); 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl tgammaf(float _X); 
#line 569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) float __cdecl truncf(float _X); 
#line 573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl _set_SSE2_enable(int _Flag); 
#line 608 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl acosf(float _X) 
#line 609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)acos(_X); 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl asinf(float _X) 
#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)asin(_X); 
#line 616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 618 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl atan2f(float _Y, float _X) 
#line 619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)atan2(_Y, _X); 
#line 621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl atanf(float _X) 
#line 624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 625 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)atan(_X); 
#line 626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 628 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl ceilf(float _X) 
#line 629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)ceil(_X); 
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl cosf(float _X) 
#line 634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 635 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)cos(_X); 
#line 636 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl coshf(float _X) 
#line 639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)cosh(_X); 
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl expf(float _X) 
#line 644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)exp(_X); 
#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl fabsf(float _X) 
#line 657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)fabs(_X); 
#line 659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 670 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl floorf(float _X) 
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)floor(_X); 
#line 673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl fmodf(float _X, float _Y) 
#line 676 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)fmod(_X, _Y); 
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl frexpf(float _X, int *_Y) 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)frexp(_X, _Y); 
#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl hypotf(float _X, float _Y) 
#line 688 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _hypotf(_X, _Y); 
#line 690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl ldexpf(float _X, int _Y) 
#line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)ldexp(_X, _Y); 
#line 695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl log10f(float _X) 
#line 712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)log10(_X); 
#line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 716 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl logf(float _X) 
#line 717 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)log(_X); 
#line 719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl modff(float _X, float *_Y) 
#line 722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double _F, _I; 
#line 724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
_F = modf(_X, &_I); 
#line 725 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
(*_Y) = ((float)_I); 
#line 726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)_F; 
#line 727 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl powf(float _X, float _Y) 
#line 730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)pow(_X, _Y); 
#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl sinf(float _X) 
#line 735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)sin(_X); 
#line 737 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl sinhf(float _X) 
#line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)sinh(_X); 
#line 742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 744 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl sqrtf(float _X) 
#line 745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 746 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)sqrt(_X); 
#line 747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl tanf(float _X) 
#line 750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)tan(_X); 
#line 752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline float __cdecl tanhf(float _X) 
#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 756 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return (float)tanh(_X); 
#line 757 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl acoshl(long double _X); 
#line 763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl acosl(long double _X) 
#line 764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return acos((double)_X); 
#line 766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl asinhl(long double _X); 
#line 770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl asinl(long double _X) 
#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 772 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return asin((double)_X); 
#line 773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl atan2l(long double _Y, long double _X) 
#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return atan2((double)_Y, (double)_X); 
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 780 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl atanhl(long double _X); 
#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl atanl(long double _X) 
#line 783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return atan((double)_X); 
#line 785 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl cbrtl(long double _X); 
#line 789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl ceill(long double _X) 
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return ceil((double)_X); 
#line 792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl _chgsignl(long double _X) 
#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _chgsign((double)_X); 
#line 797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl copysignl(long double _Number, long double _Sign); 
#line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl _copysignl(long double _Number, long double _Sign) 
#line 802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _copysign((double)_Number, (double)_Sign); 
#line 804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl coshl(long double _X) 
#line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return cosh((double)_X); 
#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl cosl(long double _X) 
#line 812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return cos((double)_X); 
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl erfl(long double _X); 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl erfcl(long double _X); 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl expl(long double _X) 
#line 820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return exp((double)_X); 
#line 822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl exp2l(long double _X); 
#line 825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl expm1l(long double _X); 
#line 827 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl fabsl(long double _X) 
#line 828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fabs((double)_X); 
#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl fdiml(long double _X, long double _Y); 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl floorl(long double _X) 
#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return floor((double)_X); 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 839 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl fmal(long double _X, long double _Y, long double _Z); 
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl fmaxl(long double _X, long double _Y); 
#line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl fminl(long double _X, long double _Y); 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl fmodl(long double _X, long double _Y) 
#line 844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return fmod((double)_X, (double)_Y); 
#line 846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl frexpl(long double _X, int *_Y) 
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return frexp((double)_X, _Y); 
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) int __cdecl ilogbl(long double _X); 
#line 855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl _hypotl(long double _X, long double _Y) 
#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _hypot((double)_X, (double)_Y); 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl hypotl(long double _X, long double _Y) 
#line 861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _hypot((double)_X, (double)_Y); 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl ldexpl(long double _X, int _Y) 
#line 866 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return ldexp((double)_X, _Y); 
#line 868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl lgammal(long double _X); 
#line 871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llrintl(long double _X); 
#line 872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) __int64 __cdecl llroundl(long double _X); 
#line 874 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl logl(long double _X) 
#line 875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return log((double)_X); 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl log10l(long double _X) 
#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return log10((double)_X); 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl log1pl(long double _X); 
#line 885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl log2l(long double _X); 
#line 886 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl logbl(long double _X); 
#line 887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lrintl(long double _X); 
#line 888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long __cdecl lroundl(long double _X); 
#line 890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl modfl(long double _X, long double *_Y) 
#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
double _F, _I; 
#line 893 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
_F = modf((double)_X, &_I); 
#line 894 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
(*_Y) = _I; 
#line 895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return _F; 
#line 896 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl nanl(const char *); 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl nearbyintl(long double _X); 
#line 900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl nextafterl(long double _X, long double _Y); 
#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl nexttowardl(long double _X, long double _Y); 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl powl(long double _X, long double _Y) 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return pow((double)_X, (double)_Y); 
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl remainderl(long double _X, long double _Y); 
#line 909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl remquol(long double _X, long double _Y, int * _Z); 
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl rintl(long double _X); 
#line 911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl roundl(long double _X); 
#line 912 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl scalblnl(long double _X, long _Y); 
#line 913 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl scalbnl(long double _X, int _Y); 
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl sinhl(long double _X) 
#line 916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return sinh((double)_X); 
#line 918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl sinl(long double _X) 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return sin((double)_X); 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 925 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl sqrtl(long double _X) 
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return sqrt((double)_X); 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 930 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl tanhl(long double _X) 
#line 931 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return tanh((double)_X); 
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__inline long double __cdecl tanl(long double _X) 
#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
{ 
#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
return tan((double)_X); 
#line 938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
} 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl tgammal(long double _X); 
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) long double __cdecl truncl(long double _X); 
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
extern double HUGE; 
#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl j0(double _X); 
#line 969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl j1(double _X); 
#line 970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl jn(int _X, double _Y); 
#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl y0(double _X); 
#line 972 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl y1(double _X); 
#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__declspec(dllimport) double __cdecl yn(int _X, double _Y); 
#line 983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
}
#line 979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
#pragma warning(pop)
#line 983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\math.h"
__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_calloc_base(size_t _Count, size_t _Size); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
calloc(size_t _Count, size_t _Size); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) int __cdecl _callnewh(size_t _Size); 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) void *__cdecl 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_expand(void * _Block, size_t _Size); 
#line 79 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) void __cdecl 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_free_base(void * _Block); 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) void __cdecl 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
free(void * _Block); 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_malloc_base(size_t _Size); 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
malloc(size_t _Size); 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) size_t __cdecl 
#line 103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_msize(void * _Block); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_realloc_base(void * _Block, size_t _Size); 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
realloc(void * _Block, size_t _Size); 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_recalloc(void * _Block, size_t _Count, size_t _Size); 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) void __cdecl 
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_free(void * _Block); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_malloc(size_t _Size, size_t _Alignment); 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) size_t __cdecl 
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_msize(void * _Block, size_t _Alignment, size_t _Offset); 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_realloc(void * _Block, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_offset_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_realloc(void * _Block, size_t _Size, size_t _Alignment); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
_aligned_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_malloc.h"
}__pragma(pack ( pop )) 
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl bsearch_s(const void * _Key, const void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void __cdecl qsort_s(void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl bsearch(const void * _Key, const void * _Base, size_t _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void __cdecl qsort(void * _Base, size_t _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl _lfind_s(const void * _Key, const void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl _lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 80 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl _lsearch_s(const void * _Key, void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); 
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl _lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); 
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_search.h"
}__pragma(pack ( pop )) 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _itow_s(int _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _itow_s(int _Value, __wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _itow(int _Value, __wchar_t * _Buffer, int _Radix); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ltow_s(long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ltow_s(long _Value, __wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ltow(long _Value, __wchar_t * _Buffer, int _Radix); 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ultow_s(unsigned long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ultow_s(unsigned long _Value, __wchar_t (&_Buffer)[_Size], int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ultow(unsigned long _Value, __wchar_t * _Buffer, int _Radix); 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl wcstod(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl _wcstod_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long __cdecl wcstol(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long __cdecl _wcstol_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl wcstoll(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wcstoll_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned long __cdecl wcstoul(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned long __cdecl _wcstoul_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl wcstoull(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _wcstoull_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long double __cdecl wcstold(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long double __cdecl _wcstold_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) float __cdecl wcstof(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) float __cdecl _wcstof_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl _wtof(const __wchar_t * _String); 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl _wtof_l(const __wchar_t * _String, _locale_t _Locale); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wtoi(const __wchar_t * _String); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wtoi_l(const __wchar_t * _String, _locale_t _Locale); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long __cdecl _wtol(const __wchar_t * _String); 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) long __cdecl _wtol_l(const __wchar_t * _String, _locale_t _Locale); 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wtoll(const __wchar_t * _String); 
#line 252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wtoll_l(const __wchar_t * _String, _locale_t _Locale); 
#line 258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _i64tow_s(__int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _i64tow(__int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ui64tow_s(unsigned __int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ui64tow(unsigned __int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wtoi64(const __wchar_t * _String); 
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wtoi64_l(const __wchar_t * _String, _locale_t _Locale); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wcstoi64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __int64 __cdecl _wcstoi64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wfullpath(__wchar_t * _Buffer, const __wchar_t * _Path, size_t _BufferCount); 
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wmakepath_s(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wmakepath_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Drive, const __wchar_t *_Dir, const __wchar_t *_Filename, const __wchar_t *_Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wmakepath(__wchar_t * _Buffer, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wperror(const __wchar_t * _ErrMsg); 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wsplitpath(const __wchar_t * _FullPath, __wchar_t * _Drive, __wchar_t * _Dir, __wchar_t * _Filename, __wchar_t * _Ext); 
#line 382 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wsplitpath_s(const __wchar_t * _FullPath, __wchar_t * _Drive, size_t _DriveCount, __wchar_t * _Dir, size_t _DirCount, __wchar_t * _Filename, size_t _FilenameCount, __wchar_t * _Ext, size_t _ExtCount); 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline ::errno_t __cdecl _wsplitpath_s(const __wchar_t *_Path, __wchar_t (&_Drive)[_DriveSize], __wchar_t (&_Dir)[_DirSize], __wchar_t (&_Name)[_NameSize], __wchar_t (&_Ext)[_ExtSize]) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wdupenv_s(__wchar_t ** _Buffer, size_t * _BufferCount, const __wchar_t * _VarName); 
#line 416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _wgetenv(const __wchar_t * _VarName); 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wgetenv_s(size_t * _RequiredCount, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _VarName); 
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wgetenv_s(::size_t *_RequiredCount, __wchar_t (&_Buffer)[_Size], const __wchar_t *_VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wputenv(const __wchar_t * _EnvString); 
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wputenv_s(const __wchar_t * _Name, const __wchar_t * _Value); 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wsearchenv_s(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _Buffer, size_t _BufferCount); 
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wsearchenv_s(const __wchar_t *_Filename, const __wchar_t *_VarName, __wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wsearchenv(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _ResultPath); 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wsystem(const __wchar_t * _Command); 
#line 477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdlib.h"
}__pragma(pack ( pop )) 
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl exit(int _Code); 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit(int _Code); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl _Exit(int _Code); 
#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit(int _Code); 
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __cdecl _set_abort_behavior(unsigned _Flags, unsigned _Mask); 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef int (__cdecl *_onexit_t)(void); 
#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int __cdecl atexit(void (__cdecl *)(void)); 
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
_onexit_t __cdecl _onexit(_onexit_t _Func); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int __cdecl at_quick_exit(void (__cdecl *)(void)); 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef void (__cdecl *_purecall_handler)(void); 
#line 157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef void (__cdecl *_invalid_parameter_handler)(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(_purecall_handler _Handler); 
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(); 
#line 173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(); 
#line 207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _set_error_mode(int _Mode); 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl _errno(); 
#line 214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned long *__cdecl __doserrno(); 
#line 220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char **__cdecl __sys_errlist(); 
#line 227 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl __sys_nerr(); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl perror(const char * _ErrMsg); 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char **__cdecl __p__pgmptr(); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __wchar_t **__cdecl __p__wpgmptr(); 
#line 237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl __p__fmode(); 
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_pgmptr(char ** _Value); 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_wpgmptr(__wchar_t ** _Value); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _set_fmode(int _Mode); 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_fmode(int * _PMode); 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct _div_t { 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int quot; 
#line 269 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int rem; 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} div_t; 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct _ldiv_t { 
#line 274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
long quot; 
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
long rem; 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} ldiv_t; 
#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct _lldiv_t { 
#line 280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__int64 quot; 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__int64 rem; 
#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} lldiv_t; 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
int __cdecl abs(int _Number); 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
long __cdecl labs(long _Number); 
#line 286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__int64 __cdecl llabs(__int64 _Number); 
#line 287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__int64 __cdecl _abs64(__int64 _Number); 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned short __cdecl _byteswap_ushort(unsigned short _Number); 
#line 290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned long __cdecl _byteswap_ulong(unsigned long _Number); 
#line 291 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 _Number); 
#line 293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) div_t __cdecl div(int _Numerator, int _Denominator); 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) ldiv_t __cdecl ldiv(long _Numerator, long _Denominator); 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) lldiv_t __cdecl lldiv(__int64 _Numerator, __int64 _Denominator); 
#line 299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning (push)
#pragma warning (disable:6540)
#line 302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __cdecl _rotl(unsigned _Value, int _Shift); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned long __cdecl _lrotl(unsigned long _Value, int _Shift); 
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift); 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __cdecl _rotr(unsigned _Value, int _Shift); 
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned long __cdecl _lrotr(unsigned long _Value, int _Shift); 
#line 329 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift); 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning (pop)
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl srand(unsigned _Seed); 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl rand(); 
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {
#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
inline long abs(const long _X) throw() 
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
{ 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
return labs(_X); 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} 
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
inline __int64 abs(const __int64 _X) throw() 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
{ 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
return llabs(_X); 
#line 362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} 
#line 364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
inline ldiv_t div(const long _A1, const long _A2) throw() 
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
{ 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
return ldiv(_A1, _A2); 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} 
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
inline lldiv_t div(const __int64 _A1, const __int64 _A2) throw() 
#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
{ 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
return lldiv(_A1, _A2); 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
}
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma pack ( push, 4 )
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned char ld[10]; 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _LDOUBLE; 
#pragma pack ( pop )
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
double x; 
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _CRT_DOUBLE; 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
float f; 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _CRT_FLOAT; 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
long double x; 
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _LONGDOUBLE; 
#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma pack ( push, 4 )
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
typedef 
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
struct { 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
unsigned char ld12[12]; 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
} _LDBL12; 
#pragma pack ( pop )
#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) double __cdecl atof(const char * _String); 
#line 442 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl atoi(const char * _String); 
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long __cdecl atol(const char * _String); 
#line 444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl atoll(const char * _String); 
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _atoi64(const char * _String); 
#line 447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoi_l(const char * _String, _locale_t _Locale); 
#line 449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long __cdecl _atol_l(const char * _String, _locale_t _Locale); 
#line 450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _atoll_l(const char * _String, _locale_t _Locale); 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _atoi64_l(const char * _String, _locale_t _Locale); 
#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoflt(_CRT_FLOAT * _Result, const char * _String); 
#line 454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atodbl(_CRT_DOUBLE * _Result, char * _String); 
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoldbl(_LDOUBLE * _Result, char * _String); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoflt_l(_CRT_FLOAT * _Result, const char * _String, _locale_t _Locale); 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atodbl_l(_CRT_DOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _atoldbl_l(_LDOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) float __cdecl strtof(const char * _String, char ** _EndPtr); 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) float __cdecl _strtof_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) double __cdecl strtod(const char * _String, char ** _EndPtr); 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) double __cdecl _strtod_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long double __cdecl strtold(const char * _String, char ** _EndPtr); 
#line 512 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long double __cdecl _strtold_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long __cdecl strtol(const char * _String, char ** _EndPtr, int _Radix); 
#line 526 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) long __cdecl _strtol_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl strtoll(const char * _String, char ** _EndPtr, int _Radix); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _strtoll_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned long __cdecl strtoul(const char * _String, char ** _EndPtr, int _Radix); 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned long __cdecl _strtoul_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl strtoull(const char * _String, char ** _EndPtr, int _Radix); 
#line 571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _strtoull_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _strtoi64(const char * _String, char ** _EndPtr, int _Radix); 
#line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __int64 __cdecl _strtoi64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(const char * _String, char ** _EndPtr, int _Radix); 
#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 617 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _itoa_s(int _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _itoa_s(int _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _itoa(int _Value, char * _Buffer, int _Radix); 
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ltoa_s(long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ltoa_s(long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ltoa(long _Value, char * _Buffer, int _Radix); 
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ultoa_s(unsigned long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ultoa_s(unsigned long _Value, char (&_Buffer)[_Size], int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _i64toa_s(__int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _i64toa(__int64 _Value, char * _Buffer, int _Radix); 
#line 704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ui64toa_s(unsigned __int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ui64toa(unsigned __int64 _Value, char * _Buffer, int _Radix); 
#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ecvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount, int *_PtDec, int *_PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
#line 751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _fcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size], double _Value, int _FractionalDigitCount, int *_PtDec, int *_PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
#line 781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _gcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount); 
#line 796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size], double _Value, int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _gcvt(double _Value, int _DigitCount, char * _Buffer); 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl ___mb_cur_max_func(); 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t); 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl mblen(const char * _Ch, size_t _MaxCount); 
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _mblen_l(const char * _Ch, size_t _MaxCount, _locale_t _Locale); 
#line 857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstrlen(const char * _String); 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstrlen_l(const char * _String, _locale_t _Locale); 
#line 870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstrnlen(const char * _String, size_t _MaxCount); 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstrnlen_l(const char * _String, size_t _MaxCount, _locale_t _Locale); 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl mbtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes); 
#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _mbtowc_l(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale); 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl mbstowcs_s(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount); 
#line 907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl mbstowcs_s(::size_t *_PtNumOfCharConverted, __wchar_t (&_Dest)[_Size], const char *_Source, ::size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl mbstowcs(__wchar_t * _Dest, const char * _Source, size_t _MaxCount); 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale); 
#line 932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _mbstowcs_s_l(::size_t *_PtNumOfCharConverted, __wchar_t (&_Dest)[_Size], const char *_Source, ::size_t _MaxCount, ::_locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstowcs_l(__wchar_t * _Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl wctomb(char * _MbCh, __wchar_t _WCh); 
#line 960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _wctomb_l(char * _MbCh, __wchar_t _WCh, _locale_t _Locale); 
#line 969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl wctomb_s(int * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, __wchar_t _WCh); 
#line 979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _wctomb_s_l(int * _SizeConverted, char * _MbCh, size_t _SizeInBytes, __wchar_t _WCh, _locale_t _Locale); 
#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl wcstombs_s(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes); 
#line 995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl wcstombs_s(::size_t *_PtNumOfCharConverted, char (&_Dest)[_Size], const __wchar_t *_Source, ::size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 1003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl wcstombs(char * _Dest, const __wchar_t * _Source, size_t _MaxCount); 
#line 1011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale); 
#line 1020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wcstombs_s_l(::size_t *_PtNumOfCharConverted, char (&_Dest)[_Size], const __wchar_t *_Source, ::size_t _MaxCount, ::_locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 1029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _wcstombs_l(char * _Dest, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 1059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _fullpath(char * _Buffer, const char * _Path, size_t _BufferCount); 
#line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _makepath_s(char * _Buffer, size_t _BufferCount, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1077 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _makepath_s(char (&_Buffer)[_Size], const char *_Drive, const char *_Dir, const char *_Filename, const char *_Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _makepath(char * _Buffer, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _splitpath(const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext); 
#line 1105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _splitpath_s(const char * _FullPath, char * _Drive, size_t _DriveCount, char * _Dir, size_t _DirCount, char * _Filename, size_t _FilenameCount, char * _Ext, size_t _ExtCount); 
#line 1117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline ::errno_t __cdecl _splitpath_s(const char *_Dest, char (&_Drive)[_DriveSize], char (&_Dir)[_DirSize], char (&_Name)[_NameSize], char (&_Ext)[_ExtSize]) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl getenv_s(size_t * _RequiredCount, char * _Buffer, rsize_t _BufferCount, const char * _VarName); 
#line 1144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl __p___argc(); 
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char ***__cdecl __p___argv(); 
#line 1146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __wchar_t ***__cdecl __p___wargv(); 
#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char ***__cdecl __p__environ(); 
#line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) __wchar_t ***__cdecl __p__wenviron(); 
#line 1183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl getenv(const char * _VarName); 
#line 1187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl getenv_s(::size_t *_RequiredCount, char (&_Buffer)[_Size], const char *_VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _dupenv_s(char ** _Buffer, size_t * _BufferCount, const char * _VarName); 
#line 1210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl system(const char * _Command); 
#line 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning (push)
#pragma warning (disable:6540)
#line 1220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _putenv(const char * _EnvString); 
#line 1225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _putenv_s(const char * _Name, const char * _Value); 
#line 1230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning (pop)
#line 1232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _searchenv_s(const char * _Filename, const char * _VarName, char * _Buffer, size_t _BufferCount); 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _searchenv_s(const char *_Filename, const char *_VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _searchenv(const char * _Filename, const char * _VarName, char * _Buffer); 
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode in" "stead. See online help for details.")) 
#line 1255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _seterrormode(int _Mode); 
#line 1259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. S" "ee online help for details.")) 
#line 1260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _beep(unsigned _Frequency, unsigned _Duration); 
#line 1265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. " "See online help for details.")) 
#line 1266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _sleep(unsigned long _Duration); 
#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4141)
#line 1293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 1301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 1309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl gcvt(double _Value, int _DigitCount, char * _DstBuf); 
#line 1316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl itoa(int _Value, char * _Buffer, int _Radix); 
#line 1323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl ltoa(long _Value, char * _Buffer, int _Radix); 
#line 1331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 1338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 1349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl putenv(const char * _EnvString); 
#line 1355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
#pragma warning(pop)
#line 1357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
_onexit_t __cdecl onexit(_onexit_t _Func); 
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
}
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("_MSC_VER", "1900")
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "2")
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("RuntimeLibrary", "MDd_DynamicDebug")
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"
#pragma comment(lib, "msvcprtd")
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdlib.h"
__pragma(pack ( pop )) 
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma pack ( push, 8 )
#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
typedef __int64 _Longlong; 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
typedef unsigned __int64 _ULonglong; 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
namespace std { 
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
enum _Uninitialized { 
#line 614 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
_Noinit
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
}; 
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma warning(push)
#pragma warning(disable:4412)
class __declspec(dllimport) _Lockit { 
#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
public: __thiscall _Lockit(); 
#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
explicit __thiscall _Lockit(int); 
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
__thiscall ~_Lockit() noexcept; 
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Lockit_ctor(int); 
#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Lockit_dtor(int); 
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
private: static void __cdecl _Lockit_ctor(_Lockit *); 
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Lockit_ctor(_Lockit *, int); 
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Lockit_dtor(_Lockit *); 
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
public: _Lockit(const _Lockit &) = delete;
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
_Lockit &operator=(const _Lockit &) = delete;
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
private: int _Locktype; 
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
}; 
#line 764 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
class __declspec(dllimport) _Init_locks { 
#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
public: __thiscall _Init_locks(); 
#line 781 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
__thiscall ~_Init_locks() noexcept; 
#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
private: static void __cdecl _Init_locks_ctor(_Init_locks *); 
#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
static void __cdecl _Init_locks_dtor(_Init_locks *); 
#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
}; 
#line 799 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma warning(pop)
}
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void)); 
#line 811 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
typedef unsigned long _Uint32t; 
#line 817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#pragma pack ( pop )
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline double abs(double _Xx) noexcept 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabs(_Xx); 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline double pow(double _Xx, int _Yx) noexcept 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
if (_Yx == 2) { 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return _Xx * _Xx; }  
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::pow(_Xx, static_cast< double>(_Yx)); 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float abs(float _Xx) noexcept 
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabsf(_Xx); 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float acos(float _Xx) noexcept 
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::acosf(_Xx); 
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float acosh(float _Xx) noexcept 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::acoshf(_Xx); 
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float asin(float _Xx) noexcept 
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::asinf(_Xx); 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float asinh(float _Xx) noexcept 
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::asinhf(_Xx); 
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float atan(float _Xx) noexcept 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atanf(_Xx); 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float atanh(float _Xx) noexcept 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atanhf(_Xx); 
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float atan2(float _Yx, float _Xx) noexcept 
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atan2f(_Yx, _Xx); 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float cbrt(float _Xx) noexcept 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::cbrtf(_Xx); 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float ceil(float _Xx) noexcept 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ceilf(_Xx); 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float copysign(float _Number, float 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Sign) noexcept 
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::copysignf(_Number, _Sign); 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float cos(float _Xx) noexcept 
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::cosf(_Xx); 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float cosh(float _Xx) noexcept 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::coshf(_Xx); 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float erf(float _Xx) noexcept 
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::erff(_Xx); 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float erfc(float _Xx) noexcept 
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::erfcf(_Xx); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float exp(float _Xx) noexcept 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::expf(_Xx); 
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float exp2(float _Xx) noexcept 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::exp2f(_Xx); 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float expm1(float _Xx) noexcept 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::expm1f(_Xx); 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fabs(float _Xx) noexcept 
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabsf(_Xx); 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fdim(float _Xx, float _Yx) noexcept 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fdimf(_Xx, _Yx); 
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float floor(float _Xx) noexcept 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::floorf(_Xx); 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fma(float _Xx, float _Yx, float 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Zx) noexcept 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmaf(_Xx, _Yx, _Zx); 
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fmax(float _Xx, float _Yx) noexcept 
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmaxf(_Xx, _Yx); 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fmin(float _Xx, float _Yx) noexcept 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fminf(_Xx, _Yx); 
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float fmod(float _Xx, float _Yx) noexcept 
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmodf(_Xx, _Yx); 
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float frexp(float _Xx, int *_Yx) noexcept 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::frexpf(_Xx, _Yx); 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float hypot(float _Xx, float _Yx) noexcept 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::hypotf(_Xx, _Yx); 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline int ilogb(float _Xx) noexcept 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ilogbf(_Xx); 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float ldexp(float _Xx, int _Yx) noexcept 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ldexpf(_Xx, _Yx); 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float lgamma(float _Xx) noexcept 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lgammaf(_Xx); 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline __int64 llrint(float _Xx) noexcept 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::llrintf(_Xx); 
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline __int64 llround(float _Xx) noexcept 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::llroundf(_Xx); 
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float log(float _Xx) noexcept 
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::logf(_Xx); 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float log10(float _Xx) noexcept 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log10f(_Xx); 
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float log1p(float _Xx) noexcept 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log1pf(_Xx); 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float log2(float _Xx) noexcept 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log2f(_Xx); 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float logb(float _Xx) noexcept 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::logbf(_Xx); 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long lrint(float _Xx) noexcept 
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lrintf(_Xx); 
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long lround(float _Xx) noexcept 
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lroundf(_Xx); 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float modf(float _Xx, float *_Yx) noexcept 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::modff(_Xx, _Yx); 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float nearbyint(float _Xx) noexcept 
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nearbyintf(_Xx); 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float nextafter(float _Xx, float _Yx) noexcept 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nextafterf(_Xx, _Yx); 
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float nexttoward(float _Xx, long double 
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nexttowardf(_Xx, _Yx); 
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float pow(float _Xx, float 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::powf(_Xx, _Yx); 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float pow(float _Xx, int _Yx) noexcept 
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
if (_Yx == 2) { 
#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return _Xx * _Xx; }  
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::powf(_Xx, static_cast< float>(_Yx)); 
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float remainder(float _Xx, float _Yx) noexcept 
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::remainderf(_Xx, _Yx); 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float remquo(float _Xx, float _Yx, int *
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Zx) noexcept 
#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::remquof(_Xx, _Yx, _Zx); 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float rint(float _Xx) noexcept 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::rintf(_Xx); 
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float round(float _Xx) noexcept 
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::roundf(_Xx); 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float scalbln(float _Xx, long _Yx) noexcept 
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::scalblnf(_Xx, _Yx); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float scalbn(float _Xx, int _Yx) noexcept 
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::scalbnf(_Xx, _Yx); 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float sin(float _Xx) noexcept 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sinf(_Xx); 
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float sinh(float _Xx) noexcept 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sinhf(_Xx); 
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float sqrt(float _Xx) noexcept 
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sqrtf(_Xx); 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float tan(float _Xx) noexcept 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tanf(_Xx); 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float tanh(float _Xx) noexcept 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tanhf(_Xx); 
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float tgamma(float _Xx) noexcept 
#line 319 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tgammaf(_Xx); 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline float trunc(float _Xx) noexcept 
#line 324 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::truncf(_Xx); 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double abs(long double _Xx) noexcept 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabsl(_Xx); 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double acos(long double _Xx) noexcept 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::acosl(_Xx); 
#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double acosh(long double _Xx) noexcept 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::acoshl(_Xx); 
#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double asin(long double _Xx) noexcept 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::asinl(_Xx); 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double asinh(long double _Xx) noexcept 
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::asinhl(_Xx); 
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double atan(long double _Xx) noexcept 
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atanl(_Xx); 
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double atanh(long double _Xx) noexcept 
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atanhl(_Xx); 
#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double atan2(long double _Yx, long double 
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Xx) noexcept 
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::atan2l(_Yx, _Xx); 
#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double cbrt(long double _Xx) noexcept 
#line 370 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::cbrtl(_Xx); 
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double ceil(long double _Xx) noexcept 
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ceill(_Xx); 
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double copysign(long double _Number, long double 
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Sign) noexcept 
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::copysignl(_Number, _Sign); 
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double cos(long double _Xx) noexcept 
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::cosl(_Xx); 
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double cosh(long double _Xx) noexcept 
#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::coshl(_Xx); 
#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double erf(long double _Xx) noexcept 
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::erfl(_Xx); 
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double erfc(long double _Xx) noexcept 
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::erfcl(_Xx); 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double exp(long double _Xx) noexcept 
#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::expl(_Xx); 
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double exp2(long double _Xx) noexcept 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::exp2l(_Xx); 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double expm1(long double _Xx) noexcept 
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::expm1l(_Xx); 
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fabs(long double _Xx) noexcept 
#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fabsl(_Xx); 
#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fdim(long double _Xx, long double 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fdiml(_Xx, _Yx); 
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double floor(long double _Xx) noexcept 
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::floorl(_Xx); 
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fma(long double _Xx, long double 
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx, long double _Zx) noexcept 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmal(_Xx, _Yx, _Zx); 
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fmax(long double _Xx, long double 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmaxl(_Xx, _Yx); 
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fmin(long double _Xx, long double 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fminl(_Xx, _Yx); 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double fmod(long double _Xx, long double 
#line 455 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::fmodl(_Xx, _Yx); 
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double frexp(long double _Xx, int *
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::frexpl(_Xx, _Yx); 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double hypot(long double _Xx, long double 
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::hypotl(_Xx, _Yx); 
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline int ilogb(long double _Xx) noexcept 
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ilogbl(_Xx); 
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double ldexp(long double _Xx, int 
#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::ldexpl(_Xx, _Yx); 
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double lgamma(long double _Xx) noexcept 
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lgammal(_Xx); 
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline __int64 llrint(long double _Xx) noexcept 
#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::llrintl(_Xx); 
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline __int64 llround(long double _Xx) noexcept 
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::llroundl(_Xx); 
#line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double log(long double _Xx) noexcept 
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::logl(_Xx); 
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double log10(long double _Xx) noexcept 
#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log10l(_Xx); 
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double log1p(long double _Xx) noexcept 
#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log1pl(_Xx); 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double log2(long double _Xx) noexcept 
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::log2l(_Xx); 
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double logb(long double _Xx) noexcept 
#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::logbl(_Xx); 
#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 523 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long lrint(long double _Xx) noexcept 
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lrintl(_Xx); 
#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long lround(long double _Xx) noexcept 
#line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::lroundl(_Xx); 
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double modf(long double _Xx, long double *
#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::modfl(_Xx, _Yx); 
#line 537 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double nearbyint(long double _Xx) noexcept 
#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nearbyintl(_Xx); 
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double nextafter(long double _Xx, long double 
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 546 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nextafterl(_Xx, _Yx); 
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double nexttoward(long double _Xx, long double 
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::nexttowardl(_Xx, _Yx); 
#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double pow(long double _Xx, long double 
#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::powl(_Xx, _Yx); 
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double pow(long double _Xx, int 
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
if (_Yx == 2) { 
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return _Xx * _Xx; }  
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::powl(_Xx, static_cast< long double>(_Yx)); 
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double remainder(long double _Xx, long double 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::remainderl(_Xx, _Yx); 
#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double remquo(long double _Xx, long double 
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx, int *_Zx) noexcept 
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::remquol(_Xx, _Yx, _Zx); 
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 583 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double rint(long double _Xx) noexcept 
#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 585 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::rintl(_Xx); 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 588 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double round(long double _Xx) noexcept 
#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::roundl(_Xx); 
#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double scalbln(long double _Xx, long 
#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 596 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::scalblnl(_Xx, _Yx); 
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double scalbn(long double _Xx, int 
#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
_Yx) noexcept 
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::scalbnl(_Xx, _Yx); 
#line 603 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double sin(long double _Xx) noexcept 
#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sinl(_Xx); 
#line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double sinh(long double _Xx) noexcept 
#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sinhl(_Xx); 
#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 615 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double sqrt(long double _Xx) noexcept 
#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::sqrtl(_Xx); 
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 620 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double tan(long double _Xx) noexcept 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tanl(_Xx); 
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double tanh(long double _Xx) noexcept 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tanhl(_Xx); 
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double tgamma(long double _Xx) noexcept 
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 632 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::tgammal(_Xx); 
#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
inline long double trunc(long double _Xx) noexcept 
#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
{ 
#line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
return ::truncl(_Xx); 
#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
} 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
namespace std { 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::size_t;using ::div_t;using ::ldiv_t;
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::abort;using ::abs;using ::atexit;
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::atof;using ::atoi;using ::atol;
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::bsearch;using ::calloc;using ::div;
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::exit;using ::free;
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::labs;using ::ldiv;using ::malloc;
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::mblen;using ::mbstowcs;using ::mbtowc;
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::qsort;using ::rand;using ::realloc;
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::srand;using ::strtod;using ::strtol;
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::strtoul;
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::wcstombs;using ::wctomb;
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::lldiv_t;
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::getenv;
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::system;
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::atoll;using ::llabs;using ::lldiv;
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::strtof;using ::strtold;
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::strtoll;using ::strtoull;
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
using ::_Exit;using ::at_quick_exit;using ::quick_exit;
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
}
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#pragma warning(push,3)
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#pragma pack ( push, 8 )
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
namespace std { 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Nil { 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template < class _Ty,
 _Ty _Val >
 struct integral_constant
 {
 static constexpr _Ty value = _Val;

 typedef _Ty value_type;
 typedef integral_constant < _Ty, _Val > type;

 constexpr operator value_type ( ) const noexcept
  {
  return ( value );
  }

 constexpr value_type operator ( ) ( ) const noexcept
  {
  return ( value );
  }
 };
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef integral_constant< bool, true>  true_type; 
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef integral_constant< bool, false>  false_type; 
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< bool _Val> using bool_constant = integral_constant< bool, _Val> ; 
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< bool _Val> 
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Cat_base : public integral_constant< bool, _Val>  { 
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< bool _Test, class 
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty = void> 
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct enable_if { 
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct enable_if< true, _Ty>  { 
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< bool _Test, class 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty1, class 
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty2> 
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct conditional { 
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty2 type; 
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty1, class 
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty2> 
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct conditional< true, _Ty1, _Ty2>  { 
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty1 type; 
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty1, class 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Ty2> 
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_same : public false_type { 
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty1> 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_same< _Ty1, _Ty1>  : public true_type { 
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty, class 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Uty> constexpr bool 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
is_same_v = (is_same< _Ty, _Uty> ::value); 
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_const { 
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_const< const _Ty>  { 
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_volatile { 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_volatile< volatile _Ty>  { 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_cv { 
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef typename remove_const< typename remove_volatile< _Ty> ::type> ::type type; 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Is_integral : public false_type { 
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< bool>  : public true_type { 
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< char>  : public true_type { 
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned char>  : public true_type { 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< signed char>  : public true_type { 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< __wchar_t>  : public true_type { 
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned short>  : public true_type { 
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< signed short>  : public true_type { 
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned>  : public true_type { 
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< signed int>  : public true_type { 
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned long>  : public true_type { 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< signed long>  : public true_type { 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< char16_t>  : public true_type { 
#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< char32_t>  : public true_type { 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< __int64>  : public true_type { 
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned __int64>  : public true_type { 
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_integral : public _Is_integral< typename remove_cv< _Ty> ::type>  { 
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
is_integral_v = (is_integral< _Ty> ::value); 
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Is_floating_point : public false_type { 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_floating_point< float>  : public true_type { 
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_floating_point< double>  : public true_type { 
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template<> struct _Is_floating_point< long double>  : public true_type { 
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_floating_point : public _Is_floating_point< typename remove_cv< _Ty> ::type>  { 
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
is_floating_point_v = (is_floating_point< _Ty> ::value); 
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct is_arithmetic : public _Cat_base< is_integral< _Ty> ::value || is_floating_point< _Ty> ::value>  { 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
is_arithmetic_v = (is_arithmetic< _Ty> ::value); 
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_reference { 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_reference< _Ty &>  { 
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct remove_reference< _Ty &&>  { 
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Wrap_int { 
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
_Wrap_int(int) 
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
{ 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
} 
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 325 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
struct _Identity { 
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
typedef _Ty type; 
#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}; 
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
}
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#pragma warning(push,3)
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#pragma pack ( push, 8 )
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
namespace std { 
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template< class _Ty> 
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
struct _Promote_to_float { 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
typedef typename conditional< is_integral< _Ty> ::value, double, _Ty> ::type type; 
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
}; 
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template< class _Ty1, class 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
_Ty2> 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
struct _Common_float_type { 
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
typedef typename _Promote_to_float< _Ty1> ::type _Ty1f; 
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
typedef typename _Promote_to_float< _Ty2> ::type _Ty2f; 
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
typedef typename conditional< is_same< typename _Promote_to_float< _Ty1> ::type, long double> ::value || is_same< typename _Promote_to_float< _Ty2> ::type, long double> ::value, long double, typename conditional< is_same< typename _Promote_to_float< _Ty1> ::type, double> ::value || is_same< typename _Promote_to_float< _Ty2> ::type, double> ::value, double, float> ::type> ::type type; 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
}; 
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
}
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template < class _Ty1,
 class _Ty2 > inline
 typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value
  && :: std :: is_arithmetic < _Ty2 > :: value,
  typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type
 pow ( const _Ty1 _Left, const _Ty2 _Right )
 {
 typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type;
 return ( :: pow ( type ( _Left ), type ( _Right ) ) );
 }
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl acos(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type acos ( _Ty _Left ) { return ( :: acos ( ( double ) _Left ) ); }
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl asin(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type asin ( _Ty _Left ) { return ( :: asin ( ( double ) _Left ) ); }
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl atan(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type atan ( _Ty _Left ) { return ( :: atan ( ( double ) _Left ) ); }
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl atan2(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type atan2 ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: atan2 ( ( type ) _Left, ( type ) _Right ) ); }
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl ceil(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type ceil ( _Ty _Left ) { return ( :: ceil ( ( double ) _Left ) ); }
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl cos(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cos ( _Ty _Left ) { return ( :: cos ( ( double ) _Left ) ); }
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl cosh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cosh ( _Ty _Left ) { return ( :: cosh ( ( double ) _Left ) ); }
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl exp(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type exp ( _Ty _Left ) { return ( :: exp ( ( double ) _Left ) ); }
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl fabs(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type fabs ( _Ty _Left ) { return ( :: fabs ( ( double ) _Left ) ); }
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl floor(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type floor ( _Ty _Left ) { return ( :: floor ( ( double ) _Left ) ); }
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl fmod(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmod ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmod ( ( type ) _Left, ( type ) _Right ) ); }
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl frexp(double, int *); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type frexp ( _Ty _Left, int * _Arg2 ) { return ( :: frexp ( ( double ) _Left, _Arg2 ) ); }
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl ldexp(double, int); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type ldexp ( _Ty _Left, int _Arg2 ) { return ( :: ldexp ( ( double ) _Left, _Arg2 ) ); }
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl log(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log ( _Ty _Left ) { return ( :: log ( ( double ) _Left ) ); }
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl log10(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log10 ( _Ty _Left ) { return ( :: log10 ( ( double ) _Left ) ); }
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl sin(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sin ( _Ty _Left ) { return ( :: sin ( ( double ) _Left ) ); }
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl sinh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sinh ( _Ty _Left ) { return ( :: sinh ( ( double ) _Left ) ); }
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl sqrt(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sqrt ( _Ty _Left ) { return ( :: sqrt ( ( double ) _Left ) ); }
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl tan(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tan ( _Ty _Left ) { return ( :: tan ( ( double ) _Left ) ); }
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" double __cdecl tanh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tanh ( _Ty _Left ) { return ( :: tanh ( ( double ) _Left ) ); }
#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline float _Fma(float _Left, float _Middle, float _Right) 
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::fmaf(_Left, _Middle, _Right); 
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline double _Fma(double _Left, double _Middle, double _Right) 
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::fma(_Left, _Middle, _Right); 
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline long double _Fma(long double _Left, long double _Middle, long double 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
_Right) 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::fmal(_Left, _Middle, _Right); 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template < class _Ty1,
 class _Ty2,
 class _Ty3 > inline
 typename :: std :: _Common_float_type < _Ty1,
  typename :: std :: _Common_float_type < _Ty2, _Ty3 > :: type > :: type
 fma ( _Ty1 _Left, _Ty2 _Middle, _Ty3 _Right )
 {
 typedef typename :: std :: _Common_float_type < _Ty1,
  typename :: std :: _Common_float_type < _Ty2, _Ty3 > :: type > :: type type;
 return ( _Fma ( ( type ) _Left, ( type ) _Middle, ( type ) _Right ) );
 }
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline float _Remquo(float _Left, float _Right, int *_Pquo) 
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::remquof(_Left, _Right, _Pquo); 
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline double _Remquo(double _Left, double _Right, int *_Pquo) 
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::remquo(_Left, _Right, _Pquo); 
#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
inline long double _Remquo(long double _Left, long double _Right, int *_Pquo) 
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
{ 
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
return ::remquol(_Left, _Right, _Pquo); 
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
} 
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
template < class _Ty1,
 class _Ty2 > inline
 typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type
 remquo ( _Ty1 _Left, _Ty2 _Right, int * _Pquo )
 {
 typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type;
 return ( _Remquo ( ( type ) _Left, ( type ) _Right, _Pquo ) );
 }
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl acosh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type acosh ( _Ty _Left ) { return ( :: acosh ( ( double ) _Left ) ); }
#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl asinh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type asinh ( _Ty _Left ) { return ( :: asinh ( ( double ) _Left ) ); }
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl atanh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type atanh ( _Ty _Left ) { return ( :: atanh ( ( double ) _Left ) ); }
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl cbrt(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cbrt ( _Ty _Left ) { return ( :: cbrt ( ( double ) _Left ) ); }
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl copysign(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type copysign ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: copysign ( ( type ) _Left, ( type ) _Right ) ); }
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl erf(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type erf ( _Ty _Left ) { return ( :: erf ( ( double ) _Left ) ); }
#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl erfc(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type erfc ( _Ty _Left ) { return ( :: erfc ( ( double ) _Left ) ); }
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl expm1(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type expm1 ( _Ty _Left ) { return ( :: expm1 ( ( double ) _Left ) ); }
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl exp2(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type exp2 ( _Ty _Left ) { return ( :: exp2 ( ( double ) _Left ) ); }
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl fdim(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fdim ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fdim ( ( type ) _Left, ( type ) _Right ) ); }
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl fmax(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmax ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmax ( ( type ) _Left, ( type ) _Right ) ); }
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl fmin(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmin ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmin ( ( type ) _Left, ( type ) _Right ) ); }
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl hypot(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type hypot ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: hypot ( ( type ) _Left, ( type ) _Right ) ); }
#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) int __cdecl ilogb(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, int > :: type ilogb ( _Ty _Left ) { return ( :: ilogb ( ( double ) _Left ) ); }
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl lgamma(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type lgamma ( _Ty _Left ) { return ( :: lgamma ( ( double ) _Left ) ); }
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) __int64 __cdecl llrint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long long > :: type llrint ( _Ty _Left ) { return ( :: llrint ( ( double ) _Left ) ); }
#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) __int64 __cdecl llround(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long long > :: type llround ( _Ty _Left ) { return ( :: llround ( ( double ) _Left ) ); }
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl log1p(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log1p ( _Ty _Left ) { return ( :: log1p ( ( double ) _Left ) ); }
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl log2(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log2 ( _Ty _Left ) { return ( :: log2 ( ( double ) _Left ) ); }
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl logb(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type logb ( _Ty _Left ) { return ( :: logb ( ( double ) _Left ) ); }
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) long __cdecl lrint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long > :: type lrint ( _Ty _Left ) { return ( :: lrint ( ( double ) _Left ) ); }
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) long __cdecl lround(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long > :: type lround ( _Ty _Left ) { return ( :: lround ( ( double ) _Left ) ); }
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl nearbyint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type nearbyint ( _Ty _Left ) { return ( :: nearbyint ( ( double ) _Left ) ); }
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl nextafter(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type nextafter ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: nextafter ( ( type ) _Left, ( type ) _Right ) ); }
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl nexttoward(double, long double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type nexttoward ( _Ty _Left, long double _Arg2 ) { return ( :: nexttoward ( ( double ) _Left, _Arg2 ) ); }
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl remainder(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: is_arithmetic < _Ty1 > :: value && :: std :: is_arithmetic < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type remainder ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: remainder ( ( type ) _Left, ( type ) _Right ) ); }
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl rint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type rint ( _Ty _Left ) { return ( :: rint ( ( double ) _Left ) ); }
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl round(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type round ( _Ty _Left ) { return ( :: round ( ( double ) _Left ) ); }
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl scalbln(double, long); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type scalbln ( _Ty _Left, long _Arg2 ) { return ( :: scalbln ( ( double ) _Left, _Arg2 ) ); }
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl scalbn(double, int); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type scalbn ( _Ty _Left, int _Arg2 ) { return ( :: scalbn ( ( double ) _Left, _Arg2 ) ); }
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl tgamma(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tgamma ( _Ty _Left ) { return ( :: tgamma ( ( double ) _Left ) ); }
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
extern "C" __declspec(dllimport) double __cdecl trunc(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type trunc ( _Ty _Left ) { return ( :: trunc ( ( double ) _Left ) ); }
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
namespace std { 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::abs;using ::acos;using ::asin;
#line 653 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::atan;using ::atan2;using ::ceil;
#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cos;using ::cosh;using ::exp;
#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fabs;using ::floor;using ::fmod;
#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::frexp;using ::ldexp;using ::log;
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log10;using ::modf;using ::pow;
#line 658 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::sin;using ::sinh;using ::sqrt;
#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::tan;using ::tanh;
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acosf;using ::asinf;
#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::atanf;using ::atan2f;using ::ceilf;
#line 663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cosf;using ::coshf;using ::expf;
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fabsf;using ::floorf;using ::fmodf;
#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::frexpf;using ::ldexpf;using ::logf;
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log10f;using ::modff;using ::powf;
#line 667 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::sinf;using ::sinhf;using ::sqrtf;
#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::tanf;using ::tanhf;
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acosl;using ::asinl;
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::atanl;using ::atan2l;using ::ceill;
#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cosl;using ::coshl;using ::expl;
#line 673 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fabsl;using ::floorl;using ::fmodl;
#line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::frexpl;using ::ldexpl;using ::logl;
#line 675 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log10l;using ::modfl;using ::powl;
#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::sinl;using ::sinhl;using ::sqrtl;
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::tanl;using ::tanhl;
#line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::float_t;using ::double_t;
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acosh;using ::asinh;using ::atanh;
#line 682 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cbrt;using ::erf;using ::erfc;
#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::expm1;using ::exp2;
#line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::hypot;using ::ilogb;using ::lgamma;
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log1p;using ::log2;using ::logb;
#line 686 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::llrint;using ::lrint;using ::nearbyint;
#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::rint;using ::llround;using ::lround;
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fdim;using ::fma;using ::fmax;using ::fmin;
#line 689 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::round;using ::trunc;
#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::remainder;using ::remquo;
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::copysign;using ::nan;using ::nextafter;
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::scalbn;using ::scalbln;
#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nexttoward;using ::tgamma;
#line 695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acoshf;using ::asinhf;using ::atanhf;
#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cbrtf;using ::erff;using ::erfcf;
#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::expm1f;using ::exp2f;
#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::hypotf;using ::ilogbf;using ::lgammaf;
#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log1pf;using ::log2f;using ::logbf;
#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::llrintf;using ::lrintf;using ::nearbyintf;
#line 701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::rintf;using ::llroundf;using ::lroundf;
#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fdimf;using ::fmaf;using ::fmaxf;using ::fminf;
#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::roundf;using ::truncf;
#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::remainderf;using ::remquof;
#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::copysignf;using ::nanf;
#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nextafterf;using ::scalbnf;using ::scalblnf;
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nexttowardf;using ::tgammaf;
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::acoshl;using ::asinhl;using ::atanhl;
#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::cbrtl;using ::erfl;using ::erfcl;
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::expm1l;using ::exp2l;
#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::hypotl;using ::ilogbl;using ::lgammal;
#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::log1pl;using ::log2l;using ::logbl;
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::llrintl;using ::lrintl;using ::nearbyintl;
#line 715 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::rintl;using ::llroundl;using ::lroundl;
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fdiml;using ::fmal;using ::fmaxl;using ::fminl;
#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::roundl;using ::truncl;
#line 718 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::remainderl;using ::remquol;
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::copysignl;using ::nanl;
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nextafterl;using ::scalbnl;using ::scalblnl;
#line 721 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::nexttowardl;using ::tgammal;
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::fpclassify;using ::signbit;
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::isfinite;using ::isinf;
#line 725 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::isnan;using ::isnormal;
#line 726 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::isgreater;using ::isgreaterequal;
#line 727 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::isless;using ::islessequal;
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
using ::islessgreater;using ::isunordered;
#line 729 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
}
#line 9034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl _hypot(double x, double y); 
#line 9035 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) float __cdecl _hypotf(float x, float y); 
#line 9045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline bool signbit(long double) throw(); 
#line 9046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) int _ldsign(long double); 
#line 9089 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline bool signbit(double) throw(); 
#line 9090 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) int _dsign(double); 
#line 9134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline bool signbit(float) throw(); 
#line 9135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) int _fdsign(float); 
#line 9143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isinf(long double a); 
#line 9178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isinf(double a); 
#line 9216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isinf(float a); 
#line 9223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isnan(long double a); 
#line 9256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isnan(double a); 
#line 9292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isnan(float a); 
#line 9299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isfinite(long double a); 
#line 9336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isfinite(double a); 
#line 9372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static __inline bool isfinite(float a); 
#line 9380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
template< class T> extern T _Pow_int(T, int) throw(); 
#line 9381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 abs(__int64) throw(); 
#line 9452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline long __cdecl abs(long) throw(); 
#line 9456 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl abs(float) throw(); 
#line 9457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline double __cdecl abs(double) throw(); 
#line 9458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fabs(float) throw(); 
#line 9459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl ceil(float) throw(); 
#line 9460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl floor(float) throw(); 
#line 9461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl sqrt(float) throw(); 
#line 9462 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl pow(float, float) throw(); 
#line 9487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl pow(float, int) throw(); 
#line 9488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline double __cdecl pow(double, int) throw(); 
#line 9491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl log(float) throw(); 
#line 9492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl log10(float) throw(); 
#line 9493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fmod(float, float) throw(); 
#line 9494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl modf(float, float *) throw(); 
#line 9495 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl exp(float) throw(); 
#line 9496 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl frexp(float, int *) throw(); 
#line 9497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl ldexp(float, int) throw(); 
#line 9498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl asin(float) throw(); 
#line 9499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl sin(float) throw(); 
#line 9500 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl sinh(float) throw(); 
#line 9501 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl acos(float) throw(); 
#line 9502 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl cos(float) throw(); 
#line 9503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl cosh(float) throw(); 
#line 9504 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl atan(float) throw(); 
#line 9505 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl atan2(float, float) throw(); 
#line 9506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl tan(float) throw(); 
#line 9507 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl tanh(float) throw(); 
#line 9681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl logb(float) throw(); 
#line 9682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline int __cdecl ilogb(float) throw(); 
#line 9683 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float __cdecl scalbn(float, float) throw(); 
#line 9684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl scalbln(float, long) throw(); 
#line 9685 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl exp2(float) throw(); 
#line 9686 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl expm1(float) throw(); 
#line 9687 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl log2(float) throw(); 
#line 9688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl log1p(float) throw(); 
#line 9689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl acosh(float) throw(); 
#line 9690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl asinh(float) throw(); 
#line 9691 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl atanh(float) throw(); 
#line 9692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl hypot(float, float) throw(); 
#line 9693 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float __cdecl norm3d(float, float, float) throw(); 
#line 9694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern float __cdecl norm4d(float, float, float, float) throw(); 
#line 9695 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl cbrt(float) throw(); 
#line 9696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl erf(float) throw(); 
#line 9697 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl erfc(float) throw(); 
#line 9698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl lgamma(float) throw(); 
#line 9699 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl tgamma(float) throw(); 
#line 9700 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl copysign(float, float) throw(); 
#line 9701 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl nextafter(float, float) throw(); 
#line 9702 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl remainder(float, float) throw(); 
#line 9703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl remquo(float, float, int *) throw(); 
#line 9704 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl round(float) throw(); 
#line 9705 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline long __cdecl lround(float) throw(); 
#line 9706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 __cdecl llround(float) throw(); 
#line 9707 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl trunc(float) throw(); 
#line 9708 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl rint(float) throw(); 
#line 9709 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline long __cdecl lrint(float) throw(); 
#line 9710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline __int64 __cdecl llrint(float) throw(); 
#line 9711 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl nearbyint(float) throw(); 
#line 9712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fdim(float, float) throw(); 
#line 9713 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fma(float, float, float) throw(); 
#line 9714 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fmax(float, float) throw(); 
#line 9715 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
extern inline float __cdecl fmin(float, float) throw(); 
#line 9718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float exp10(float a); 
#line 9720 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float rsqrt(float a); 
#line 9722 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float rcbrt(float a); 
#line 9724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float sinpi(float a); 
#line 9726 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float cospi(float a); 
#line 9728 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline void sincospi(float a, float * sptr, float * cptr); 
#line 9730 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline void sincos(float a, float * sptr, float * cptr); 
#line 9732 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float j0(float a); 
#line 9734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float j1(float a); 
#line 9736 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float jn(int n, float a); 
#line 9738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float y0(float a); 
#line 9740 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float y1(float a); 
#line 9742 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float yn(int n, float a); 
#line 9744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float cyl_bessel_i0(float a); 
#line 9746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float cyl_bessel_i1(float a); 
#line 9748 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float erfinv(float a); 
#line 9750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float erfcinv(float a); 
#line 9752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float normcdfinv(float a); 
#line 9754 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float normcdf(float a); 
#line 9756 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float erfcx(float a); 
#line 9758 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double copysign(double a, float b); 
#line 9760 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float copysign(float a, double b); 
#line 9762 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned min(unsigned a, unsigned b); 
#line 9764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned min(int a, unsigned b); 
#line 9766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned min(unsigned a, int b); 
#line 9768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline long min(long a, long b); 
#line 9770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long min(unsigned long a, unsigned long b); 
#line 9772 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long min(long a, unsigned long b); 
#line 9774 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long min(unsigned long a, long b); 
#line 9776 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline __int64 min(__int64 a, __int64 b); 
#line 9778 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 min(unsigned __int64 a, unsigned __int64 b); 
#line 9780 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 min(__int64 a, unsigned __int64 b); 
#line 9782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 min(unsigned __int64 a, __int64 b); 
#line 9784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float min(float a, float b); 
#line 9786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double min(double a, double b); 
#line 9788 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double min(float a, double b); 
#line 9790 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double min(double a, float b); 
#line 9792 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned max(unsigned a, unsigned b); 
#line 9794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned max(int a, unsigned b); 
#line 9796 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned max(unsigned a, int b); 
#line 9798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline long max(long a, long b); 
#line 9800 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long max(unsigned long a, unsigned long b); 
#line 9802 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long max(long a, unsigned long b); 
#line 9804 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned long max(unsigned long a, long b); 
#line 9806 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline __int64 max(__int64 a, __int64 b); 
#line 9808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 max(unsigned __int64 a, unsigned __int64 b); 
#line 9810 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 max(__int64 a, unsigned __int64 b); 
#line 9812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline unsigned __int64 max(unsigned __int64 a, __int64 b); 
#line 9814 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline float max(float a, float b); 
#line 9816 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double max(double a, double b); 
#line 9818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double max(float a, double b); 
#line 9820 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"
static inline double max(double a, float b); 
#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isinf(long double a) 
#line 355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isinf< long double> (a); 
#line 361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isinf(double a) 
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isinf< double> (a); 
#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isinf(float a) 
#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isinf< float> (a); 
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isnan(long double a) 
#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isnan< long double> (a); 
#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isnan(double a) 
#line 419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isnan< double> (a); 
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 434 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isnan(float a) 
#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isnan< float> (a); 
#line 441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 450 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isfinite(long double a) 
#line 451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 455 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isfinite< long double> (a); 
#line 457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isfinite(double a) 
#line 467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 471 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isfinite< double> (a); 
#line 473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static __inline bool isfinite(float a) 
#line 483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return isfinite< float> (a); 
#line 489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float exp10(float a) 
#line 682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 683 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return exp10f(a); 
#line 684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 686 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float rsqrt(float a) 
#line 687 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return rsqrtf(a); 
#line 689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 691 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float rcbrt(float a) 
#line 692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 693 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return rcbrtf(a); 
#line 694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float sinpi(float a) 
#line 697 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return sinpif(a); 
#line 699 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 701 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float cospi(float a) 
#line 702 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return cospif(a); 
#line 704 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline void sincospi(float a, float *sptr, float *cptr) 
#line 707 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 708 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
sincospif(a, sptr, cptr); 
#line 709 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 711 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline void sincos(float a, float *sptr, float *cptr) 
#line 712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 713 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
sincosf(a, sptr, cptr); 
#line 714 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float j0(float a) 
#line 717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return j0f(a); 
#line 719 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 721 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float j1(float a) 
#line 722 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return j1f(a); 
#line 724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 726 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float jn(int n, float a) 
#line 727 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 728 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return jnf(n, a); 
#line 729 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 731 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float y0(float a) 
#line 732 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 733 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return y0f(a); 
#line 734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 736 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float y1(float a) 
#line 737 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return y1f(a); 
#line 739 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 741 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float yn(int n, float a) 
#line 742 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 743 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ynf(n, a); 
#line 744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float cyl_bessel_i0(float a) 
#line 747 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 748 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return cyl_bessel_i0f(a); 
#line 749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 751 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float cyl_bessel_i1(float a) 
#line 752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 753 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return cyl_bessel_i1f(a); 
#line 754 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 756 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float erfinv(float a) 
#line 757 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 758 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return erfinvf(a); 
#line 759 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 761 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float erfcinv(float a) 
#line 762 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 763 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return erfcinvf(a); 
#line 764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float normcdfinv(float a) 
#line 767 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return normcdfinvf(a); 
#line 769 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 771 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float normcdf(float a) 
#line 772 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 773 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return normcdff(a); 
#line 774 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 776 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float erfcx(float a) 
#line 777 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 778 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return erfcxf(a); 
#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 781 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double copysign(double a, float b) 
#line 782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return copysign(a, (double)b); 
#line 784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float copysign(float a, double b) 
#line 787 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 788 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return copysignf(a, (float)b); 
#line 789 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned min(unsigned a, unsigned b) 
#line 792 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 793 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umin(a, b); 
#line 794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 796 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned min(int a, unsigned b) 
#line 797 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umin((unsigned)a, b); 
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 801 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned min(unsigned a, int b) 
#line 802 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 803 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umin(a, (unsigned)b); 
#line 804 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 806 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline long min(long a, long b) 
#line 807 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 810 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 813 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 815 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 817 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (long)min((int)a, (int)b); 
#line 818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 819 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (long)llmin((__int64)a, (__int64)b); 
#line 820 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 823 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long min(unsigned long a, unsigned long b) 
#line 824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 826 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 830 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 832 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 833 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 835 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 838 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long min(long a, unsigned long b) 
#line 839 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 841 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 843 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 845 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 849 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 850 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 853 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long min(unsigned long a, long b) 
#line 854 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 856 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 858 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 860 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umin((unsigned)a, (unsigned)b); 
#line 863 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 864 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmin((unsigned __int64)a, (unsigned __int64)b); 
#line 865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 866 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 868 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline __int64 min(__int64 a, __int64 b) 
#line 869 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 870 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return llmin(a, b); 
#line 871 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 min(unsigned __int64 a, unsigned __int64 b) 
#line 874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 875 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmin(a, b); 
#line 876 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 878 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 min(__int64 a, unsigned __int64 b) 
#line 879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 880 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmin((unsigned __int64)a, b); 
#line 881 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 883 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 min(unsigned __int64 a, __int64 b) 
#line 884 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 885 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmin(a, (unsigned __int64)b); 
#line 886 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 888 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float min(float a, float b) 
#line 889 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 890 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fminf(a, b); 
#line 891 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 893 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double min(double a, double b) 
#line 894 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 895 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmin(a, b); 
#line 896 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 898 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double min(float a, double b) 
#line 899 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 900 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmin((double)a, b); 
#line 901 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 903 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double min(double a, float b) 
#line 904 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 905 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmin(a, (double)b); 
#line 906 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 908 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned max(unsigned a, unsigned b) 
#line 909 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 910 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umax(a, b); 
#line 911 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 913 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned max(int a, unsigned b) 
#line 914 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 915 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umax((unsigned)a, b); 
#line 916 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 918 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned max(unsigned a, int b) 
#line 919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return umax(a, (unsigned)b); 
#line 921 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 923 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline long max(long a, long b) 
#line 924 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 927 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 929 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (long)max((int)a, (int)b); 
#line 934 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 935 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (long)llmax((__int64)a, (__int64)b); 
#line 936 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 937 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 939 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long max(unsigned long a, unsigned long b) 
#line 940 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 944 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 946 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 949 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 951 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 952 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 954 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long max(long a, unsigned long b) 
#line 955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 959 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 961 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 963 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 965 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 966 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 967 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned long max(unsigned long a, long b) 
#line 970 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 972 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (disable: 4127)
#line 974 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 976 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning (default: 4127)
#line 978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)umax((unsigned)a, (unsigned)b); 
#line 979 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} else { 
#line 980 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (unsigned long)ullmax((unsigned __int64)a, (unsigned __int64)b); 
#line 981 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
}  
#line 982 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline __int64 max(__int64 a, __int64 b) 
#line 985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return llmax(a, b); 
#line 987 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 989 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 max(unsigned __int64 a, unsigned __int64 b) 
#line 990 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 991 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmax(a, b); 
#line 992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 994 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 max(__int64 a, unsigned __int64 b) 
#line 995 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmax((unsigned __int64)a, b); 
#line 997 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 max(unsigned __int64 a, __int64 b) 
#line 1000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return ullmax(a, (unsigned __int64)b); 
#line 1002 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1004 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline float max(float a, float b) 
#line 1005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1006 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmaxf(a, b); 
#line 1007 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1009 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double max(double a, double b) 
#line 1010 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1011 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmax(a, b); 
#line 1012 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1014 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double max(float a, double b) 
#line 1015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmax((double)a, b); 
#line 1017 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline double max(double a, float b) 
#line 1020 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1021 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return fmax(a, (double)b); 
#line 1022 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1028 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning(disable : 4211)
#line 1033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline int min(int a, int b) 
#line 1034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1035 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1036 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1038 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned umin(unsigned a, unsigned b) 
#line 1039 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1040 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1041 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1043 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline __int64 llmin(__int64 a, __int64 b) 
#line 1044 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1048 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 ullmin(unsigned __int64 a, unsigned __int64 
#line 1049 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
b) 
#line 1050 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1051 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a < b) ? a : b; 
#line 1052 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1054 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline int max(int a, int b) 
#line 1055 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1056 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1057 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1059 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned umax(unsigned a, unsigned b) 
#line 1060 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1061 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1062 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1064 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline __int64 llmax(__int64 a, __int64 b) 
#line 1065 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1066 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1067 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
static inline unsigned __int64 ullmax(unsigned __int64 a, unsigned __int64 
#line 1070 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
b) 
#line 1071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
{ 
#line 1072 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
return (a > b) ? a : b; 
#line 1073 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
} 
#line 1076 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#pragma warning(default: 4211)
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
template< class T, int dim = 1> 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
struct surface : public surfaceReference { 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
surface() 
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
{ 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
(::surfaceReference::channelDesc) = cudaCreateChannelDesc< T> (); 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
} 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
surface(::cudaChannelFormatDesc desc) 
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
{ 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
(::surfaceReference::channelDesc) = desc; 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
} 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
}; 
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
template< int dim> 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
struct surface< void, dim>  : public surfaceReference { 
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
surface() 
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
{ 
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
(::surfaceReference::channelDesc) = cudaCreateChannelDesc< void> (); 
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
} 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_surface_types.h"
}; 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
struct texture : public textureReference { 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
texture(int norm = 0, ::cudaTextureFilterMode 
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
fMode = cudaFilterModePoint, ::cudaTextureAddressMode 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
aMode = cudaAddressModeClamp) 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
{ 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::normalized) = norm; 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::filterMode) = fMode; 
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[0]) = aMode; 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[1]) = aMode; 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[2]) = aMode; 
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::channelDesc) = cudaCreateChannelDesc< T> (); 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::sRGB) = 0; 
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
} 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
texture(int norm, ::cudaTextureFilterMode 
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
fMode, ::cudaTextureAddressMode 
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
aMode, ::cudaChannelFormatDesc 
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
desc) 
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
{ 
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::normalized) = norm; 
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::filterMode) = fMode; 
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[0]) = aMode; 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[1]) = aMode; 
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
((::textureReference::addressMode)[2]) = aMode; 
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::channelDesc) = desc; 
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
(::textureReference::sRGB) = 0; 
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
} 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_texture_types.h"
}; 
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
extern "C" {
#line 3230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
}
#line 3238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline int mulhi(int a, int b); 
#line 3240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned mulhi(unsigned a, unsigned b); 
#line 3242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned mulhi(int a, unsigned b); 
#line 3244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned mulhi(unsigned a, int b); 
#line 3246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline __int64 mul64hi(__int64 a, __int64 b); 
#line 3248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, unsigned __int64 b); 
#line 3250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned __int64 mul64hi(__int64 a, unsigned __int64 b); 
#line 3252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, __int64 b); 
#line 3254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline int float_as_int(float a); 
#line 3256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float int_as_float(int a); 
#line 3258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned float_as_uint(float a); 
#line 3260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float uint_as_float(unsigned a); 
#line 3262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float saturate(float a); 
#line 3264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline int mul24(int a, int b); 
#line 3266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned umul24(unsigned a, unsigned b); 
#line 3268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __trap() instead.")) static __inline void trap(); 
#line 3271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __brkpt() instead.")) static __inline void brkpt(int c = 0); 
#line 3273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __syncthreads() instead.")) static __inline void syncthreads(); 
#line 3275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __prof_trigger() instead.")) static __inline void prof_trigger(int e); 
#line 3277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
__declspec(deprecated("Please use __threadfence() instead.")) static __inline void threadfence(bool global = true); 
#line 3279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline int float2int(float a, cudaRoundMode mode = cudaRoundZero); 
#line 3281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero); 
#line 3283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 3285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.h"
static __inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int mulhi(int a, int b) 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(unsigned a, unsigned b) 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(int a, unsigned b) 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(unsigned a, int b) 
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline __int64 mul64hi(__int64 a, __int64 b) 
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, unsigned __int64 b) 
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(__int64 a, unsigned __int64 b) 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, __int64 b) 
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int float_as_int(float a) 
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float int_as_float(int a) 
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned float_as_uint(float a) 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float uint_as_float(unsigned a) 
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float saturate(float a) 
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int mul24(int a, int b) 
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned umul24(unsigned a, unsigned b) 
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void trap() 
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void brkpt(int c) 
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)c;
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void syncthreads() 
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void prof_trigger(int e) 
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)e;
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}





































#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline void threadfence(bool global) 
#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)global;
#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline int float2int(float a, cudaRoundMode mode) 
#line 199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline unsigned float2uint(float a, cudaRoundMode mode) 
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float int2float(int a, cudaRoundMode mode) 
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
static __inline float uint2float(unsigned a, cudaRoundMode mode) 
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
::exit(___);}







#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_functions.hpp"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
extern "C" {
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
}
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicAdd(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicExch(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicCAS(unsigned __int64 *address, unsigned __int64 compare, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}



#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
static __inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}



#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_atomic_functions.h"
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
extern "C" {
#line 1134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
}
#line 1143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double fma(double a, double b, double c, cudaRoundMode mode); 
#line 1145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline __int64 double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double ll2double(__int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 1165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 1167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.h"
static __inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double fma(double a, double b, double c, cudaRoundMode mode) 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double dmul(double a, double b, cudaRoundMode mode) 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double dadd(double a, double b, cudaRoundMode mode) 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double dsub(double a, double b, cudaRoundMode mode) 
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline int double2int(double a, cudaRoundMode mode) 
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline unsigned double2uint(double a, cudaRoundMode mode) 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline __int64 double2ll(double a, cudaRoundMode mode) 
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode) 
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double ll2double(__int64 a, cudaRoundMode mode) 
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode) 
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double int2double(int a, cudaRoundMode mode) 
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double uint2double(unsigned a, cudaRoundMode mode) 
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
static __inline double float2double(float a, cudaRoundMode mode) 
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
{int volatile ___ = 1;(void)a;(void)mode;
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
::exit(___);}







#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_double_functions.hpp"
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
static __inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_atomic_functions.h"
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMin(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMax(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMin(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMax(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicAnd(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicOr(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicXor(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_atomic_functions.h"
#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 323 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 343 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 415 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 422 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 428 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 431 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 437 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
#line 436 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_block(unsigned __int64 *address, unsigned __int64 
#line 440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
compare, unsigned __int64 
#line 441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 444 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_system(unsigned __int64 *address, unsigned __int64 
#line 445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
compare, unsigned __int64 
#line 446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}



#line 451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 449 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 455 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 463 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 469 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 470 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 496 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 502 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 500 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 505 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_block(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_system(__int64 *address, __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 511 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 514 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 512 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 517 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_block(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_system(unsigned __int64 *address, unsigned __int64 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}



#line 523 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_60_atomic_functions.h"
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
extern "C" {
#line 1466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
}
#line 1475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1477 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}



#line 1486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 1486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
static __inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 1491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_20_intrinsics.h"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl(__int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl(unsigned __int64 var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_up(__int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_up(unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_down(__int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_down(unsigned __int64 var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_xor(__int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_xor(unsigned __int64 var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}



#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}



#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}



#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_30_intrinsics.h"
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldg(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldg(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcg(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcg(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldca(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldca(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcs(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcs(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}



#line 234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}



#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_32_intrinsics.h"
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 96 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}



#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\sm_61_intrinsics.h"
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dread(T *res, ::surface< void, 1>  surf, int x, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dread(::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dread(T *res, ::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dread(T *res, ::surface< void, 2>  surf, int x, int y, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dread(::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dread(T *res, ::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 287 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 422 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dread(T *res, ::surface< void, 3>  surf, int x, int y, int z, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
#line 433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 436 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dread(::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 437 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 452 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 447 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 448 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dread(T *res, ::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 449 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 453 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredread(T *res, ::surface< void, 241>  surf, int x, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 584 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
#line 593 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 600 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 595 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 596 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredread(::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 597 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 605 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 607 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 608 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredread(T *res, ::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 609 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
#line 613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 620 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 769 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredread(T *res, ::surface< void, 242>  surf, int x, int y, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 781 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredread(::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 793 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredread(T *res, ::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 795 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 806 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapread(T *res, ::surface< void, 12>  surf, int x, int y, int face, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 921 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 937 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapread(::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 934 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 949 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 944 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapread(T *res, ::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 946 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1070 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredread(T *res, ::surface< void, 252>  surf, int x, int y, int layerFace, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1072 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
#line 1081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1088 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1083 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline T 
#line 1084 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredread(::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1085 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1096 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredread(T *res, ::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1097 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dwrite(T val, ::surface< void, 1>  surf, int x, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
#line 1254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1Dwrite(T val, ::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 1262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dwrite(T val, ::surface< void, 2>  surf, int x, int y, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
#line 1399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2Dwrite(T val, ::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 1407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1521 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dwrite(T val, ::surface< void, 3>  surf, int x, int y, int z, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1522 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
#line 1542 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1549 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1544 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1545 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf3Dwrite(T val, ::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1546 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1557 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1666 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 1667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredwrite(T val, ::surface< void, 241>  surf, int x, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1668 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
#line 1688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1695 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1690 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 1691 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf1DLayeredwrite(T val, ::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 1696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1822 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1823 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredwrite(T val, ::surface< void, 242>  surf, int x, int y, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
#line 1844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1846 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surf2DLayeredwrite(T val, ::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1852 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1859 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1958 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1959 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapwrite(T val, ::surface< void, 12>  surf, int x, int y, int face, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
#line 1980 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1987 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 1982 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> __forceinline void 
#line 1983 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapwrite(T val, ::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1988 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 1995 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 2093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2094 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredwrite(T val, ::surface< void, 252>  surf, int x, int y, int layerFace, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
#line 2115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 2122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 2117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
surfCubemapLayeredwrite(T val, ::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
::exit(___);}





#line 2130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_functions.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1Dfetch(texture< T, 1, cudaReadModeElementType> , int) {int volatile ___ = 1;::exit(___);}



#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> 
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
struct __nv_tex_rmnf_ret { }; 
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char>  { typedef float type; }; 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< signed char>  { typedef float type; }; 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< unsigned char>  { typedef float type; }; 
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short>  { typedef float type; }; 
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< unsigned short>  { typedef float type; }; 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char1>  { typedef float1 type; }; 
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar1>  { typedef float1 type; }; 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short1>  { typedef float1 type; }; 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort1>  { typedef float1 type; }; 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char2>  { typedef float2 type; }; 
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar2>  { typedef float2 type; }; 
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short2>  { typedef float2 type; }; 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort2>  { typedef float2 type; }; 
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< char4>  { typedef float4 type; }; 
#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< uchar4>  { typedef float4 type; }; 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< short4>  { typedef float4 type; }; 
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex_rmnf_ret< ushort4>  { typedef float4 type; }; 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1Dfetch(texture< T, 1, cudaReadModeNormalizedFloat> , int) {int volatile ___ = 1;::exit(___);}



#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1D(texture< T, 1, cudaReadModeElementType> , float) {int volatile ___ = 1;::exit(___);}



#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1D(texture< T, 1, cudaReadModeNormalizedFloat> , float) {int volatile ___ = 1;::exit(___);}



#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 345 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2D(texture< T, 2, cudaReadModeElementType> , float, float) {int volatile ___ = 1;::exit(___);}



#line 351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 348 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2D(texture< T, 2, cudaReadModeNormalizedFloat> , float, float) {int volatile ___ = 1;::exit(___);}



#line 354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayered(texture< T, 241, cudaReadModeElementType> , float, int) {int volatile ___ = 1;::exit(___);}



#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayered(texture< T, 241, cudaReadModeNormalizedFloat> , float, int) {int volatile ___ = 1;::exit(___);}



#line 484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 603 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 604 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayered(texture< T, 242, cudaReadModeElementType> , float, float, int) {int volatile ___ = 1;::exit(___);}



#line 609 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 606 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 607 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayered(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int) {int volatile ___ = 1;::exit(___);}



#line 612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 735 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 736 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3D(texture< T, 3, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 741 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 739 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3D(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 864 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemap(texture< T, 12, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 870 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 868 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemap(texture< T, 12, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 993 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLayered(texture< T, 252, cudaReadModeElementType> , float, float, float, int) {int volatile ___ = 1;::exit(___);}



#line 998 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 995 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLayered(texture< T, 252, cudaReadModeNormalizedFloat> , float, float, float, int) {int volatile ___ = 1;::exit(___);}



#line 1001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> 
#line 1122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
struct __nv_tex2dgather_ret { }; 
#line 1123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char>  { typedef char4 type; }; 
#line 1124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< signed char>  { typedef char4 type; }; 
#line 1125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char1>  { typedef char4 type; }; 
#line 1126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char2>  { typedef char4 type; }; 
#line 1127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char3>  { typedef char4 type; }; 
#line 1128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< char4>  { typedef char4 type; }; 
#line 1129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned char>  { typedef uchar4 type; }; 
#line 1130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar1>  { typedef uchar4 type; }; 
#line 1131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar2>  { typedef uchar4 type; }; 
#line 1132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar3>  { typedef uchar4 type; }; 
#line 1133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uchar4>  { typedef uchar4 type; }; 
#line 1135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short>  { typedef short4 type; }; 
#line 1136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short1>  { typedef short4 type; }; 
#line 1137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short2>  { typedef short4 type; }; 
#line 1138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short3>  { typedef short4 type; }; 
#line 1139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< short4>  { typedef short4 type; }; 
#line 1140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned short>  { typedef ushort4 type; }; 
#line 1141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort1>  { typedef ushort4 type; }; 
#line 1142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort2>  { typedef ushort4 type; }; 
#line 1143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort3>  { typedef ushort4 type; }; 
#line 1144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< ushort4>  { typedef ushort4 type; }; 
#line 1146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int>  { typedef int4 type; }; 
#line 1147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int1>  { typedef int4 type; }; 
#line 1148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int2>  { typedef int4 type; }; 
#line 1149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int3>  { typedef int4 type; }; 
#line 1150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< int4>  { typedef int4 type; }; 
#line 1151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< unsigned>  { typedef uint4 type; }; 
#line 1152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint1>  { typedef uint4 type; }; 
#line 1153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint2>  { typedef uint4 type; }; 
#line 1154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint3>  { typedef uint4 type; }; 
#line 1155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< uint4>  { typedef uint4 type; }; 
#line 1157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float>  { typedef float4 type; }; 
#line 1158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float1>  { typedef float4 type; }; 
#line 1159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float2>  { typedef float4 type; }; 
#line 1160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float3>  { typedef float4 type; }; 
#line 1161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template<> struct __nv_tex2dgather_ret< float4>  { typedef float4 type; }; 
#line 1163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex2dgather_ret< T> ::type 
#line 1164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2Dgather(texture< T, 2, cudaReadModeElementType> , float, float, int = 0) {int volatile ___ = 1;::exit(___);}



#line 1169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static ::float4 
#line 1167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2Dgather(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, int = 0) {int volatile ___ = 1;::exit(___);}



#line 1172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLod(texture< T, 1, cudaReadModeElementType> , float, float) {int volatile ___ = 1;::exit(___);}



#line 1238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLod(texture< T, 1, cudaReadModeNormalizedFloat> , float, float) {int volatile ___ = 1;::exit(___);}



#line 1241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLod(texture< T, 2, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLod(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayeredLod(texture< T, 241, cudaReadModeElementType> , float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayeredLod(texture< T, 241, cudaReadModeNormalizedFloat> , float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayeredLod(texture< T, 242, cudaReadModeElementType> , float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1618 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1615 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1616 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayeredLod(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1621 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1740 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1741 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3DLod(texture< T, 3, cudaReadModeElementType> , float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1743 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3DLod(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1868 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1869 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLod(texture< T, 12, cudaReadModeElementType> , float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1871 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 1872 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLod(texture< T, 12, cudaReadModeNormalizedFloat> , float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1877 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 1997 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLayeredLod(texture< T, 252, cudaReadModeElementType> , float, float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 2002 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 1999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
texCubemapLayeredLod(texture< T, 252, cudaReadModeNormalizedFloat> , float, float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 2005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DGrad(texture< T, 1, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 2130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DGrad(texture< T, 1, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}



#line 2133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DGrad(texture< T, 2, cudaReadModeElementType> , float, float, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 2258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DGrad(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 2261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayeredGrad(texture< T, 241, cudaReadModeElementType> , float, int, float, float) {int volatile ___ = 1;::exit(___);}



#line 2386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex1DLayeredGrad(texture< T, 241, cudaReadModeNormalizedFloat> , float, int, float, float) {int volatile ___ = 1;::exit(___);}



#line 2389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2510 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayeredGrad(texture< T, 242, cudaReadModeElementType> , float, float, int, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 2515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2512 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex2DLayeredGrad(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 2518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2637 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static T 
#line 2638 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3DGrad(texture< T, 3, cudaReadModeElementType> , float, float, float, ::float4, ::float4) {int volatile ___ = 1;::exit(___);}



#line 2643 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 2640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
template< class T> static typename __nv_tex_rmnf_ret< T> ::type 
#line 2641 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
tex3DGrad(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float, ::float4, ::float4) {int volatile ___ = 1;::exit(___);}



#line 2646 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_fetch_functions.h"
#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1Dfetch(T *, ::cudaTextureObject_t, int) {int volatile ___ = 1;::exit(___);}



#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1Dfetch(::cudaTextureObject_t texObject, int x) 
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1D(T *, ::cudaTextureObject_t, float) {int volatile ___ = 1;::exit(___);}



#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1D(::cudaTextureObject_t texObject, float x) 
#line 192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;
#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2D(T *, ::cudaTextureObject_t, float, float) {int volatile ___ = 1;::exit(___);}



#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2D(::cudaTextureObject_t texObject, float x, float y) 
#line 260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
#line 264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3D(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3D(::cudaTextureObject_t texObject, float x, float y, float z) 
#line 327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
#line 331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayered(T *, ::cudaTextureObject_t, float, int) {int volatile ___ = 1;::exit(___);}



#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayered(::cudaTextureObject_t texObject, float x, int layer) 
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
#line 399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayered(T *, ::cudaTextureObject_t, float, float, int) {int volatile ___ = 1;::exit(___);}



#line 414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 462 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayered(::cudaTextureObject_t texObject, float x, float y, int layer) 
#line 463 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
#line 467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 477 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemap(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemap(::cudaTextureObject_t texObject, float x, float y, float z) 
#line 531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
#line 535 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 548 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 544 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 545 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLayered(T *, ::cudaTextureObject_t, float, float, float, int) {int volatile ___ = 1;::exit(___);}



#line 550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 598 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 599 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLayered(::cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 600 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 604 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 617 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2Dgather(T *, ::cudaTextureObject_t, float, float, int = 0) {int volatile ___ = 1;::exit(___);}



#line 619 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 661 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2Dgather(::cudaTextureObject_t to, float x, float y, int comp = 0) 
#line 662 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
#line 666 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 679 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 676 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLod(T *, ::cudaTextureObject_t, float, float) {int volatile ___ = 1;::exit(___);}



#line 681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 728 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 729 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLod(::cudaTextureObject_t texObject, float x, float level) 
#line 730 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
#line 734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 747 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 743 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLod(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 797 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLod(::cudaTextureObject_t texObject, float x, float y, float level) 
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
#line 803 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 816 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 813 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3DLod(T *, ::cudaTextureObject_t, float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 866 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3DLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 871 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 884 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 880 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayeredLod(T *, ::cudaTextureObject_t, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 885 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayeredLod(::cudaTextureObject_t texObject, float x, int layer, float level) 
#line 934 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
#line 938 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 951 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 947 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayeredLod(T *, ::cudaTextureObject_t, float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 953 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayeredLod(::cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 1002 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 1006 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1014 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLod(T *, ::cudaTextureObject_t, float, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1020 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1067 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1068 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 1069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 1073 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1086 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1082 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLayeredLod(T *, ::cudaTextureObject_t, float, float, float, int, float) {int volatile ___ = 1;::exit(___);}



#line 1087 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
texCubemapLayeredLod(::cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 1136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 1140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DGrad(T *, ::cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}



#line 1154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DGrad(::cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 1204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 1208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DGrad(T *, ::cudaTextureObject_t, float, float, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 1222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DGrad(::cudaTextureObject_t texObject, float x, float y, ::float2 dPdx, ::float2 dPdy) 
#line 1271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 1275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3DGrad(T *, ::cudaTextureObject_t, float, float, float, ::float4, ::float4) {int volatile ___ = 1;::exit(___);}



#line 1289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex3DGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) 
#line 1338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 1342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayeredGrad(T *, ::cudaTextureObject_t, float, int, float, float) {int volatile ___ = 1;::exit(___);}



#line 1356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex1DLayeredGrad(::cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 1406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 1410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static void 
#line 1419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayeredGrad(T *, ::cudaTextureObject_t, float, float, int, ::float2, ::float2) {int volatile ___ = 1;::exit(___);}



#line 1424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 1471 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 1472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
tex2DLayeredGrad(::cudaTextureObject_t texObject, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) 
#line 1473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 1477 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
::exit(___);}











#line 1490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_indirect_functions.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 69 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1Dread(T *, ::cudaSurfaceObject_t, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1Dread(::cudaSurfaceObject_t surfObject, int x, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2Dread(T *, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2Dread(::cudaSurfaceObject_t surfObject, int x, int y, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf3Dread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf3Dread(::cudaSurfaceObject_t surfObject, int x, int y, int z, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1DLayeredread(T *, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1DLayeredread(::cudaSurfaceObject_t surfObject, int x, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2DLayeredread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 348 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2DLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapread(::cudaSurfaceObject_t surfObject, int x, int y, int face, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 422 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapLayeredread(T *, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 428 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 465 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layerface, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
#line 472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
::exit(___);}





#line 479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1Dwrite(T, ::cudaSurfaceObject_t, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2Dwrite(T, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 534 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 576 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 577 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf3Dwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 626 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 627 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf1DLayeredwrite(T, ::cudaSurfaceObject_t, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 632 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 676 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surf2DLayeredwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 729 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 771 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
template< class T> static void 
#line 772 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
surfCubemapLayeredwrite(T, ::cudaSurfaceObject_t, int, int, int, ::cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}



#line 777 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_indirect_functions.h"
#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern "C" {
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const uint3 __device_builtin_variable_threadIdx; 
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const uint3 __device_builtin_variable_blockIdx; 
#line 73 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const dim3 __device_builtin_variable_blockDim; 
#line 74 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const dim3 __device_builtin_variable_gridDim; 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
extern const int __device_builtin_variable_warpSize; 
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_launch_parameters.h"
}
#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaLaunchKernel(const T *
#line 185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::dim3 
#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
gridDim, ::dim3 
#line 187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockDim, void **
#line 188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
args, ::size_t 
#line 189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
sharedMem = 0, ::cudaStream_t 
#line 190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
stream = 0) 
#line 192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
#line 194 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 221 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaSetupArgument(T 
#line 223 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
arg, ::size_t 
#line 224 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset) 
#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 227 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaSetupArgument((const void *)(&arg), sizeof(T), offset); 
#line 228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 260 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
static __inline cudaError_t cudaEventCreate(cudaEvent_t *
#line 261 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
event, unsigned 
#line 262 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 265 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaEventCreateWithFlags(event, flags); 
#line 266 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 323 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
static __inline cudaError_t cudaMallocHost(void **
#line 324 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
ptr, size_t 
#line 325 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, unsigned 
#line 326 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 328 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 329 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaHostAlloc(ptr, size, flags); 
#line 330 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 332 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 333 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaHostAlloc(T **
#line 334 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
ptr, ::size_t 
#line 335 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, unsigned 
#line 336 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 338 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 339 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
#line 340 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 342 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 343 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaHostGetDevicePointer(T **
#line 344 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pDevice, void *
#line 345 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pHost, unsigned 
#line 346 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 348 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 349 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
#line 350 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 449 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 450 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMallocManaged(T **
#line 451 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 452 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, unsigned 
#line 453 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 1) 
#line 455 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 456 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
#line 457 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 528 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaStreamAttachMemAsync(::cudaStream_t 
#line 530 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
stream, T *
#line 531 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 532 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
length = 0, unsigned 
#line 533 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 4) 
#line 535 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 536 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
#line 537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 539 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 540 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMalloc(T **
#line 541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 542 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size) 
#line 544 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMalloc((void **)((void *)devPtr), size); 
#line 546 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 548 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 549 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMallocHost(T **
#line 550 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
ptr, ::size_t 
#line 551 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, unsigned 
#line 552 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 0) 
#line 554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 555 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaMallocHost((void **)((void *)ptr), size, flags); 
#line 556 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 558 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 559 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMallocPitch(T **
#line 560 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t *
#line 561 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pitch, ::size_t 
#line 562 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
width, ::size_t 
#line 563 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
height) 
#line 565 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 566 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
#line 567 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 604 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 605 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMemcpyToSymbol(const T &
#line 606 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol, const void *
#line 607 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
src, ::size_t 
#line 608 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
count, ::size_t 
#line 609 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 610 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
kind = cudaMemcpyHostToDevice) 
#line 612 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 613 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
#line 614 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 656 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 657 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMemcpyToSymbolAsync(const T &
#line 658 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol, const void *
#line 659 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
src, ::size_t 
#line 660 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
count, ::size_t 
#line 661 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 662 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
kind = cudaMemcpyHostToDevice, ::cudaStream_t 
#line 663 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
stream = 0) 
#line 665 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 666 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
#line 667 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 702 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 703 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMemcpyFromSymbol(void *
#line 704 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dst, const T &
#line 705 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol, ::size_t 
#line 706 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
count, ::size_t 
#line 707 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 708 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
kind = cudaMemcpyDeviceToHost) 
#line 710 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 711 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
#line 712 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 754 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 755 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaMemcpyFromSymbolAsync(void *
#line 756 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dst, const T &
#line 757 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol, ::size_t 
#line 758 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
count, ::size_t 
#line 759 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset = 0, ::cudaMemcpyKind 
#line 760 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
kind = cudaMemcpyDeviceToHost, ::cudaStream_t 
#line 761 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
stream = 0) 
#line 763 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 764 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
#line 765 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 787 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 788 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaGetSymbolAddress(void **
#line 789 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, const T &
#line 790 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol) 
#line 792 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 793 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
#line 794 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 816 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 817 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaGetSymbolSize(::size_t *
#line 818 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size, const T &
#line 819 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
symbol) 
#line 821 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 822 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
#line 823 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 859 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 860 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTexture(::size_t *
#line 861 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 862 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, const void *
#line 863 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, const ::cudaChannelFormatDesc &
#line 864 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc, ::size_t 
#line 865 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size = 4294967295U) 
#line 867 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 868 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTexture(offset, &tex, devPtr, &desc, size); 
#line 869 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 904 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 905 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTexture(::size_t *
#line 906 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 907 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, const void *
#line 908 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 909 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size = 4294967295U) 
#line 911 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 912 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
#line 913 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 960 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 961 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTexture2D(::size_t *
#line 962 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 963 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, const void *
#line 964 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, const ::cudaChannelFormatDesc &
#line 965 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc, ::size_t 
#line 966 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
width, ::size_t 
#line 967 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
height, ::size_t 
#line 968 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pitch) 
#line 970 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 971 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
#line 972 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1018 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1019 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTexture2D(::size_t *
#line 1020 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 1021 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, const void *
#line 1022 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
devPtr, ::size_t 
#line 1023 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
width, ::size_t 
#line 1024 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
height, ::size_t 
#line 1025 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
pitch) 
#line 1027 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1028 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTexture2D(offset, &tex, devPtr, &(tex.channelDesc), width, height, pitch); 
#line 1029 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1060 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1061 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode>  &
#line 1062 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, ::cudaArray_const_t 
#line 1063 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
array, const ::cudaChannelFormatDesc &
#line 1064 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc) 
#line 1066 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1067 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTextureToArray(&tex, array, &desc); 
#line 1068 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1098 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1099 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode>  &
#line 1100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, ::cudaArray_const_t 
#line 1101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
array) 
#line 1103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaChannelFormatDesc desc; 
#line 1105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
#line 1107 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
#line 1108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1139 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1140 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
#line 1141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, ::cudaMipmappedArray_const_t 
#line 1142 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
mipmappedArray, const ::cudaChannelFormatDesc &
#line 1143 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc) 
#line 1145 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc); 
#line 1147 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
#line 1179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex, ::cudaMipmappedArray_const_t 
#line 1180 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
mipmappedArray) 
#line 1182 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaChannelFormatDesc desc; 
#line 1184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaArray_t levelArray; 
#line 1185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0); 
#line 1187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (err != (cudaSuccess)) { 
#line 1188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return err; 
#line 1189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
err = ::cudaGetChannelDesc(&desc, levelArray); 
#line 1192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err; 
#line 1193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1216 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1217 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaUnbindTexture(const texture< T, dim, readMode>  &
#line 1218 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex) 
#line 1220 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1221 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaUnbindTexture(&tex); 
#line 1222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1250 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1251 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaGetTextureAlignmentOffset(::size_t *
#line 1252 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
offset, const texture< T, dim, readMode>  &
#line 1253 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
tex) 
#line 1255 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1256 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaGetTextureAlignmentOffset(offset, &tex); 
#line 1257 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1302 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1303 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaFuncSetCacheConfig(T *
#line 1304 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::cudaFuncCache 
#line 1305 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cacheConfig) 
#line 1307 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1308 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
#line 1309 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1311 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1312 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaFuncSetSharedMemConfig(T *
#line 1313 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::cudaSharedMemConfig 
#line 1314 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
config) 
#line 1316 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1317 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
#line 1318 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1347 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1348 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
#line 1349 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
numBlocks, T 
#line 1350 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, int 
#line 1351 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, ::size_t 
#line 1352 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize) 
#line 1353 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1354 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
#line 1355 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1398 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1399 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
#line 1400 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
numBlocks, T 
#line 1401 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, int 
#line 1402 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, ::size_t 
#line 1403 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize, unsigned 
#line 1404 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags) 
#line 1405 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1406 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
#line 1407 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1412 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
class __cudaOccupancyB2DHelper { 
#line 1413 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size_t n; 
#line 1415 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
#line 1416 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
size_t operator()(int) 
#line 1417 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1418 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return n; 
#line 1419 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1420 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}; 
#line 1467 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1468 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
#line 1469 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
minGridSize, int *
#line 1470 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, T 
#line 1471 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, UnaryFunction 
#line 1472 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeToDynamicSMemSize, int 
#line 1473 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = 0, unsigned 
#line 1474 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 0) 
#line 1475 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1476 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaError_t status; 
#line 1479 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int device; 
#line 1480 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaFuncAttributes attr; 
#line 1483 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int maxThreadsPerMultiProcessor; 
#line 1484 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int warpSize; 
#line 1485 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int devMaxThreadsPerBlock; 
#line 1486 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int multiProcessorCount; 
#line 1487 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int funcMaxThreadsPerBlock; 
#line 1488 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int occupancyLimit; 
#line 1489 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int granularity; 
#line 1492 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int maxBlockSize = 0; 
#line 1493 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int numBlocks = 0; 
#line 1494 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int maxOccupancy = 0; 
#line 1497 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int blockSizeToTryAligned; 
#line 1498 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int blockSizeToTry; 
#line 1499 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int blockSizeLimitAligned; 
#line 1500 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int occupancyInBlocks; 
#line 1501 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
int occupancyInThreads; 
#line 1502 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::size_t dynamicSMemSize; 
#line 1508 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (((!minGridSize) || (!blockSize)) || (!func)) { 
#line 1509 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaErrorInvalidValue; 
#line 1510 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1516 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = ::cudaGetDevice(&device); 
#line 1517 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1518 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1519 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1521 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
#line 1525 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1526 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1527 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
#line 1533 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1534 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1535 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
#line 1541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1542 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1543 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
#line 1549 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1550 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1551 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1553 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaFuncGetAttributes(&attr, func); 
#line 1554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1555 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1556 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1558 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
#line 1564 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
occupancyLimit = maxThreadsPerMultiProcessor; 
#line 1565 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
granularity = warpSize; 
#line 1567 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (blockSizeLimit == 0) { 
#line 1568 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1569 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1571 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (devMaxThreadsPerBlock < blockSizeLimit) { 
#line 1572 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1573 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1575 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
#line 1576 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = funcMaxThreadsPerBlock; 
#line 1577 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1579 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
#line 1581 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
#line 1585 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (blockSizeLimit < blockSizeToTryAligned) { 
#line 1586 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeToTry = blockSizeLimit; 
#line 1587 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} else { 
#line 1588 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeToTry = blockSizeToTryAligned; 
#line 1589 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1591 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
#line 1593 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
#line 1600 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (status != (cudaSuccess)) { 
#line 1601 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1602 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1604 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
#line 1606 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (occupancyInThreads > maxOccupancy) { 
#line 1607 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
maxBlockSize = blockSizeToTry; 
#line 1608 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
numBlocks = occupancyInBlocks; 
#line 1609 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
maxOccupancy = occupancyInThreads; 
#line 1610 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1614 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
if (occupancyLimit == maxOccupancy) { 
#line 1615 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
break; 
#line 1616 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1617 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
}  
#line 1625 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
(*minGridSize) = (numBlocks * multiProcessorCount); 
#line 1626 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
(*blockSize) = maxBlockSize; 
#line 1628 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return status; 
#line 1629 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1662 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1663 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
#line 1664 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
minGridSize, int *
#line 1665 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, T 
#line 1666 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, UnaryFunction 
#line 1667 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeToDynamicSMemSize, int 
#line 1668 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = 0) 
#line 1669 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1670 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
#line 1671 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1707 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1708 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSize(int *
#line 1709 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
minGridSize, int *
#line 1710 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, T 
#line 1711 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::size_t 
#line 1712 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize = 0, int 
#line 1713 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = 0) 
#line 1714 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1715 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
#line 1716 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1766 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1767 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
#line 1768 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
minGridSize, int *
#line 1769 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSize, T 
#line 1770 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func, ::size_t 
#line 1771 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
dynamicSMemSize = 0, int 
#line 1772 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
blockSizeLimit = 0, unsigned 
#line 1773 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
flags = 0) 
#line 1774 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1775 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
#line 1776 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1814 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1815 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaLaunch(T *
#line 1816 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
func) 
#line 1818 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1819 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaLaunch((const void *)func); 
#line 1820 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1851 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1852 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaFuncGetAttributes(::cudaFuncAttributes *
#line 1853 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
attr, T *
#line 1854 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
entry) 
#line 1856 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1857 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
#line 1858 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1880 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim> static __inline ::cudaError_t 
#line 1881 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindSurfaceToArray(const surface< T, dim>  &
#line 1882 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
surf, ::cudaArray_const_t 
#line 1883 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
array, const ::cudaChannelFormatDesc &
#line 1884 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
desc) 
#line 1886 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1887 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return ::cudaBindSurfaceToArray(&surf, array, &desc); 
#line 1888 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1909 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
template< class T, int dim> static __inline ::cudaError_t 
#line 1910 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
cudaBindSurfaceToArray(const surface< T, dim>  &
#line 1911 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
surf, ::cudaArray_const_t 
#line 1912 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
array) 
#line 1914 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
{ 
#line 1915 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaChannelFormatDesc desc; 
#line 1916 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
::cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
#line 1918 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
#line 1919 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
} 
#line 1933 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
#pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_printf_options() 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
{ 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
static unsigned __int64 _OptionsStorage; 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
return &_OptionsStorage; 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
} 
#line 81 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_scanf_options() 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
{ 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
static unsigned __int64 _OptionsStorage; 
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
return &_OptionsStorage; 
#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
} 
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_stdio_config.h"
}__pragma(pack ( pop )) 
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
typedef 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
struct _iobuf { 
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
void *_Placeholder; 
#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} FILE; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl __acrt_iob_func(unsigned); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl fgetwc(FILE * _Stream); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fgetwchar(); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl fputwc(__wchar_t _Character, FILE * _Stream); 
#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fputwchar(__wchar_t _Character); 
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl getwc(FILE * _Stream); 
#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl getwchar(); 
#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __wchar_t *__cdecl fgetws(__wchar_t * _Buffer, int _BufferCount, FILE * _Stream); 
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl fputws(const __wchar_t * _Buffer, FILE * _Stream); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __wchar_t *__cdecl _getws_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline __wchar_t *__cdecl _getws_s(__wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }
#line 101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl putwc(__wchar_t _Character, FILE * _Stream); 
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl putwchar(__wchar_t _Character); 
#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl _putws(const __wchar_t * _Buffer); 
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl ungetwc(wint_t _Character, FILE * _Stream); 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wfdopen(int _FileHandle, const __wchar_t * _Mode); 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wfopen(const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) errno_t __cdecl _wfopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wfreopen(const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) errno_t __cdecl _wfreopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wfsopen(const __wchar_t * _FileName, const __wchar_t * _Mode, int _ShFlag); 
#line 164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) void __cdecl _wperror(const __wchar_t * _ErrorMessage); 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl _wpopen(const __wchar_t * _Command, const __wchar_t * _Mode); 
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl _wremove(const __wchar_t * _FileName); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wtempnam(const __wchar_t * _Directory, const __wchar_t * _FilePrefix); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) errno_t __cdecl _wtmpnam_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl _wtmpnam_s(__wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __wchar_t *__cdecl _wtmpnam(__wchar_t * _Buffer); 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fgetwc_nolock(FILE * _Stream); 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fputwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _getwc_nolock(FILE * _Stream); 
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _putwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _ungetwc_nolock(wint_t _Character, FILE * _Stream); 
#line 267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_l(FILE *const 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf(FILE *const 
#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_s_l(FILE *const 
#line 324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf_s(FILE *const 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p_l(FILE *const 
#line 357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 360 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p(FILE *const 
#line 372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 374 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_l(const __wchar_t *const 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf(const __wchar_t *const 
#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_s_l(const __wchar_t *const 
#line 413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf_s(const __wchar_t *const 
#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p_l(const __wchar_t *const 
#line 444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p(const __wchar_t *const 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 459 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_l(FILE *const 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 482 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 485 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 489 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf(FILE *const 
#line 490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 500 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_s_l(FILE *const 
#line 508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf_s(FILE *const 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p_l(FILE *const 
#line 549 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 551 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p(FILE *const 
#line 568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 576 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_l(const __wchar_t *const 
#line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf(const __wchar_t *const 
#line 604 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 612 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_s_l(const __wchar_t *const 
#line 621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 628 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf_s(const __wchar_t *const 
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p_l(const __wchar_t *const 
#line 660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 669 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 670 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p(const __wchar_t *const 
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 688 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwscanf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwscanf_l(FILE *const 
#line 710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf(FILE *const 
#line 727 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwscanf_s_l(FILE *const 
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 743 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 744 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vfwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf_s(FILE *const 
#line 760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 762 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_l(const __wchar_t *const 
#line 775 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf(const __wchar_t *const 
#line 789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_s_l(const __wchar_t *const 
#line 802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 810 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf_s(const __wchar_t *const 
#line 818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_l(FILE *const 
#line 833 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 842 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 847 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf(FILE *const 
#line 852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 859 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 864 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_s_l(FILE *const 
#line 870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf_s(FILE *const 
#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Stream, const __wchar_t *const 
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_l(const __wchar_t *const 
#line 911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 912 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf(const __wchar_t *const 
#line 929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_s_l(const __wchar_t *const 
#line 946 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 958 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 965 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf_s(const __wchar_t *const 
#line 966 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 972 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 974 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 978 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswprintf(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1023 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1035 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_l(__wchar_t *const 
#line 1047 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1057 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1061 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1062 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1065 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4793)
#line 1070 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s_l(__wchar_t *const 
#line 1071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vsnwprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s(__wchar_t *const 
#line 1093 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, ...); __inline int __cdecl _vsnwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, va_list _Args); 
#line 1116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf(__wchar_t *
#line 1121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, size_t 
#line 1122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *
#line 1123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl _vsnwprintf_s(__wchar_t (&_Buffer)[_Size], ::size_t _BufferCount, const __wchar_t *_Format, ::va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c_l(__wchar_t *const 
#line 1149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c(__wchar_t *const 
#line 1170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_l(__wchar_t *const 
#line 1186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
} 
#line 1205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __vswprintf_l(__wchar_t *const 
#line 1206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf(__wchar_t *const 
#line 1222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#line 1231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf(__wchar_t *const 
#line 1237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_s_l(__wchar_t *const 
#line 1253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf_s(__wchar_t *const 
#line 1275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1290 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vswprintf_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Format, ::va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p_l(__wchar_t *const 
#line 1301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p(__wchar_t *const 
#line 1322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_l(const __wchar_t *const 
#line 1338 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf(const __wchar_t *const 
#line 1357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vscwprintf_l(_Format, 0, _ArgList); 
#line 1365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p_l(const __wchar_t *const 
#line 1371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
const int _Result = __stdio_common_vswprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p(const __wchar_t *const 
#line 1390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t *const 
#line 1404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1413 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 1416 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_l(__wchar_t *const 
#line 1424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1434 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1444 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t *const 
#line 1445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList); 
#line 1456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1463 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf(__wchar_t *const 
#line 1464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1472 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1476 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1477 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1481 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#line 1484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(disable:4793 4996)
#line 1486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, ...); __inline int __cdecl __vswprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, va_list _Args); 
#line 1495 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t * _Buffer, const __wchar_t * _Format, ...); __inline int __cdecl _vswprintf(__wchar_t * _Buffer, const __wchar_t * _Format, va_list _Args); 
#line 1502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_s_l(__wchar_t *const 
#line 1507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1518 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1521 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1522 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf_s(__wchar_t *const 
#line 1529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1530 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1531 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1538 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1541 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template< size_t _Size> inline int __cdecl swprintf_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const __wchar_t *> (), ((void)(_ArgList = (((::va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)) }
#line 1557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p_l(__wchar_t *const 
#line 1558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1560 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1567 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1568 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1578 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p(__wchar_t *const 
#line 1579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1587 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1589 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c_l(__wchar_t *const 
#line 1599 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1600 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1608 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1610 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1612 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1613 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c(__wchar_t *const 
#line 1620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1628 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_l(__wchar_t *const 
#line 1640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t *
#line 1666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, size_t 
#line 1667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *
#line 1668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1674 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1676 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 1683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s_l(__wchar_t *const 
#line 1691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1703 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1707 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s(__wchar_t *const 
#line 1713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const size_t 
#line 1715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_MaxCount, const __wchar_t *const 
#line 1716 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1725 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1727 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template< size_t _Size> inline int __cdecl _snwprintf_s(__wchar_t (&_Buffer)[_Size], ::size_t _BufferCount, const __wchar_t *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const __wchar_t *> (), ((void)(_ArgList = (((::va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)) }
#line 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_l(const __wchar_t *const 
#line 1741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1748 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_l(_Format, _Locale, _ArgList); 
#line 1752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf(const __wchar_t *const 
#line 1760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1768 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_l(_Format, 0, _ArgList); 
#line 1770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1772 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p_l(const __wchar_t *const 
#line 1778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 1784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1785 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_p_l(_Format, _Locale, _ArgList); 
#line 1789 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1796 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p(const __wchar_t *const 
#line 1797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 1802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4141 4412 4793 4996 6054)
#line 1820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
swprintf(__wchar_t *const 
#line 1821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) throw() 
#line 1824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1827 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#pragma warning(suppress: 28719)
_Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
vswprintf(__wchar_t *const 
#line 1836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1838 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) throw() 
#line 1840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#pragma warning(suppress: 28719)
return vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_swprintf_l(__wchar_t *const 
#line 1847 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) throw() 
#line 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1852 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 1853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 1854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 1858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" 
#line 1860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_vswprintf_l(__wchar_t *const 
#line 1862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1864 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) throw() 
#line 1867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1873 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswscanf(unsigned __int64 _Options, const __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswscanf_l(const __wchar_t *const 
#line 1902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1911 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf(const __wchar_t *
#line 1920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *
#line 1921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 1929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswscanf_s_l(const __wchar_t *const 
#line 1935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1944 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf_s(const __wchar_t *const 
#line 1955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 1956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, va_list 
#line 1957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 1964 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vswscanf_s(__wchar_t (&_Buffer)[_Size], const __wchar_t *_Format, ::va_list _Args) throw() { return vswscanf_s(_Buffer, _Size, _Format, _Args); } }
#line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_l(const __wchar_t *const 
#line 1980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 1981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 1983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 1984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 1998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_s_l(const __wchar_t *const 
#line 1999 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, va_list 
#line 2003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_ArgList) 
#line 2008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2017 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_l(const __wchar_t *const 
#line 2018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, _locale_t 
#line 2020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2032 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf(const __wchar_t *const 
#line 2038 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2039 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2047 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_s_l(const __wchar_t *const 
#line 2057 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2065 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2067 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2069 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2070 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf_s(const __wchar_t *const 
#line 2079 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const __wchar_t *const 
#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2088 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2090 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2099 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_l(const __wchar_t *const 
#line 2100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 2118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf(const __wchar_t *const 
#line 2126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 2143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s_l(const __wchar_t *const 
#line 2151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, const _locale_t 
#line 2154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Locale, ...) 
#line 2159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2162 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2164 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s(const __wchar_t *const 
#line 2172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Buffer, const size_t 
#line 2173 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_BufferCount, const __wchar_t *const 
#line 2174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Format, ...) 
#line 2179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
int _Result; 
#line 2181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
va_list _ArgList; 
#line 2182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(__vcrt_va_start_verify_argument_type< const __wchar_t *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
return _Result; 
#line 2186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
} 
#line 2195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\corecrt_wstdio.h"
}__pragma(pack ( pop )) 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__pragma(pack ( push, 8 )) extern "C" {
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
typedef __int64 fpos_t; 
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(FILE * _Stream, char *** _Base, char *** _Pointer, int ** _Count); 
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl clearerr_s(FILE * _Stream); 
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl fopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode); 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl fread_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl freopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode, FILE * _OldStream); 
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl gets_s(char * _Buffer, rsize_t _Size); 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl tmpfile_s(FILE ** _Stream); 
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) errno_t __cdecl tmpnam_s(char * _Buffer, rsize_t _Size); 
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl clearerr(FILE * _Stream); 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fclose(FILE * _Stream); 
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fcloseall(); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl _fdopen(int _FileHandle, const char * _Mode); 
#line 158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl feof(FILE * _Stream); 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl ferror(FILE * _Stream); 
#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fflush(FILE * _Stream); 
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fgetc(FILE * _Stream); 
#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fgetchar(); 
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fgetpos(FILE * _Stream, fpos_t * _Position); 
#line 190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl fgets(char * _Buffer, int _MaxCount, FILE * _Stream); 
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fileno(FILE * _Stream); 
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _flushall(); 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl fopen(const char * _FileName, const char * _Mode); 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fputc(int _Character, FILE * _Stream); 
#line 219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fputchar(int _Character); 
#line 225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fputs(const char * _Buffer, FILE * _Stream); 
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl fread(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl freopen(const char * _FileName, const char * _Mode, FILE * _Stream); 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl _fsopen(const char * _FileName, const char * _Mode, int _ShFlag); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fsetpos(FILE * _Stream, const fpos_t * _Position); 
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fseek(FILE * _Stream, long _Offset, int _Origin); 
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fseeki64(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) long __cdecl ftell(FILE * _Stream); 
#line 284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) __int64 __cdecl _ftelli64(FILE * _Stream); 
#line 289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl fwrite(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl getc(FILE * _Stream); 
#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl getchar(); 
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _getmaxstdio(); 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline char *__cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
#line 313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _getw(FILE * _Stream); 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl perror(const char * _ErrorMessage); 
#line 325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _pclose(FILE * _Stream); 
#line 330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl _popen(const char * _Command, const char * _Mode); 
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl putc(int _Character, FILE * _Stream); 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl putchar(int _Character); 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl puts(const char * _Buffer); 
#line 356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _putw(int _Word, FILE * _Stream); 
#line 363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl remove(const char * _FileName); 
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl rename(const char * _OldFileName, const char * _NewFileName); 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _unlink(const char * _FileName); 
#line 380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl unlink(const char * _FileName); 
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl rewind(FILE * _Stream); 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _rmtmp(); 
#line 396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl setbuf(FILE * _Stream, char * _Buffer); 
#line 402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _setmaxstdio(int _Maximum); 
#line 408 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl setvbuf(FILE * _Stream, char * _Buffer, int _Mode, size_t _Size); 
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _tempnam(const char * _DirectoryName, const char * _FilePrefix); 
#line 431 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl tmpfile(); 
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline ::errno_t __cdecl tmpnam_s(char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }
#line 438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl tmpnam(char * _Buffer); 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl ungetc(int _Character, FILE * _Stream); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl _lock_file(FILE * _Stream); 
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl _unlock_file(FILE * _Stream); 
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fclose_nolock(FILE * _Stream); 
#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fflush_nolock(FILE * _Stream); 
#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fgetc_nolock(FILE * _Stream); 
#line 486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fputc_nolock(int _Character, FILE * _Stream); 
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl _fread_nolock(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl _fread_nolock_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fseek_nolock(FILE * _Stream, long _Offset, int _Origin); 
#line 517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _fseeki64_nolock(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) long __cdecl _ftell_nolock(FILE * _Stream); 
#line 529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) __int64 __cdecl _ftelli64_nolock(FILE * _Stream); 
#line 534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) size_t __cdecl _fwrite_nolock(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _getc_nolock(FILE * _Stream); 
#line 547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _putc_nolock(int _Character, FILE * _Stream); 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _ungetc_nolock(int _Character, FILE * _Stream); 
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int *__cdecl __p__commode(); 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfprintf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_l(FILE *const 
#line 630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 639 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf(FILE *const 
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 653 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_s_l(FILE *const 
#line 659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 669 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf_s(FILE *const 
#line 676 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 684 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p_l(FILE *const 
#line 692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p(FILE *const 
#line 707 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 708 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 716 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_l(const char *const 
#line 721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 722 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf(const char *const 
#line 735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 736 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 743 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_s_l(const char *const 
#line 748 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 756 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 757 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf_s(const char *const 
#line 764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 772 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p_l(const char *const 
#line 779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 780 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p(const char *const 
#line 793 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 794 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 800 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_l(FILE *const 
#line 806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 808 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 820 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf(FILE *const 
#line 825 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 832 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 833 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 838 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _set_printf_count_output(int _Value); 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _get_printf_count_output(); 
#line 848 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_s_l(FILE *const 
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 850 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 859 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 860 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 861 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf_s(FILE *const 
#line 870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 879 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 880 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 881 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 889 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p_l(FILE *const 
#line 890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 901 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p(FILE *const 
#line 909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 920 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_l(const char *const 
#line 927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 928 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 936 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 937 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 938 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 944 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl printf(const char *const 
#line 945 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 951 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_s_l(const char *const 
#line 962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 969 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 972 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 973 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 974 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 975 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 981 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl printf_s(const char *const 
#line 982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 988 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 990 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 992 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 994 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p_l(const char *const 
#line 1001 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1002 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1007 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1010 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 1012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1013 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p(const char *const 
#line 1019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 1029 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfscanf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _Arglist); 
#line 1049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfscanf_l(FILE *const 
#line 1050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1051 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1052 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1053 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 1062 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf(FILE *const 
#line 1067 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1069 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1076 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vfscanf_s_l(FILE *const 
#line 1081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1084 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1090 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vfscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 1093 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf_s(FILE *const 
#line 1101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_l(const char *const 
#line 1117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf(const char *const 
#line 1131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_s_l(const char *const 
#line 1144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf_s(const char *const 
#line 1160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_l(FILE *const 
#line 1175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 1187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf(FILE *const 
#line 1194 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1207 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_s_l(FILE *const 
#line 1212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 1224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf_s(FILE *const 
#line 1233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Stream, const char *const 
#line 1234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1241 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_l(const char *const 
#line 1253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1260 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl scanf(const char *const 
#line 1271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_s_l(const char *const 
#line 1288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1298 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1299 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl scanf_s(const char *const 
#line 1308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1320 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsprintf(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_l(char *const 
#line 1376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf(char *const 
#line 1397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1399 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf(char *const 
#line 1427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_l(char *const 
#line 1447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#pragma warning(pop)
} 
#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf(char *const 
#line 1466 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1467 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#pragma warning(push)
#pragma warning(disable: 4996)
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#pragma warning(pop)
} 
#line 1483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_s_l(char *const 
#line 1484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1485 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1486 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1488 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1498 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1499 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1506 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf_s(char *const 
#line 1507 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1508 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1509 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1510 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1516 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vsprintf_s(char (&_Buffer)[_Size], const char *_Format, ::va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p_l(char *const 
#line 1533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1534 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1543 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1548 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p(char *const 
#line 1554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1555 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1557 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1563 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1564 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1569 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s_l(char *const 
#line 1570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1581 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsnprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1591 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s(char *const 
#line 1592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1593 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1596 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1602 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl _vsnprintf_s(char (&_Buffer)[_Size], ::size_t _BufferCount, const char *_Format, ::va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1619 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf_s(char *const 
#line 1620 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1621 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 1622 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 1623 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1624 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1630 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1634 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vsnprintf_s(char (&_Buffer)[_Size], ::size_t _BufferCount, const char *_Format, ::va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_l(const char *const 
#line 1647 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1659 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1660 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf(const char *const 
#line 1665 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1672 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vscprintf_l(_Format, 0, _ArgList); 
#line 1673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p_l(const char *const 
#line 1678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1679 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1680 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1690 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1691 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1695 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p(const char *const 
#line 1696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1697 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1703 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vscprintf_p_l(_Format, 0, _ArgList); 
#line 1704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1708 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c_l(char *const 
#line 1709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1710 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1711 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 1713 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1719 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
const int _Result = __stdio_common_vsprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return (_Result < 0) ? -1 : _Result; 
#line 1724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1729 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c(char *const 
#line 1730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 1733 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 1738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1744 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_l(char *const 
#line 1745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1746 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1757 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1762 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1763 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf(char *const 
#line 1770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1778 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList); 
#pragma warning(pop)
#line 1786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1788 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1791 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
__inline int __cdecl sprintf(char * _Buffer, const char * _Format, ...); __inline int __cdecl vsprintf(char * _Buffer, const char * _Format, va_list _Args); 
#line 1799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 1803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_s_l(char *const 
#line 1804 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1807 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1816 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1817 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1818 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf_s(char *const 
#line 1827 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1836 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1838 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1839 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1846 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template< size_t _Size> inline int __cdecl sprintf_s(char (&_Buffer)[_Size], const char *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const char *> (), ((void)(_ArgList = (((::va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)) }
#line 1854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p_l(char *const 
#line 1855 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1857 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1864 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1866 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1868 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1869 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1870 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p(char *const 
#line 1876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1878 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1884 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1886 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1888 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1889 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1890 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_l(char *const 
#line 1896 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1899 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1905 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1907 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1909 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#pragma warning(pop)
#line 1914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl snprintf(char *const 
#line 1933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1941 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1942 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#pragma warning(suppress:28719)
_Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1946 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1948 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char *const 
#line 1953 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1954 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1955 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 1960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#pragma warning(suppress:28719)
_Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1966 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1967 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 1971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char * _Buffer, size_t _BufferCount, const char * _Format, ...); __inline int __cdecl _vsnprintf(char * _Buffer, size_t _BufferCount, const char * _Format, va_list _Args); 
#line 1982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c_l(char *const 
#line 1983 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 1984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 1985 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 1986 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 1992 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 1993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 1994 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 1995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1996 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 1997 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 1998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2003 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c(char *const 
#line 2004 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2005 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2013 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2015 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2017 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2023 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s_l(char *const 
#line 2024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 2026 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 2027 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2028 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2034 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2035 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2036 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 2038 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2039 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s(char *const 
#line 2046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2047 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const size_t 
#line 2048 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_MaxCount, const char *const 
#line 2049 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2055 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2057 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 2059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2060 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2061 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {__pragma(warning(push)) __pragma(warning(disable: 4793)) template< size_t _Size> inline int __cdecl _snprintf_s(char (&_Buffer)[_Size], ::size_t _BufferCount, const char *_Format, ...) throw() { ::va_list _ArgList; (void)(__vcrt_va_start_verify_argument_type< const char *> (), ((void)(_ArgList = (((::va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)) }
#line 2073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_l(const char *const 
#line 2074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2075 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2082 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2084 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vscprintf_l(_Format, _Locale, _ArgList); 
#line 2085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2091 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf(const char *const 
#line 2092 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2098 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2099 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vscprintf_l(_Format, 0, _ArgList); 
#line 2102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p_l(const char *const 
#line 2109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vscprintf_p_l(_Format, _Locale, _ArgList); 
#line 2120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p(const char *const 
#line 2127 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vscprintf_p(_Format, _ArgList); 
#line 2137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsscanf(unsigned __int64 _Options, const char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 2157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsscanf_l(const char *const 
#line 2158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 2161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 2166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsscanf(const char *const 
#line 2175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 2177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 2182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _vsscanf_s_l(const char *const 
#line 2189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2190 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, va_list 
#line 2192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 2197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable:6530)
#line 2210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl vsscanf_s(const char *const 
#line 2211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, va_list 
#line 2213 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_ArgList) 
#line 2218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2220 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
extern "C++" {template< size_t _Size> inline int __cdecl vsscanf_s(const char (&_Buffer)[_Size], const char *_Format, ::va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 2230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_l(const char *const 
#line 2236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2237 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf(const char *const 
#line 2255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2267 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_s_l(const char *const 
#line 2273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2274 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf_s(const char *const 
#line 2294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const char *const 
#line 2295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4996)
_Result = vsscanf_s(_Buffer, _Format, _ArgList); 
#pragma warning(pop)
#line 2310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable:6530)
#line 2321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_l(const char *const 
#line 2322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2325 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2335 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2340 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf(const char *const 
#line 2346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s_l(const char *const 
#line 2370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, const _locale_t 
#line 2373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Locale, ...) 
#line 2378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2380 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2381 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< __crt_locale_pointers *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Locale))))) + (((sizeof _Locale + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s(const char *const 
#line 2394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Buffer, const size_t 
#line 2395 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_BufferCount, const char *const 
#line 2396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Format, ...) 
#line 2401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
{ 
#line 2402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
int _Result; 
#line 2403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
va_list _ArgList; 
#line 2404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(__vcrt_va_start_verify_argument_type< const char *const> (), ((void)(_ArgList = (((va_list)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(_Format))))) + (((sizeof _Format + sizeof(int)) - (1)) & (~(sizeof(int) - (1)))))))); 
#line 2406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
(void)(_ArgList = ((va_list)0)); 
#line 2411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
return _Result; 
#line 2412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
} 
#line 2415 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl tempnam(const char * _Directory, const char * _FilePrefix); 
#line 2447 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fcloseall(); 
#line 2448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl fdopen(int _FileHandle, const char * _Format); 
#line 2449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fgetchar(); 
#line 2450 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fileno(FILE * _Stream); 
#line 2451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl flushall(); 
#line 2452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fputchar(int _Ch); 
#line 2453 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl getw(FILE * _Stream); 
#line 2454 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl putw(int _Ch, FILE * _Stream); 
#line 2455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl rmtmp(); 
#line 2461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10240.0\\ucrt\\stdio.h"
}__pragma(pack ( pop )) 
#line 4 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"
 __declspec(noinline) void kernel(int a, int b, int *c) ;







#line 13 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"
#line 9 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"
int main() 
#line 10 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"
{ 
#line 11 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"
return 0; 
#line 12 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"
} 
#line 1 "kernel.cudafe1.stub.c"

#line 1 "kernel.cudafe1.stub.c"
#line 1 "c:\\users\\w0ns88\\desktop\\pba\\pa\\p-exam\\matrixmultiplication\\cuda\\debug\\kernel.cudafe1.stub.c"

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"







































































#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

template <typename T>
static inline T *__cudaAddressOf(T &val) 
{
    return (T *)((void *)(&(const_cast<char &>(reinterpret_cast<const volatile char &>(val)))));
}





        











          



          







#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"


#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"




#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"


#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

static void ____nv_dummy_param_ref(void *param) { volatile static void **__ref; __ref = (volatile void **)param; }




extern "C" {
void __cudaRegisterLinkedBinary__NV_MODULE_ID ( void (*)(void **), void *, void *, void (*)(void *));
}




extern "C" {

#pragma data_seg("__nv_module_id")
  static const __declspec(allocate("__nv_module_id")) unsigned char __module_id_str[] = "__NV_MODULE_ID";
#pragma data_seg()




#line 143 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"









}

extern "C" {
extern void** __stdcall __cudaRegisterFatBinary(
  void *fatCubin
);

extern void __stdcall __cudaUnregisterFatBinary(
  void **fatCubinHandle
);

extern void __stdcall __cudaRegisterVar(
        void **fatCubinHandle,
        char  *hostVar,
        char  *deviceAddress,
  const char  *deviceName,
        int    ext,
        int    size,
        int    constant,
        int    global
);

extern void __stdcall __cudaRegisterManagedVar(
        void **fatCubinHandle,
        void **hostVarPtrAddress,
        char  *deviceAddress,
  const char  *deviceName,
        int    ext,
        int    size,
        int    constant,
        int    global
);

extern char __stdcall __cudaInitModule(
        void **fatCubinHandle
);

extern void __stdcall __cudaRegisterTexture(
        void                    **fatCubinHandle,
  const struct textureReference  *hostVar,
  const void                    **deviceAddress,
  const char                     *deviceName,
        int                       dim,       
        int                       norm,      
        int                        ext        
);

extern void __stdcall __cudaRegisterSurface(
        void                    **fatCubinHandle,
  const struct surfaceReference  *hostVar,
  const void                    **deviceAddress,
  const char                     *deviceName,
        int                       dim,       
        int                       ext        
);

extern void __stdcall __cudaRegisterFunction(
        void   **fatCubinHandle,
  const char    *hostFun,
        char    *deviceFun,
  const char    *deviceName,
        int      thread_limit,
        uint3   *tid,
        uint3   *bid,
        dim3    *bDim,
        dim3    *gDim,
        int     *wSize
);




#line 225 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"


#line 228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"
extern int __cdecl atexit(void(__cdecl *)(void));
#line 230 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

}

static void **__cudaFatCubinHandle;

static void __cdecl __cudaUnregisterBinaryUtil(void)
{
  ____nv_dummy_param_ref((void *)&__cudaFatCubinHandle);
  __cudaUnregisterFatBinary(__cudaFatCubinHandle);
}

static char __nv_init_managed_rt_with_module(void **handle)
{
  return __cudaInitModule(handle);
}

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"












































































































































































































































#line 238 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"









#line 248 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 9831 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





#line 9837 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"


















































































































































































































#line 10048 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"







#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"













































#line 47 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"





#line 53 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"









#line 63 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"







#line 71 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"

#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"

#line 75 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"
#line 10056 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#pragma warning(disable : 4211)

#line 10062 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

static inline double rsqrt(double a);

static inline double rcbrt(double a);

static inline double sinpi(double a);

static inline double cospi(double a);

static inline void sincospi(double a, double *sptr, double *cptr);

static inline double erfinv(double a);

static inline double erfcinv(double a);

static inline double normcdfinv(double a);

static inline double normcdf(double a);

static inline double erfcx(double a);

static inline float rsqrtf(float a);

static inline float rcbrtf(float a);

static inline float sinpif(float a);

static inline float cospif(float a);

static inline void sincospif(float a, float *sptr, float *cptr);

static inline float erfinvf(float a);

static inline float erfcinvf(float a);

static inline float normcdfinvf(float a);

static inline float normcdff(float a);

static inline float erfcxf(float a);

static inline int min(int a, int b);

static inline unsigned int umin(unsigned int a, unsigned int b);

static inline long long int llmin(long long int a, long long int b);

static inline unsigned long long int ullmin(unsigned long long int a, unsigned long long int b);

static inline int max(int a, int b);

static inline unsigned int umax(unsigned int a, unsigned int b);

static inline long long int llmax(long long int a, long long int b);

static inline unsigned long long int ullmax(unsigned long long int a, unsigned long long int b);



static inline int __isnan(double a);

#line 10124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



static inline void sincos(double a, double *sptr, double *cptr);

#line 10130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



static inline double exp10(double a);

static inline float exp10f(float a);

static inline void sincosf(float a, float *sptr, float *cptr);

static inline int __isinf(double a);

#line 10142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"





#line 10148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



static inline int __signbit(double a);

static inline int __finite(double a);

static inline int __signbitl(long double a);

static inline int __signbitf(float a);

static inline int __finitel(long double a);

static inline int __finitef(float a);

static inline int __isinfl(long double a);

static inline int __isinff(float a);

static inline int __isnanl(long double a);

static inline int __isnanf(float a);

#line 10172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"













































































































































#line 10314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#pragma warning(default: 4211)

#line 10320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"



#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 1095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_constants.h"























































































































































#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_constants.h"
#line 1096 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


























































































































































































































































































































































































































































































































































































#line 1667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"







#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"









































































#line 75 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/func_macro.h"
#line 1675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"



#pragma warning(disable : 4211)

#line 1681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"



static inline int __isnan(double a)
{
  volatile union {
    double                 d;
    unsigned long long int l;
  } cvt;

  cvt.d = a;

  return cvt.l << 1 > 0xffe0000000000000ull;
}

#line 1697 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"









static inline double exp10(double a)
{
  return pow(10.0, a);
}

static inline float exp10f(float a)
{
    return (float)exp10((double)a);
}

static inline void sincos(double a, double *sptr, double *cptr)
{
  *sptr = sin(a);
  *cptr = cos(a);
}

static inline void sincosf(float a, float *sptr, float *cptr)
{
  double s, c;

  sincos((double)a, &s, &c);
  *sptr = (float)s;
  *cptr = (float)c;
}

static inline int __isinf(double a)
{
  volatile union {
    double                 d;
    unsigned long long int l;
  } cvt;

  cvt.d = a;

  return cvt.l << 1 == 0xffe0000000000000ull;
}

#line 1744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"








#line 1753 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 1755 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"









static inline int __signbit(double a)
{
  volatile union {
    double               d;
    signed long long int l;
  } cvt;

  cvt.d = a;
  return cvt.l < 0ll;
}














#line 1789 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

static inline int __finite(double a)
{
  volatile union {
    double                 d;
    unsigned long long int l;
  } cvt;

  cvt.d = a;
  return cvt.l << 1 < 0xffe0000000000000ull;
}








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"








static inline int __signbitl(long double a)
{
  return __signbit((double)a);
}

static inline int __signbitf(float a)
{
  return __signbit((double)a);
}

static inline int __finitel(long double a)
{
  return __finite((double)a);
}

static inline int __finitef(float a)
{
  return __finite((double)a);
}

static inline int __isinfl(long double a)
{
  return __isinf((double)a);
}

static inline int __isinff(float a)
{
  return __isinf((double)a);
}

static inline int __isnanl(long double a)
{
  return __isnan((double)a);
}

static inline int __isnanf(float a)
{
  return __isnan((double)a);
}























































































































































#line 3352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


























































#line 3411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 3413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"







static inline double rsqrt(double a)
{
  return 1.0 / sqrt(a);
}

static inline double rcbrt(double a)
{
  double s, t;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return 1.0 / a;
  } 
  s = fabs(a);
  t = exp2(-3.3333333333333333e-1 * log2(s));                
  t = ((t*t) * (-s*t) + 1.0) * (3.3333333333333333e-1*t) + t;


#line 3441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  if (__signbit(a))
#line 3443 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"
  {
    t = -t;
  }
  return t;
}

static inline double sinpi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return sin (a);
  } 
  if (a == floor(a)) {
    return ((a / 1.0e308) / 1.0e308) / 1.0e308;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  return a;
}

static inline double cospi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (__isinf(a)) {
    return cos (a);
  } 
  if (fabs(a) > 9.0071992547409920e+015) {
    a = 0.0;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  n++;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  if (a == 0.0) {
    a = fabs(a);
  }
  return a;
}

static inline void sincospi(double a, double *sptr, double *cptr)
{
  *sptr = sinpi(a);
  *cptr = cospi(a);
}

static inline double erfinv(double a)
{
  double p, q, t, fa;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  fa = fabs(a);
  if (fa >= 1.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;                    
    if (fa == 1.0) {
      t = a * exp(1000.0);        
    }
  } else if (fa >= 0.9375) {
    



    t = log1p(-fa);
    t = 1.0 / sqrt(-t);
    p =         2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q =     t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
    if (a < 0.0) t = -t;
  } else if (fa >= 0.75) {
    



    t = a * a - .87890625;
    p =         .21489185007307062000e+0;
    p = p * t - .64200071507209448655e+1;
    p = p * t + .29631331505876308123e+2;
    p = p * t - .47644367129787181803e+2;
    p = p * t + .34810057749357500873e+2;
    p = p * t - .12954198980646771502e+2;
    p = p * t + .25349389220714893917e+1;
    p = p * t - .24758242362823355486e+0;
    p = p * t + .94897362808681080020e-2;
    q =     t - .12831383833953226499e+2;
    q = q * t + .41409991778428888716e+2;
    q = q * t - .53715373448862143349e+2;
    q = q * t + .33880176779595142685e+2;
    q = q * t - .11315360624238054876e+2;
    q = q * t + .20369295047216351160e+1;
    q = q * t - .18611650627372178511e+0;
    q = q * t + .67544512778850945940e-2;
    p = p / q;
    t = a * p;
  } else {
    



    t = a * a - .5625;
    p =       - .23886240104308755900e+2;
    p = p * t + .45560204272689128170e+3;
    p = p * t - .22977467176607144887e+4;
    p = p * t + .46631433533434331287e+4;
    p = p * t - .43799652308386926161e+4;
    p = p * t + .19007153590528134753e+4;
    p = p * t - .30786872642313695280e+3;
    q =     t - .83288327901936570000e+2;
    q = q * t + .92741319160935318800e+3;
    q = q * t - .35088976383877264098e+4;
    q = q * t + .59039348134843665626e+4;
    q = q * t - .48481635430048872102e+4;
    q = q * t + .18997769186453057810e+4;
    q = q * t - .28386514725366621129e+3;
    p = p / q;
    t = a * p;
  }
  return t;
}

static inline double erfcinv(double a)
{
  double t;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  if (__isnan(a)) {
    return a + a;
  }
  if (a <= 0.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;                        
    if (a == 0.0) {
        t = (1.0 - a) * exp(1000.0);  
    }
  } 
  else if (a >= 0.0625) {
    t = erfinv (1.0 - a);
  }
  else if (a >= 1e-100) {
    



    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p =         2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q =     t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
  }
  else {
    



    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p =         6.9952990607058154858e-1;
    p = p * t + 1.9507620287580568829e+0;
    p = p * t + 8.2810030904462690216e-1;
    p = p * t + 1.1279046353630280005e-1;
    p = p * t + 6.0537914739162189689e-3;
    p = p * t + 1.3714329569665128933e-4;
    p = p * t + 1.2964481560643197452e-6;
    p = p * t + 4.6156006321345332510e-9;
    p = p * t + 4.5344689563209398450e-12;
    q =     t + 1.5771922386662040546e+0;
    q = q * t + 2.1238242087454993542e+0;
    q = q * t + 8.4001814918178042919e-1;
    q = q * t + 1.1311889334355782065e-1;
    q = q * t + 6.0574830550097140404e-3;
    q = q * t + 1.3715891988350205065e-4;
    q = q * t + 1.2964671850944981713e-6;
    q = q * t + 4.6156017600933592558e-9;
    q = q * t + 4.5344687377088206783e-12;
    t = p / (q * t);
  }
  return t;
}

static inline double normcdfinv(double a)
{
  return -1.4142135623730951 * erfcinv(a + a);
}

static inline double normcdf(double a)
{
  double ah, al, t1, t2, u1, u2, v1, v2, z;
  if (fabs (a) > 38.5) a = copysign (38.5, a);
  ah = a * 134217729.0;
  u1 = (a - ah) + ah;
  u2 = a - u1;
  v1 = -7.0710678398609161e-01;
  v2 =  2.7995440410322203e-09;
  t1 = a * -7.0710678118654757e-1;
  t2 = (((u1 * v1 - t1) + u1 * v2) + u2 * v1) + u2 * v2;
  t2 = (a * -(-4.8336466567264567e-17)) + t2;
  ah = t1 + t2;
  z = erfc (ah);
  if (a < -1.0) {
    al = (t1 - ah) + t2;
    t1 = -2.0 * ah * z;
    z = t1 * al + z;
  }
  return 0.5 * z;
}

static inline double erfcx(double a)
{
  double x, t1, t2, t3;

  if (__isnan(a)) {
    return a + a;
  }
  x = fabs(a); 
  if (x < 32.0) {
    








  
     
     
    t1 = x - 4.0; 
    t2 = x + 4.0; 
    t2 = t1 / t2;
       
    t1 =         - 3.5602694826817400E-010; 
    t1 = t1 * t2 - 9.7239122591447274E-009; 
    t1 = t1 * t2 - 8.9350224851649119E-009; 
    t1 = t1 * t2 + 1.0404430921625484E-007; 
    t1 = t1 * t2 + 5.8806698585341259E-008; 
    t1 = t1 * t2 - 8.2147414929116908E-007; 
    t1 = t1 * t2 + 3.0956409853306241E-007; 
    t1 = t1 * t2 + 5.7087871844325649E-006; 
    t1 = t1 * t2 - 1.1231787437600085E-005; 
    t1 = t1 * t2 - 2.4399558857200190E-005; 
    t1 = t1 * t2 + 1.5062557169571788E-004; 
    t1 = t1 * t2 - 1.9925637684786154E-004; 
    t1 = t1 * t2 - 7.5777429182785833E-004; 
    t1 = t1 * t2 + 5.0319698792599572E-003; 
    t1 = t1 * t2 - 1.6197733895953217E-002; 
    t1 = t1 * t2 + 3.7167515553018733E-002; 
    t1 = t1 * t2 - 6.6330365827532434E-002; 
    t1 = t1 * t2 + 9.3732834997115544E-002; 
    t1 = t1 * t2 - 1.0103906603555676E-001; 
    t1 = t1 * t2 + 6.8097054254735140E-002; 
    t1 = t1 * t2 + 1.5379652102605428E-002; 
    t1 = t1 * t2 - 1.3962111684056291E-001; 
    t1 = t1 * t2 + 1.2329951186255526E+000; 
      
    t2 = 2.0 * x + 1.0; 
    t1 = t1 / t2;
  } else {
    
    t2 = 1.0 / x;
    t3 = t2 * t2;
    t1 =         -29.53125;
    t1 = t1 * t3 + 6.5625;
    t1 = t1 * t3 - 1.875;
    t1 = t1 * t3 + 0.75;
    t1 = t1 * t3 - 0.5;
    t1 = t1 * t3 + 1.0;
    t2 = t2 * 5.6418958354775628e-001;
    t1 = t1 * t2;
  }
  if (a < 0.0) {
    
    t2 = ((int)(x * 16.0)) * 0.0625;
    t3 = (x - t2) * (x + t2);
    t3 = exp(t2 * t2) * exp(t3);
    t3 = t3 + t3;
    t1 = t3 - t1;
  }
  return t1;
}

static inline float rsqrtf(float a)
{
  return (float)rsqrt((double)a);
}

static inline float rcbrtf(float a)
{
  return (float)rcbrt((double)a);
}

static inline float sinpif(float a)
{
  return (float)sinpi((double)a);
}

static inline float cospif(float a)
{
  return (float)cospi((double)a);
}

static inline void sincospif(float a, float *sptr, float *cptr)
{
  double s, c;

  sincospi((double)a, &s, &c);
  *sptr = (float)s;
  *cptr = (float)c;
}

static inline float erfinvf(float a)
{
  return (float)erfinv((double)a);
}

static inline float erfcinvf(float a)
{
  return (float)erfcinv((double)a);
}

static inline float normcdfinvf(float a)
{
  return (float)normcdfinv((double)a);
}

static inline float normcdff(float a)
{
  return (float)normcdf((double)a);
}

static inline float erfcxf(float a)
{
  return (float)erfcx((double)a);
}



#pragma warning(default: 4211)

#line 3851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 3853 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 3855 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"

#line 3857 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.hpp"


#line 10328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"













































































































































































































#line 266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"






















































#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"











































































































































































































































































































































































































































































































#line 552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"



#line 556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.hpp"

#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"

#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions_dbl_ptx3.h"
#line 10332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 10334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\math_functions.h"

#line 250 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"

#line 252 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\common_functions.h"

#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"





#line 253 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#pragma pack()



#pragma warning(disable: 4099)



#pragma warning(disable: 4408)

#line 265 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#line 267 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#line 269 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"

#line 271 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\crt/host_runtime.h"
#line 3 "c:\\users\\w0ns88\\desktop\\pba\\pa\\p-exam\\matrixmultiplication\\cuda\\debug\\kernel.cudafe1.stub.c"
#line 1 "c:\\users\\w0ns88\\desktop\\pba\\pa\\p-exam\\matrixmultiplication\\cuda\\debug\\kernel.fatbin.c"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"
































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\fatbinary.h"
















































typedef struct fatBinaryHeader *computeFatBinaryFormat_t;




#line 55 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\fatbinary.h"



#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\fatbinary.h"



















struct __declspec(align(8)) fatBinaryHeader
{
  unsigned int           magic;
  unsigned short         version;
  unsigned short         headerSize;
  unsigned long long int fatSize;
};


typedef enum {
  FATBIN_KIND_PTX      = 0x0001,
  FATBIN_KIND_ELF      = 0x0002,
  FATBIN_KIND_OLDCUBIN = 0x0004,
} fatBinaryCodeKind;

#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\fatbinary.h"
#line 34 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"


extern "C" {
#line 38 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"






typedef enum {
  FBCTL_ERROR_NONE = 0,
  FBCTL_ERROR_NULL,           
  FBCTL_ERROR_UNRECOGNIZED,   
  FBCTL_ERROR_NO_CANDIDATE,   
  FBCTL_ERROR_COMPILE_FAILED, 
  FBCTL_ERROR_INTERNAL        
} fatBinaryCtlError_t;
extern char* fatBinaryCtl_Errmsg (fatBinaryCtlError_t e);

extern fatBinaryCtlError_t fatBinaryCtl_Create (void* *data);

extern void fatBinaryCtl_Delete (void* data);


extern fatBinaryCtlError_t fatBinaryCtl (void* data, int request, ...);















typedef enum {
  fatBinary_PreferBestCode,  
  fatBinary_AvoidPTX,        
  fatBinary_ForcePTX,        
  fatBinary_JITIfNotMatch    
} fatBinary_CompilationPolicy;





extern fatBinaryCtlError_t fatBinaryCtl_PickCandidate (void* data);







extern fatBinaryCtlError_t fatBinaryCtl_Compile (void* data, 
                                                 void* *elf, size_t *esize);








typedef struct {
  int magic;
  int version;
  const unsigned long long* data;
  void *filename_or_fatbins;  

} __fatBinC_Wrapper_t;

















#line 129 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"




}
#line 135 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"

#line 137 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\fatBinaryCtl.h"
#line 2 "c:\\users\\w0ns88\\desktop\\pba\\pa\\p-exam\\matrixmultiplication\\cuda\\debug\\kernel.fatbin.c"



extern "C" {
#line 7 "c:\\users\\w0ns88\\desktop\\pba\\pa\\p-exam\\matrixmultiplication\\cuda\\debug\\kernel.fatbin.c"

#pragma data_seg(".nv_fatbin")
static const __declspec(allocate(".nv_fatbin")) unsigned long long fatbinData[]= {
0x00100001ba55ed50,0x0000000000000df8,0x0000009001010002,0x00000000000007e0,
0x00000000000007db,0x0000001400010007,0x0000004900000040,0x0000000000002046,
0x0000000000000000,0x00000000000011a0,0x73726573552f3a43,0x2f3838736e30772f,
0x2f706f746b736544,0x702f61702f616270,0x614d2f6d6178652d,0x746c754d78697274,
0x69746163696c7069,0x2f414455432f6e6f,0x632e6c656e72656b,0x0000000000000075,
0x010101464c457fa2,0x0002530001000733,0x4015f5000c5000be,0x1400000e20000011,
0x0300200034001401,0x0000010014002800,0x617472747368732e,0x6d792700082e0062,
0x6e68735f14f50008,0x692e766e2e007864,0x7865742e006f666e,0x72656b365a5f2e74,
0x1d695069696c656e,0x68736f0000170f00,0x9e00001964657261,0x746e6174736e6f63,
0x6265645f70001c30,0x725fb200525f6775,0x00737361735f6765,0x6d617266aa00152e,
0x00116c65722e0065,0x656e696c43003605,0x00180f0025000032,0x0200490800110601,
0x626186000c020010,0x00892e0076657262,0x0200116119002a01,0x65676e617255000c,
0x616e627570890055,0x001506002f73656d,0x5f7874707f008e05,0x2e0b200180747874,
0x705f6f4c018e0f01,0x0edd01956d617261,0x0359000c40170001,0x1239001084001300,
0xbf0004390010a700,0x0010dd0005390010,0x3900100109000648,0x0008390010250007,
0x105e000939001033,0x33001083000a3900,0x00887b000c32000b,0x1302261310120000,
0x0731722530001e06,0x259900d210052700,0x2005000002003272,0x0000030033950014,
0x25d5044200003005,0x3805000004003472,0x3511001448000000,0x3611001440190050,
0x5812f00010000050,0xff00000174000000,0x007c040001ffffff,0xff0800288080810c,
0x0880808007288081,0x0005820710300005,0x0005841000058310,0x0005861000058510,
0x0033082880808050,0x0023288080820850,0x0023281000232810,0x8707283000232810,
0x8910000588100005,0x8b1000058a100005,0x8d1000058c100005,0x8f1000058e100005,
0x9110000590100046,0x9310000592100005,0x9510000594100005,0x9710000596100005,
0x9910000598100005,0x9b1000059a100005,0x9d1000059c100005,0x9f1000059e100005,
0xa1100005a0100055,0xa3100005a2100005,0xa5100005a4100019,0xa7100005a6100005,
0xa9100005a8100019,0xab100005aa100005,0xad100005ac100019,0xaf100005ae100005,
0xb1100005b0100019,0xb3100005b2100005,0xb5100005b4100019,0xb7100005b6100005,
0xb9100005b8100019,0xbb100005ba100005,0xbd100005bc100019,0x00270164be100005,
0x0000008083027218,0x0021018000001e04,0x0190020600061e31,0x010101000a0efb01,
0x0205200004000250,0x1803000406f10031,0x808080f3f0f08401,0x0101000802f080f2,
0xf20035621d003583,0x726573552f3a4332,0x3838736e30772f73,0x706f746b7365442f,
0x2f61702f6162702f,0x4d2f6d6178652d70,0x6c754d7869727461,0x746163696c706974,
0x414455432f6e6f69,0x75632ec502a90000,0x9b05c39abce70100,0x03030101f0008701,
0x0103013802020301,0xf400752002012802,0x030b13082501111c,0x00081b0610011108,
0x03084087012e0200,0x3f1349063b063a08,0x000a40011201110c,0x0ef0001500050300,
0x3b0400000b330a02,0x0024050000080300,0x0000060b0b3e0803,0x30001b1349000f06,
0x00740200dd013a00,0x65666e65676c03ff,0x2e3420474445203a,0x162c00e304003031,
0x433100010400e22f,0x00525c1200525c3a,0x62705c8200525c13,0x1f00525c61705c61,
0x01355c110100525c,0x11000e0905a7021b,0x012700004201c201,0x9c014502000101d4,
0x01632d10001a6103,0x6203073b03f30310,0x6315001624110016,0x2810001637110016,
0x696f760400d00016,0x0500746e69050064,0x0c4400330610001c,0x014800013e002000,
0x010800910000b03b,0x737265762e0df100,0x00302e35206e6f69,0x207465677261742e,
0x87202c30325f6d73,0x6464612e0002f205,0x7a69735f73736572,0x69e9003632332065,
0x652e20656c626973,0x310060207972746e,0x2e205a06a72e0028,0x06c002001b323375,
0x1f0e00232c305f3f,0x290032500f002331,0x2e2067e006457b00,0x3c72250920323362,
0x7566c100a03b3e37,0x6e696765625f636e,0x4e646c2200e73a30,0x314f0029752e2200,
0x5d2d02009a5b202c,0x04002c321f002c3b,0x2c331f00002c311f,0x00953b5d32320400,
0x74b2009a65786537,0x646461003a30706d,0x202c34310040732e,0x183b32722548009d,
0x756d640018351800,0x3633001b6f6c2e6c,0x003b35520038202c,0x72255b50008a7473,
0x653b362000145d33,0x657200003a317100,0x008a3a3223000c74,0xcf7d003a30646e61,
0x1702cd6365733001,0x01007b203f07bc20,0xff0201247d1df800,0x02ab00c67b202f08,
0x00001b7b202f099a,0x830600e30f099204,0x0b0008110400007d,0x21000c120427000f,
0x0c0020c20482080a,0x0c1704000c190300,0xf0000008550d0400,0x1004000139001011,
0x0011f04000010100,0x1d00000b52052b80,0x1300086f13000800,0xde130001000008da,
0xa11c0105801f000c,0x2800440400005de4,0x1c861831003b1de2,0x90009de214510017,
0x310010209c220010,0x30dc210010a000dd,0x5908011c03400010,0x210008001c033109,
0x1de4504009a09ca3,0x489c85283100bd00,0x3109b91de7903100,0x08801f00101de740,
0x01111800b70f0200,0x3d34100001060a54,0x0001000020011a00,0x0001b45f00280b1b,
0x1e13150000289500,0x00034c5300280206,0x06650a130014c000,0x0000349217088c00,
0x8a0000040c6e0001,0x5f0028aa1b005000,0x0000789400000496,0x00062a5f0028c81b,
0x28f41b0000503500,0x28870000065f5f00,0x5f002801102a0000,0x00002856000006e6,
0x00073c5f00281e1b,0x28491b0000a03e00,0x50240000087a5f00,0x9e6e00286e1b0000,
0x1200280445000008,0x2200187014000729,0x0401a4040a060ce4,0xfc220028461b0033,
0x0401ac03130bfa0c,0x09000000b7580028,0x280800000d4300c8,0x0010000028051300,
0x002844170028dc1b,0x2801002a00280617,0x28071700284c1700,0x28000084012a2600,
0x091300c80d542600,0xfc76130301000028,0x000d6c57025c0400,0x1300c80402742c00,
0x98220d0604002832,0x1402c403120d280d,0x0411280613002805,0xec04000460130078,
0x02f0050064011300,0x010f002008000403,0x0400000006800100,0x0000000000000000,
0x000000c801010001,0x00000000000004c0,0x00000040000004bf,0x0000001400050000,
0x0000004900000078,0x0000000000002046,0x0000000000000000,0x0000000000000fcb,
0x0000002c00000048,0x6e6f642d2d20672d,0x2d656772656d2d74,0x6f6c626369736162,
0x65722d2d20736b63,0x2d74612d6e727574,0x0000000020646e65,0x73726573552f3a43,
0x2f3838736e30772f,0x2f706f746b736544,0x702f61702f616270,0x614d2f6d6178652d,
0x746c754d78697274,0x69746163696c7069,0x2f414455432f6e6f,0x632e6c656e72656b,
0x0000000000000075,0x2e25f600020a0d2a,0x206e6f6973726576,0x61742e0a0d302e35,
0x5f6d732074656772,0x75626564202c3032,0x726464612e0a0d67,0x657a69735f737365,
0x691afa003c323320,0x652e20656c626973,0x365a5f207972746e,0x69696c656e72656b,
0x61702e0a0d286950,0x3233752e206d6172,0x5f3f00195f11001c,0x24311f0f00242c30,
0x290a0d320af31000,0x65722e0a0d7b0a0d,0x25203233622e2067,0xf200a73b3e373c72,
0x34203120636f6c08,0x636e75660a0d3120,0x3a306e696765625f,0x20302031096c001a,
0x646c0a0d42002830,0x72256f0076010077,0x2d0200c45b202c31,0x002c321f002c3b5d,
0x331f00002c311f04,0xae3b5d323304002c,0x1000b36578653e00,0x13706d743000a536,
0x4d732e6464615100,0x254800aa2c342200,0x18351900183b3272,0x6f6c2e6c756d6300,
0x6100382c3624001b,0x009774730a0d3b35,0x00145d3372255b50,0x79311600663b3621,
0x720a0d3220378200,0xa53a322400197465,0x7d11008b646e2000,0x656c696639f20148,
0x552f3a4322203109,0x6e30772f73726573,0x6b7365442f383873,0x2f6162702f706f74,
0x6178652d702f6170,0x78697274614d2f6d,0x696c7069746c754d,0x432f6e6f69746163,
0x06f101152f414455,0x3431202c2275632e,0x3133323032313338,0x300068353531202c,
0x2e2021002d636573,0x6f666e695f6002a8,0x3330020100020620,0x32203832000a3431,
0x2c03001830130007,0x7665726262616200,0x01f601002903001b,0x0009383024000901,
0x0009311300093314,0x1b321b0012303124,0x1933130035351300,0x1803000839362300,
0x3513002031372a00,0x0300083634230008,0x1900883834240030,0x006837362a009f30,
0x9b35382400103413,0x1b341b00ad351d00,0x6d31312700340400,0x2a002b0400d80a00,
0xcf37342a00083635,0x0500780500660700,0x240500093614005e,0x0011030081321c00,
0x2137392e004f3913,0xef341d0b00190f00,0x313a003330322a00,0x2137372b003c3930,
0x302b012a36312c00,0x1c002c3715004d35,0x003536312c021e37,0x001b03024232312d,
0x302d05007b39392f,0x0b0173301b012d35,0xd6361c01830401ea,0x1c07020237302f01,
0x028038302a001b30,0x03340a00e9393927,0x656e696c4f033c0b,0x029432392f030294,
0x2f26029432392f1f,0x32392f3102943239,0x190e00210e0c0294,0x32392f1e02940f00,
0x029432392fa20294,0x0010321404be090f,0x2f00190300763914,0x00a3062902b63435,
0x0c002c3815000904,0x334365007a0f0083,0x0834130008312032,0x01066d3539323500,
0x0012080890070011,0x3834002907074f00,0x0150331502f43120,0x9b33150d006d371f,
0x8b622e2f003b0506,0x00650c025a030509,0x65311f390065381f,0x1f0e0065391f0400,
0x0c03580417006531,0xdb381c01d9040744,0x0239301b01d00602,0x301703110701cf05,
0x00b406002d0c032c,0x012208001f203823,0x08be7d1e088b3116,0x088d7b202c089202,
0x331500130501e705,0x393126019e050013,0x00260e00270500e1,0x090500c706004c0e,
0x09301d005f321e00,0x5436342e03d70500,0x4a341d0415331400,0x8238352d00950e00,
0x372e001339352d00,0x1f0014361600eb33,0x0013381d0900e332,0x00e430312f009906,
0x001b351e005f0507,0x008c321e3800c70f,0x00a00e01cf31352e,0x0f00a10e0069341e,
0x332f00d7050801c4,0x00a8361610004036,0x0067361f00009e0f,0x0e01480e02210607,
0x09011500fd0f0110,0x61728f0003470f00,0x001d7b207365676e,0x6d616e6275706202,
0x25321f039c02001f,0x4f0d190c5100090c,0x5736372f049c000c,0x32339000fc076006,
0x000a0d7d0a0d3020
};
#pragma data_seg()


}
#line 129 "c:\\users\\w0ns88\\desktop\\pba\\pa\\p-exam\\matrixmultiplication\\cuda\\debug\\kernel.fatbin.c"


extern "C" {
#line 133 "c:\\users\\w0ns88\\desktop\\pba\\pa\\p-exam\\matrixmultiplication\\cuda\\debug\\kernel.fatbin.c"
#pragma data_seg(".nvFatBinSegment")
__declspec(allocate(".nvFatBinSegment")) __declspec(align(8)) static const __fatBinC_Wrapper_t __fatDeviceText= 
	{ 0x466243b1, 1, fatbinData, 0 };
#pragma data_seg()

}
#line 140 "c:\\users\\w0ns88\\desktop\\pba\\pa\\p-exam\\matrixmultiplication\\cuda\\debug\\kernel.fatbin.c"
#line 4 "c:\\users\\w0ns88\\desktop\\pba\\pa\\p-exam\\matrixmultiplication\\cuda\\debug\\kernel.cudafe1.stub.c"
extern void __device_stub__Z6kerneliiPi(int, int, int *);
static void __nv_cudaEntityRegisterCallback(void **);
static void __sti____cudaRegisterAll_14_kernel_cpp1_ii_b614c5e6(void);
#pragma section(".CRT$XCU",read,write)
__declspec(allocate(".CRT$XCU"))static void (*__dummy_static_init__sti____cudaRegisterAll_14_kernel_cpp1_ii_b614c5e6[])(void) = {__sti____cudaRegisterAll_14_kernel_cpp1_ii_b614c5e6};
void __device_stub__Z6kerneliiPi(int __par0, int __par1, int *__par2){if (cudaSetupArgument((void *)(char *)&__par0, sizeof(__par0), (size_t)0U) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par1, sizeof(__par1), (size_t)4U) != cudaSuccess) return;if (cudaSetupArgument((void *)(char *)&__par2, sizeof(__par2), (size_t)8U) != cudaSuccess) return;{ volatile static char *__f; __f = ((char *)((void ( *)(int, int, int *))kernel)); (void)cudaLaunch(((char *)((void ( *)(int, int, int *))kernel))); };}
#line 4 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"
void kernel( int __cuda_0,int __cuda_1,int *__cuda_2)
#line 5 "C:/Users/w0ns88/Desktop/pba/pa/p-exam/MatrixMultiplication/CUDA/kernel.cu"
{__device_stub__Z6kerneliiPi( __cuda_0,__cuda_1,__cuda_2);

}
#line 1 "c:\\users\\w0ns88\\desktop\\pba\\pa\\p-exam\\matrixmultiplication\\cuda\\debug\\kernel.cudafe1.stub.c"
static void __nv_cudaEntityRegisterCallback( void **__T20) {  { volatile static void **__ref; __ref = (volatile void **)__T20; }; __nv_save_fatbinhandle_for_managed_rt(__T20); __cudaRegisterFunction(__T20, (const char*)((void ( *)(int, int, int *))kernel), (char*)"_Z6kerneliiPi", "_Z6kerneliiPi", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0); }
static void __sti____cudaRegisterAll_14_kernel_cpp1_ii_b614c5e6(void) {  __cudaFatCubinHandle = __cudaRegisterFatBinary((void*)&__fatDeviceText); { void (*callback_fp)(void **) = (void (*)(void **))(__nv_cudaEntityRegisterCallback); (*callback_fp)(__cudaFatCubinHandle); } atexit(__cudaUnregisterBinaryUtil);  }
#line 2 "kernel.cudafe1.stub.c"
#line 1 "kernel.cudafe1.stub.c"


